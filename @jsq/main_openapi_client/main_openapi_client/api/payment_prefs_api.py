# coding: utf-8

"""
    Juniper Square Internal API

    An internal API for inter-service communication at JSQ.

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictInt
from typing import List, Optional
from typing_extensions import Annotated
from main_openapi_client.models.payment_pref import PaymentPref
from main_openapi_client.models.update_payment_pref_options import UpdatePaymentPrefOptions
from main_openapi_client.models.update_positions_payment_pref_success_response import UpdatePositionsPaymentPrefSuccessResponse

from main_openapi_client.api_client import ApiClient, RequestSerialized
from main_openapi_client.api_response import ApiResponse
from main_openapi_client.rest import RESTResponseType


class PaymentPrefsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def associate_payment_pref_with_positions(
        self,
        user_id: Annotated[StrictInt, Field(description="User ID of the resource")],
        target_payment_pref_id: Annotated[StrictInt, Field(description="Target Payment Pref ID.")],
        position_ids: Annotated[List[StrictInt], Field(description="List of position ids.")],
        arena_id: Annotated[StrictInt, Field(description="Required arena_id to filter by.")],
        should_update_account_mailing_address: Annotated[Optional[StrictBool], Field(description="If the Account mailing address should be updated.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> UpdatePositionsPaymentPrefSuccessResponse:
        """Associate payment pref with positions

        Changes the payment pref tied to a position to the specified payment pref.

        :param user_id: User ID of the resource (required)
        :type user_id: int
        :param target_payment_pref_id: Target Payment Pref ID. (required)
        :type target_payment_pref_id: int
        :param position_ids: List of position ids. (required)
        :type position_ids: List[int]
        :param arena_id: Required arena_id to filter by. (required)
        :type arena_id: int
        :param should_update_account_mailing_address: If the Account mailing address should be updated.
        :type should_update_account_mailing_address: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._associate_payment_pref_with_positions_serialize(
            user_id=user_id,
            target_payment_pref_id=target_payment_pref_id,
            position_ids=position_ids,
            arena_id=arena_id,
            should_update_account_mailing_address=should_update_account_mailing_address,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UpdatePositionsPaymentPrefSuccessResponse",
            '400': "BulkUpdateDeveloperFeatureFlags400Response",
            '401': "GetDeveloperFeatureFlags401Response",
            '403': "ServerError",
            '404': "ServerError",
            '500': "ServerError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def associate_payment_pref_with_positions_with_http_info(
        self,
        user_id: Annotated[StrictInt, Field(description="User ID of the resource")],
        target_payment_pref_id: Annotated[StrictInt, Field(description="Target Payment Pref ID.")],
        position_ids: Annotated[List[StrictInt], Field(description="List of position ids.")],
        arena_id: Annotated[StrictInt, Field(description="Required arena_id to filter by.")],
        should_update_account_mailing_address: Annotated[Optional[StrictBool], Field(description="If the Account mailing address should be updated.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[UpdatePositionsPaymentPrefSuccessResponse]:
        """Associate payment pref with positions

        Changes the payment pref tied to a position to the specified payment pref.

        :param user_id: User ID of the resource (required)
        :type user_id: int
        :param target_payment_pref_id: Target Payment Pref ID. (required)
        :type target_payment_pref_id: int
        :param position_ids: List of position ids. (required)
        :type position_ids: List[int]
        :param arena_id: Required arena_id to filter by. (required)
        :type arena_id: int
        :param should_update_account_mailing_address: If the Account mailing address should be updated.
        :type should_update_account_mailing_address: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._associate_payment_pref_with_positions_serialize(
            user_id=user_id,
            target_payment_pref_id=target_payment_pref_id,
            position_ids=position_ids,
            arena_id=arena_id,
            should_update_account_mailing_address=should_update_account_mailing_address,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UpdatePositionsPaymentPrefSuccessResponse",
            '400': "BulkUpdateDeveloperFeatureFlags400Response",
            '401': "GetDeveloperFeatureFlags401Response",
            '403': "ServerError",
            '404': "ServerError",
            '500': "ServerError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def associate_payment_pref_with_positions_without_preload_content(
        self,
        user_id: Annotated[StrictInt, Field(description="User ID of the resource")],
        target_payment_pref_id: Annotated[StrictInt, Field(description="Target Payment Pref ID.")],
        position_ids: Annotated[List[StrictInt], Field(description="List of position ids.")],
        arena_id: Annotated[StrictInt, Field(description="Required arena_id to filter by.")],
        should_update_account_mailing_address: Annotated[Optional[StrictBool], Field(description="If the Account mailing address should be updated.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Associate payment pref with positions

        Changes the payment pref tied to a position to the specified payment pref.

        :param user_id: User ID of the resource (required)
        :type user_id: int
        :param target_payment_pref_id: Target Payment Pref ID. (required)
        :type target_payment_pref_id: int
        :param position_ids: List of position ids. (required)
        :type position_ids: List[int]
        :param arena_id: Required arena_id to filter by. (required)
        :type arena_id: int
        :param should_update_account_mailing_address: If the Account mailing address should be updated.
        :type should_update_account_mailing_address: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._associate_payment_pref_with_positions_serialize(
            user_id=user_id,
            target_payment_pref_id=target_payment_pref_id,
            position_ids=position_ids,
            arena_id=arena_id,
            should_update_account_mailing_address=should_update_account_mailing_address,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UpdatePositionsPaymentPrefSuccessResponse",
            '400': "BulkUpdateDeveloperFeatureFlags400Response",
            '401': "GetDeveloperFeatureFlags401Response",
            '403': "ServerError",
            '404': "ServerError",
            '500': "ServerError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _associate_payment_pref_with_positions_serialize(
        self,
        user_id,
        target_payment_pref_id,
        position_ids,
        arena_id,
        should_update_account_mailing_address,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'position_ids': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if user_id is not None:
            _path_params['user_id'] = user_id
        # process the query parameters
        if target_payment_pref_id is not None:
            
            _query_params.append(('target_payment_pref_id', target_payment_pref_id))
            
        if position_ids is not None:
            
            _query_params.append(('position_ids', position_ids))
            
        if arena_id is not None:
            
            _query_params.append(('arena_id', arena_id))
            
        if should_update_account_mailing_address is not None:
            
            _query_params.append(('should_update_account_mailing_address', should_update_account_mailing_address))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/users/{user_id}/associate_payment_pref/positions',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def associate_payment_pref_with_positions_of_accounts(
        self,
        user_id: Annotated[StrictInt, Field(description="User ID of the resource")],
        target_payment_pref_id: Annotated[StrictInt, Field(description="Target Payment Pref ID.")],
        account_ids: Annotated[List[StrictInt], Field(description="List of account ids.")],
        check_same_mailing_address: Annotated[Optional[StrictBool], Field(description="Specifies if check address is the same as mailing address.")] = None,
        should_update_account_mailing_address: Annotated[Optional[StrictBool], Field(description="If the Account mailing address should be updated.")] = None,
        bypass_check_for_accepted_payment_methods: Annotated[Optional[StrictBool], Field(description="If the checks for accepted payment methods should be bypassed.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> UpdatePositionsPaymentPrefSuccessResponse:
        """Associate payment pref with positions of account

        Searches for all positions within an account and alters their payment prefs to the specified payment pref.

        :param user_id: User ID of the resource (required)
        :type user_id: int
        :param target_payment_pref_id: Target Payment Pref ID. (required)
        :type target_payment_pref_id: int
        :param account_ids: List of account ids. (required)
        :type account_ids: List[int]
        :param check_same_mailing_address: Specifies if check address is the same as mailing address.
        :type check_same_mailing_address: bool
        :param should_update_account_mailing_address: If the Account mailing address should be updated.
        :type should_update_account_mailing_address: bool
        :param bypass_check_for_accepted_payment_methods: If the checks for accepted payment methods should be bypassed.
        :type bypass_check_for_accepted_payment_methods: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._associate_payment_pref_with_positions_of_accounts_serialize(
            user_id=user_id,
            target_payment_pref_id=target_payment_pref_id,
            account_ids=account_ids,
            check_same_mailing_address=check_same_mailing_address,
            should_update_account_mailing_address=should_update_account_mailing_address,
            bypass_check_for_accepted_payment_methods=bypass_check_for_accepted_payment_methods,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UpdatePositionsPaymentPrefSuccessResponse",
            '400': "BulkUpdateDeveloperFeatureFlags400Response",
            '401': "GetDeveloperFeatureFlags401Response",
            '403': "ServerError",
            '404': "ServerError",
            '500': "ServerError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def associate_payment_pref_with_positions_of_accounts_with_http_info(
        self,
        user_id: Annotated[StrictInt, Field(description="User ID of the resource")],
        target_payment_pref_id: Annotated[StrictInt, Field(description="Target Payment Pref ID.")],
        account_ids: Annotated[List[StrictInt], Field(description="List of account ids.")],
        check_same_mailing_address: Annotated[Optional[StrictBool], Field(description="Specifies if check address is the same as mailing address.")] = None,
        should_update_account_mailing_address: Annotated[Optional[StrictBool], Field(description="If the Account mailing address should be updated.")] = None,
        bypass_check_for_accepted_payment_methods: Annotated[Optional[StrictBool], Field(description="If the checks for accepted payment methods should be bypassed.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[UpdatePositionsPaymentPrefSuccessResponse]:
        """Associate payment pref with positions of account

        Searches for all positions within an account and alters their payment prefs to the specified payment pref.

        :param user_id: User ID of the resource (required)
        :type user_id: int
        :param target_payment_pref_id: Target Payment Pref ID. (required)
        :type target_payment_pref_id: int
        :param account_ids: List of account ids. (required)
        :type account_ids: List[int]
        :param check_same_mailing_address: Specifies if check address is the same as mailing address.
        :type check_same_mailing_address: bool
        :param should_update_account_mailing_address: If the Account mailing address should be updated.
        :type should_update_account_mailing_address: bool
        :param bypass_check_for_accepted_payment_methods: If the checks for accepted payment methods should be bypassed.
        :type bypass_check_for_accepted_payment_methods: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._associate_payment_pref_with_positions_of_accounts_serialize(
            user_id=user_id,
            target_payment_pref_id=target_payment_pref_id,
            account_ids=account_ids,
            check_same_mailing_address=check_same_mailing_address,
            should_update_account_mailing_address=should_update_account_mailing_address,
            bypass_check_for_accepted_payment_methods=bypass_check_for_accepted_payment_methods,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UpdatePositionsPaymentPrefSuccessResponse",
            '400': "BulkUpdateDeveloperFeatureFlags400Response",
            '401': "GetDeveloperFeatureFlags401Response",
            '403': "ServerError",
            '404': "ServerError",
            '500': "ServerError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def associate_payment_pref_with_positions_of_accounts_without_preload_content(
        self,
        user_id: Annotated[StrictInt, Field(description="User ID of the resource")],
        target_payment_pref_id: Annotated[StrictInt, Field(description="Target Payment Pref ID.")],
        account_ids: Annotated[List[StrictInt], Field(description="List of account ids.")],
        check_same_mailing_address: Annotated[Optional[StrictBool], Field(description="Specifies if check address is the same as mailing address.")] = None,
        should_update_account_mailing_address: Annotated[Optional[StrictBool], Field(description="If the Account mailing address should be updated.")] = None,
        bypass_check_for_accepted_payment_methods: Annotated[Optional[StrictBool], Field(description="If the checks for accepted payment methods should be bypassed.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Associate payment pref with positions of account

        Searches for all positions within an account and alters their payment prefs to the specified payment pref.

        :param user_id: User ID of the resource (required)
        :type user_id: int
        :param target_payment_pref_id: Target Payment Pref ID. (required)
        :type target_payment_pref_id: int
        :param account_ids: List of account ids. (required)
        :type account_ids: List[int]
        :param check_same_mailing_address: Specifies if check address is the same as mailing address.
        :type check_same_mailing_address: bool
        :param should_update_account_mailing_address: If the Account mailing address should be updated.
        :type should_update_account_mailing_address: bool
        :param bypass_check_for_accepted_payment_methods: If the checks for accepted payment methods should be bypassed.
        :type bypass_check_for_accepted_payment_methods: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._associate_payment_pref_with_positions_of_accounts_serialize(
            user_id=user_id,
            target_payment_pref_id=target_payment_pref_id,
            account_ids=account_ids,
            check_same_mailing_address=check_same_mailing_address,
            should_update_account_mailing_address=should_update_account_mailing_address,
            bypass_check_for_accepted_payment_methods=bypass_check_for_accepted_payment_methods,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UpdatePositionsPaymentPrefSuccessResponse",
            '400': "BulkUpdateDeveloperFeatureFlags400Response",
            '401': "GetDeveloperFeatureFlags401Response",
            '403': "ServerError",
            '404': "ServerError",
            '500': "ServerError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _associate_payment_pref_with_positions_of_accounts_serialize(
        self,
        user_id,
        target_payment_pref_id,
        account_ids,
        check_same_mailing_address,
        should_update_account_mailing_address,
        bypass_check_for_accepted_payment_methods,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'account_ids': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if user_id is not None:
            _path_params['user_id'] = user_id
        # process the query parameters
        if target_payment_pref_id is not None:
            
            _query_params.append(('target_payment_pref_id', target_payment_pref_id))
            
        if account_ids is not None:
            
            _query_params.append(('account_ids', account_ids))
            
        if check_same_mailing_address is not None:
            
            _query_params.append(('check_same_mailing_address', check_same_mailing_address))
            
        if should_update_account_mailing_address is not None:
            
            _query_params.append(('should_update_account_mailing_address', should_update_account_mailing_address))
            
        if bypass_check_for_accepted_payment_methods is not None:
            
            _query_params.append(('bypass_check_for_accepted_payment_methods', bypass_check_for_accepted_payment_methods))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/users/{user_id}/associate_payment_pref/accounts',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def associate_payment_pref_with_positions_of_source_payment_pref(
        self,
        user_id: Annotated[StrictInt, Field(description="User ID of the resource")],
        target_payment_pref_id: Annotated[StrictInt, Field(description="Target Payment Pref ID.")],
        account_id: Annotated[StrictInt, Field(description="Account id.")],
        source_payment_pref_id: Annotated[StrictInt, Field(description="Source Payment Pref ID.")],
        should_update_account_mailing_address: Annotated[Optional[StrictBool], Field(description="If the Account mailing address should be updated.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> UpdatePositionsPaymentPrefSuccessResponse:
        """Associate payment pref with positions of source payment pref

        Searches for all positions within an account that has a source payment pref and alters their payment prefs to the specified payment pref.

        :param user_id: User ID of the resource (required)
        :type user_id: int
        :param target_payment_pref_id: Target Payment Pref ID. (required)
        :type target_payment_pref_id: int
        :param account_id: Account id. (required)
        :type account_id: int
        :param source_payment_pref_id: Source Payment Pref ID. (required)
        :type source_payment_pref_id: int
        :param should_update_account_mailing_address: If the Account mailing address should be updated.
        :type should_update_account_mailing_address: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._associate_payment_pref_with_positions_of_source_payment_pref_serialize(
            user_id=user_id,
            target_payment_pref_id=target_payment_pref_id,
            account_id=account_id,
            source_payment_pref_id=source_payment_pref_id,
            should_update_account_mailing_address=should_update_account_mailing_address,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UpdatePositionsPaymentPrefSuccessResponse",
            '400': "BulkUpdateDeveloperFeatureFlags400Response",
            '401': "GetDeveloperFeatureFlags401Response",
            '403': "ServerError",
            '404': "ServerError",
            '500': "ServerError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def associate_payment_pref_with_positions_of_source_payment_pref_with_http_info(
        self,
        user_id: Annotated[StrictInt, Field(description="User ID of the resource")],
        target_payment_pref_id: Annotated[StrictInt, Field(description="Target Payment Pref ID.")],
        account_id: Annotated[StrictInt, Field(description="Account id.")],
        source_payment_pref_id: Annotated[StrictInt, Field(description="Source Payment Pref ID.")],
        should_update_account_mailing_address: Annotated[Optional[StrictBool], Field(description="If the Account mailing address should be updated.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[UpdatePositionsPaymentPrefSuccessResponse]:
        """Associate payment pref with positions of source payment pref

        Searches for all positions within an account that has a source payment pref and alters their payment prefs to the specified payment pref.

        :param user_id: User ID of the resource (required)
        :type user_id: int
        :param target_payment_pref_id: Target Payment Pref ID. (required)
        :type target_payment_pref_id: int
        :param account_id: Account id. (required)
        :type account_id: int
        :param source_payment_pref_id: Source Payment Pref ID. (required)
        :type source_payment_pref_id: int
        :param should_update_account_mailing_address: If the Account mailing address should be updated.
        :type should_update_account_mailing_address: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._associate_payment_pref_with_positions_of_source_payment_pref_serialize(
            user_id=user_id,
            target_payment_pref_id=target_payment_pref_id,
            account_id=account_id,
            source_payment_pref_id=source_payment_pref_id,
            should_update_account_mailing_address=should_update_account_mailing_address,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UpdatePositionsPaymentPrefSuccessResponse",
            '400': "BulkUpdateDeveloperFeatureFlags400Response",
            '401': "GetDeveloperFeatureFlags401Response",
            '403': "ServerError",
            '404': "ServerError",
            '500': "ServerError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def associate_payment_pref_with_positions_of_source_payment_pref_without_preload_content(
        self,
        user_id: Annotated[StrictInt, Field(description="User ID of the resource")],
        target_payment_pref_id: Annotated[StrictInt, Field(description="Target Payment Pref ID.")],
        account_id: Annotated[StrictInt, Field(description="Account id.")],
        source_payment_pref_id: Annotated[StrictInt, Field(description="Source Payment Pref ID.")],
        should_update_account_mailing_address: Annotated[Optional[StrictBool], Field(description="If the Account mailing address should be updated.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Associate payment pref with positions of source payment pref

        Searches for all positions within an account that has a source payment pref and alters their payment prefs to the specified payment pref.

        :param user_id: User ID of the resource (required)
        :type user_id: int
        :param target_payment_pref_id: Target Payment Pref ID. (required)
        :type target_payment_pref_id: int
        :param account_id: Account id. (required)
        :type account_id: int
        :param source_payment_pref_id: Source Payment Pref ID. (required)
        :type source_payment_pref_id: int
        :param should_update_account_mailing_address: If the Account mailing address should be updated.
        :type should_update_account_mailing_address: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._associate_payment_pref_with_positions_of_source_payment_pref_serialize(
            user_id=user_id,
            target_payment_pref_id=target_payment_pref_id,
            account_id=account_id,
            source_payment_pref_id=source_payment_pref_id,
            should_update_account_mailing_address=should_update_account_mailing_address,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UpdatePositionsPaymentPrefSuccessResponse",
            '400': "BulkUpdateDeveloperFeatureFlags400Response",
            '401': "GetDeveloperFeatureFlags401Response",
            '403': "ServerError",
            '404': "ServerError",
            '500': "ServerError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _associate_payment_pref_with_positions_of_source_payment_pref_serialize(
        self,
        user_id,
        target_payment_pref_id,
        account_id,
        source_payment_pref_id,
        should_update_account_mailing_address,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if user_id is not None:
            _path_params['user_id'] = user_id
        # process the query parameters
        if target_payment_pref_id is not None:
            
            _query_params.append(('target_payment_pref_id', target_payment_pref_id))
            
        if account_id is not None:
            
            _query_params.append(('account_id', account_id))
            
        if source_payment_pref_id is not None:
            
            _query_params.append(('source_payment_pref_id', source_payment_pref_id))
            
        if should_update_account_mailing_address is not None:
            
            _query_params.append(('should_update_account_mailing_address', should_update_account_mailing_address))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/users/{user_id}/associate_payment_pref/source_payment_pref',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def associate_payment_pref_with_positions_without_payment_pref(
        self,
        user_id: Annotated[StrictInt, Field(description="User ID of the resource")],
        target_payment_pref_id: Annotated[StrictInt, Field(description="Target Payment Pref ID.")],
        account_id: Annotated[StrictInt, Field(description="Account id.")],
        arena_id: Annotated[StrictInt, Field(description="Required arena_id to filter by.")],
        should_update_account_mailing_address: Annotated[Optional[StrictBool], Field(description="If the Account mailing address should be updated.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> UpdatePositionsPaymentPrefSuccessResponse:
        """Associate payment pref with positions with no payment pref

        Changes the payment pref tied to a position to the specified payment pref. Position must be under the specified account and have no payment pref already assigned to it

        :param user_id: User ID of the resource (required)
        :type user_id: int
        :param target_payment_pref_id: Target Payment Pref ID. (required)
        :type target_payment_pref_id: int
        :param account_id: Account id. (required)
        :type account_id: int
        :param arena_id: Required arena_id to filter by. (required)
        :type arena_id: int
        :param should_update_account_mailing_address: If the Account mailing address should be updated.
        :type should_update_account_mailing_address: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._associate_payment_pref_with_positions_without_payment_pref_serialize(
            user_id=user_id,
            target_payment_pref_id=target_payment_pref_id,
            account_id=account_id,
            arena_id=arena_id,
            should_update_account_mailing_address=should_update_account_mailing_address,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UpdatePositionsPaymentPrefSuccessResponse",
            '400': "BulkUpdateDeveloperFeatureFlags400Response",
            '401': "GetDeveloperFeatureFlags401Response",
            '404': "ServerError",
            '500': "ServerError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def associate_payment_pref_with_positions_without_payment_pref_with_http_info(
        self,
        user_id: Annotated[StrictInt, Field(description="User ID of the resource")],
        target_payment_pref_id: Annotated[StrictInt, Field(description="Target Payment Pref ID.")],
        account_id: Annotated[StrictInt, Field(description="Account id.")],
        arena_id: Annotated[StrictInt, Field(description="Required arena_id to filter by.")],
        should_update_account_mailing_address: Annotated[Optional[StrictBool], Field(description="If the Account mailing address should be updated.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[UpdatePositionsPaymentPrefSuccessResponse]:
        """Associate payment pref with positions with no payment pref

        Changes the payment pref tied to a position to the specified payment pref. Position must be under the specified account and have no payment pref already assigned to it

        :param user_id: User ID of the resource (required)
        :type user_id: int
        :param target_payment_pref_id: Target Payment Pref ID. (required)
        :type target_payment_pref_id: int
        :param account_id: Account id. (required)
        :type account_id: int
        :param arena_id: Required arena_id to filter by. (required)
        :type arena_id: int
        :param should_update_account_mailing_address: If the Account mailing address should be updated.
        :type should_update_account_mailing_address: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._associate_payment_pref_with_positions_without_payment_pref_serialize(
            user_id=user_id,
            target_payment_pref_id=target_payment_pref_id,
            account_id=account_id,
            arena_id=arena_id,
            should_update_account_mailing_address=should_update_account_mailing_address,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UpdatePositionsPaymentPrefSuccessResponse",
            '400': "BulkUpdateDeveloperFeatureFlags400Response",
            '401': "GetDeveloperFeatureFlags401Response",
            '404': "ServerError",
            '500': "ServerError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def associate_payment_pref_with_positions_without_payment_pref_without_preload_content(
        self,
        user_id: Annotated[StrictInt, Field(description="User ID of the resource")],
        target_payment_pref_id: Annotated[StrictInt, Field(description="Target Payment Pref ID.")],
        account_id: Annotated[StrictInt, Field(description="Account id.")],
        arena_id: Annotated[StrictInt, Field(description="Required arena_id to filter by.")],
        should_update_account_mailing_address: Annotated[Optional[StrictBool], Field(description="If the Account mailing address should be updated.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Associate payment pref with positions with no payment pref

        Changes the payment pref tied to a position to the specified payment pref. Position must be under the specified account and have no payment pref already assigned to it

        :param user_id: User ID of the resource (required)
        :type user_id: int
        :param target_payment_pref_id: Target Payment Pref ID. (required)
        :type target_payment_pref_id: int
        :param account_id: Account id. (required)
        :type account_id: int
        :param arena_id: Required arena_id to filter by. (required)
        :type arena_id: int
        :param should_update_account_mailing_address: If the Account mailing address should be updated.
        :type should_update_account_mailing_address: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._associate_payment_pref_with_positions_without_payment_pref_serialize(
            user_id=user_id,
            target_payment_pref_id=target_payment_pref_id,
            account_id=account_id,
            arena_id=arena_id,
            should_update_account_mailing_address=should_update_account_mailing_address,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UpdatePositionsPaymentPrefSuccessResponse",
            '400': "BulkUpdateDeveloperFeatureFlags400Response",
            '401': "GetDeveloperFeatureFlags401Response",
            '404': "ServerError",
            '500': "ServerError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _associate_payment_pref_with_positions_without_payment_pref_serialize(
        self,
        user_id,
        target_payment_pref_id,
        account_id,
        arena_id,
        should_update_account_mailing_address,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if user_id is not None:
            _path_params['user_id'] = user_id
        # process the query parameters
        if target_payment_pref_id is not None:
            
            _query_params.append(('target_payment_pref_id', target_payment_pref_id))
            
        if account_id is not None:
            
            _query_params.append(('account_id', account_id))
            
        if arena_id is not None:
            
            _query_params.append(('arena_id', arena_id))
            
        if should_update_account_mailing_address is not None:
            
            _query_params.append(('should_update_account_mailing_address', should_update_account_mailing_address))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/users/{user_id}/associate_payment_pref/no_payment_pref',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_payment_prefs(
        self,
        ids: Annotated[List[StrictInt], Field(description="Required comma separated list of ids to filter resources by.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[PaymentPref]:
        """Get a list of payment prefs

        Get an un-paginated list of payment prefs filtered by a required list of payment pref IDs.

        :param ids: Required comma separated list of ids to filter resources by. (required)
        :type ids: List[int]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_payment_prefs_serialize(
            ids=ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[PaymentPref]",
            '400': "BulkUpdateDeveloperFeatureFlags400Response",
            '500': "ServerError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_payment_prefs_with_http_info(
        self,
        ids: Annotated[List[StrictInt], Field(description="Required comma separated list of ids to filter resources by.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[PaymentPref]]:
        """Get a list of payment prefs

        Get an un-paginated list of payment prefs filtered by a required list of payment pref IDs.

        :param ids: Required comma separated list of ids to filter resources by. (required)
        :type ids: List[int]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_payment_prefs_serialize(
            ids=ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[PaymentPref]",
            '400': "BulkUpdateDeveloperFeatureFlags400Response",
            '500': "ServerError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_payment_prefs_without_preload_content(
        self,
        ids: Annotated[List[StrictInt], Field(description="Required comma separated list of ids to filter resources by.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get a list of payment prefs

        Get an un-paginated list of payment prefs filtered by a required list of payment pref IDs.

        :param ids: Required comma separated list of ids to filter resources by. (required)
        :type ids: List[int]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_payment_prefs_serialize(
            ids=ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[PaymentPref]",
            '400': "BulkUpdateDeveloperFeatureFlags400Response",
            '500': "ServerError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_payment_prefs_serialize(
        self,
        ids,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'ids': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if ids is not None:
            
            _query_params.append(('ids', ids))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/payment_prefs',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_payment_pref(
        self,
        id: Annotated[StrictInt, Field(description="Id of the resource")],
        update_payment_pref_options: Annotated[Optional[UpdatePaymentPrefOptions], Field(description="Fields used to update a payment pref")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PaymentPref:
        """Update payment pref

        Update (patch) the fields for a specific payment pref. This only supports verification status at the moment.

        :param id: Id of the resource (required)
        :type id: int
        :param update_payment_pref_options: Fields used to update a payment pref
        :type update_payment_pref_options: UpdatePaymentPrefOptions
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_payment_pref_serialize(
            id=id,
            update_payment_pref_options=update_payment_pref_options,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaymentPref",
            '400': "BulkUpdateDeveloperFeatureFlags400Response",
            '404': "ServerError",
            '500': "ServerError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_payment_pref_with_http_info(
        self,
        id: Annotated[StrictInt, Field(description="Id of the resource")],
        update_payment_pref_options: Annotated[Optional[UpdatePaymentPrefOptions], Field(description="Fields used to update a payment pref")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PaymentPref]:
        """Update payment pref

        Update (patch) the fields for a specific payment pref. This only supports verification status at the moment.

        :param id: Id of the resource (required)
        :type id: int
        :param update_payment_pref_options: Fields used to update a payment pref
        :type update_payment_pref_options: UpdatePaymentPrefOptions
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_payment_pref_serialize(
            id=id,
            update_payment_pref_options=update_payment_pref_options,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaymentPref",
            '400': "BulkUpdateDeveloperFeatureFlags400Response",
            '404': "ServerError",
            '500': "ServerError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_payment_pref_without_preload_content(
        self,
        id: Annotated[StrictInt, Field(description="Id of the resource")],
        update_payment_pref_options: Annotated[Optional[UpdatePaymentPrefOptions], Field(description="Fields used to update a payment pref")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Update payment pref

        Update (patch) the fields for a specific payment pref. This only supports verification status at the moment.

        :param id: Id of the resource (required)
        :type id: int
        :param update_payment_pref_options: Fields used to update a payment pref
        :type update_payment_pref_options: UpdatePaymentPrefOptions
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_payment_pref_serialize(
            id=id,
            update_payment_pref_options=update_payment_pref_options,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaymentPref",
            '400': "BulkUpdateDeveloperFeatureFlags400Response",
            '404': "ServerError",
            '500': "ServerError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_payment_pref_serialize(
        self,
        id,
        update_payment_pref_options,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if update_payment_pref_options is not None:
            _body_params = update_payment_pref_options


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/payment_prefs/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


