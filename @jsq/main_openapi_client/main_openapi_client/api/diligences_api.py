# coding: utf-8

"""
    Juniper Square Internal API

    An internal API for inter-service communication at JSQ.

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictInt
from typing import List, Optional
from typing_extensions import Annotated
from main_openapi_client.models.create_diligence import CreateDiligence
from main_openapi_client.models.diligence import Diligence
from main_openapi_client.models.diligence_category import DiligenceCategory
from main_openapi_client.models.diligence_status import DiligenceStatus
from main_openapi_client.models.diligence_type import DiligenceType
from main_openapi_client.models.object_type import ObjectType

from main_openapi_client.api_client import ApiClient, RequestSerialized
from main_openapi_client.api_response import ApiResponse
from main_openapi_client.rest import RESTResponseType


class DiligencesApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def create_diligences(
        self,
        create_diligence: Optional[CreateDiligence] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Diligence:
        """Create a diligence object and underlying KYC/watchlists

        Create a diligence and underlying KYC/watchlists. This method is considered deprecated and used to bridge the gap until the compliance service API is fully available.

        :param create_diligence:
        :type create_diligence: CreateDiligence
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_diligences_serialize(
            create_diligence=create_diligence,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Diligence",
            '400': "BulkUpdateDeveloperFeatureFlags400Response",
            '500': "ServerError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def create_diligences_with_http_info(
        self,
        create_diligence: Optional[CreateDiligence] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Diligence]:
        """Create a diligence object and underlying KYC/watchlists

        Create a diligence and underlying KYC/watchlists. This method is considered deprecated and used to bridge the gap until the compliance service API is fully available.

        :param create_diligence:
        :type create_diligence: CreateDiligence
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_diligences_serialize(
            create_diligence=create_diligence,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Diligence",
            '400': "BulkUpdateDeveloperFeatureFlags400Response",
            '500': "ServerError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def create_diligences_without_preload_content(
        self,
        create_diligence: Optional[CreateDiligence] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Create a diligence object and underlying KYC/watchlists

        Create a diligence and underlying KYC/watchlists. This method is considered deprecated and used to bridge the gap until the compliance service API is fully available.

        :param create_diligence:
        :type create_diligence: CreateDiligence
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_diligences_serialize(
            create_diligence=create_diligence,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Diligence",
            '400': "BulkUpdateDeveloperFeatureFlags400Response",
            '500': "ServerError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _create_diligences_serialize(
        self,
        create_diligence,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if create_diligence is not None:
            _body_params = create_diligence


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/diligences',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_diligences(
        self,
        diligence_category: Annotated[DiligenceCategory, Field(description="Category of diligences to filter on")],
        object_type: Annotated[Optional[ObjectType], Field(description="Optional object_type to filter by. Should match an ObjectType enum.")] = None,
        object_id: Annotated[Optional[StrictInt], Field(description="Object ID to filter on")] = None,
        object_ids: Annotated[Optional[List[StrictInt]], Field(description="Object IDs to filter on")] = None,
        diligence_type: Annotated[Optional[DiligenceType], Field(description="Type of Diligence to filter on")] = None,
        diligence_status: Annotated[Optional[DiligenceStatus], Field(description="Status of diligence in submission workflow.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[Diligence]:
        """Get a list of diligences

        Get an un-paginated list of diligences

        :param diligence_category: Category of diligences to filter on (required)
        :type diligence_category: DiligenceCategory
        :param object_type: Optional object_type to filter by. Should match an ObjectType enum.
        :type object_type: ObjectType
        :param object_id: Object ID to filter on
        :type object_id: int
        :param object_ids: Object IDs to filter on
        :type object_ids: List[int]
        :param diligence_type: Type of Diligence to filter on
        :type diligence_type: DiligenceType
        :param diligence_status: Status of diligence in submission workflow.
        :type diligence_status: DiligenceStatus
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_diligences_serialize(
            diligence_category=diligence_category,
            object_type=object_type,
            object_id=object_id,
            object_ids=object_ids,
            diligence_type=diligence_type,
            diligence_status=diligence_status,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[Diligence]",
            '400': "BulkUpdateDeveloperFeatureFlags400Response",
            '500': "ServerError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_diligences_with_http_info(
        self,
        diligence_category: Annotated[DiligenceCategory, Field(description="Category of diligences to filter on")],
        object_type: Annotated[Optional[ObjectType], Field(description="Optional object_type to filter by. Should match an ObjectType enum.")] = None,
        object_id: Annotated[Optional[StrictInt], Field(description="Object ID to filter on")] = None,
        object_ids: Annotated[Optional[List[StrictInt]], Field(description="Object IDs to filter on")] = None,
        diligence_type: Annotated[Optional[DiligenceType], Field(description="Type of Diligence to filter on")] = None,
        diligence_status: Annotated[Optional[DiligenceStatus], Field(description="Status of diligence in submission workflow.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[Diligence]]:
        """Get a list of diligences

        Get an un-paginated list of diligences

        :param diligence_category: Category of diligences to filter on (required)
        :type diligence_category: DiligenceCategory
        :param object_type: Optional object_type to filter by. Should match an ObjectType enum.
        :type object_type: ObjectType
        :param object_id: Object ID to filter on
        :type object_id: int
        :param object_ids: Object IDs to filter on
        :type object_ids: List[int]
        :param diligence_type: Type of Diligence to filter on
        :type diligence_type: DiligenceType
        :param diligence_status: Status of diligence in submission workflow.
        :type diligence_status: DiligenceStatus
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_diligences_serialize(
            diligence_category=diligence_category,
            object_type=object_type,
            object_id=object_id,
            object_ids=object_ids,
            diligence_type=diligence_type,
            diligence_status=diligence_status,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[Diligence]",
            '400': "BulkUpdateDeveloperFeatureFlags400Response",
            '500': "ServerError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_diligences_without_preload_content(
        self,
        diligence_category: Annotated[DiligenceCategory, Field(description="Category of diligences to filter on")],
        object_type: Annotated[Optional[ObjectType], Field(description="Optional object_type to filter by. Should match an ObjectType enum.")] = None,
        object_id: Annotated[Optional[StrictInt], Field(description="Object ID to filter on")] = None,
        object_ids: Annotated[Optional[List[StrictInt]], Field(description="Object IDs to filter on")] = None,
        diligence_type: Annotated[Optional[DiligenceType], Field(description="Type of Diligence to filter on")] = None,
        diligence_status: Annotated[Optional[DiligenceStatus], Field(description="Status of diligence in submission workflow.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get a list of diligences

        Get an un-paginated list of diligences

        :param diligence_category: Category of diligences to filter on (required)
        :type diligence_category: DiligenceCategory
        :param object_type: Optional object_type to filter by. Should match an ObjectType enum.
        :type object_type: ObjectType
        :param object_id: Object ID to filter on
        :type object_id: int
        :param object_ids: Object IDs to filter on
        :type object_ids: List[int]
        :param diligence_type: Type of Diligence to filter on
        :type diligence_type: DiligenceType
        :param diligence_status: Status of diligence in submission workflow.
        :type diligence_status: DiligenceStatus
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_diligences_serialize(
            diligence_category=diligence_category,
            object_type=object_type,
            object_id=object_id,
            object_ids=object_ids,
            diligence_type=diligence_type,
            diligence_status=diligence_status,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[Diligence]",
            '400': "BulkUpdateDeveloperFeatureFlags400Response",
            '500': "ServerError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_diligences_serialize(
        self,
        diligence_category,
        object_type,
        object_id,
        object_ids,
        diligence_type,
        diligence_status,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'object_ids': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if diligence_category is not None:
            
            _query_params.append(('diligence_category', diligence_category.value))
            
        if object_type is not None:
            
            _query_params.append(('object_type', object_type.value))
            
        if object_id is not None:
            
            _query_params.append(('object_id', object_id))
            
        if object_ids is not None:
            
            _query_params.append(('object_ids', object_ids))
            
        if diligence_type is not None:
            
            _query_params.append(('diligence_type', diligence_type.value))
            
        if diligence_status is not None:
            
            _query_params.append(('diligence_status', diligence_status.value))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/diligences',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


