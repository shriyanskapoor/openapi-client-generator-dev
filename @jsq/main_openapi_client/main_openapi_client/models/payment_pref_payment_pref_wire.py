# coding: utf-8

"""
    Juniper Square Internal API

    An internal API for inter-service communication at JSQ.

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from main_openapi_client.models.payment_pref_payment_pref_wire_wire_beneficiary_address import PaymentPrefPaymentPrefWireWireBeneficiaryAddress
from typing import Optional, Set
from typing_extensions import Self

class PaymentPrefPaymentPrefWire(BaseModel):
    """
    A payment preference containing wire specific info. This will only have valid fields if payment pref method is wire. 
    """ # noqa: E501
    wire_beneficiary_name: Optional[StrictStr] = Field(default=None, description="Optional wire beneficiary name")
    wire_beneficiary_account_number: StrictStr = Field(description="Wire beneficiary account number")
    wire_bank_name: StrictStr = Field(description="Wire bank name")
    wire_aba_number: StrictStr = Field(description="Wire aba number (usually routing number)")
    wire_has_intermediary: StrictBool = Field(description="For wire payment method only, whether the wire payment pref has an intermediary bank that wires transfer through. ")
    wire_has_international_beneficiary_address: Optional[StrictBool] = Field(default=None, description="Boolean to determine whether a wire has an international beneficiary address. Can be None if not applicable. ")
    wire_reference_to_beneficiary: Optional[StrictStr] = Field(default=None, description="Wire reference to beneficiary")
    wire_obi: Optional[Dict[str, Any]] = None
    wire_bbi: Optional[Dict[str, Any]] = None
    wire_beneficiary_address: PaymentPrefPaymentPrefWireWireBeneficiaryAddress
    __properties: ClassVar[List[str]] = ["wire_beneficiary_name", "wire_beneficiary_account_number", "wire_bank_name", "wire_aba_number", "wire_has_intermediary", "wire_has_international_beneficiary_address", "wire_reference_to_beneficiary", "wire_obi", "wire_bbi", "wire_beneficiary_address"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PaymentPrefPaymentPrefWire from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of wire_beneficiary_address
        if self.wire_beneficiary_address:
            _dict['wire_beneficiary_address'] = self.wire_beneficiary_address.to_dict()
        # set to None if wire_beneficiary_name (nullable) is None
        # and model_fields_set contains the field
        if self.wire_beneficiary_name is None and "wire_beneficiary_name" in self.model_fields_set:
            _dict['wire_beneficiary_name'] = None

        # set to None if wire_has_international_beneficiary_address (nullable) is None
        # and model_fields_set contains the field
        if self.wire_has_international_beneficiary_address is None and "wire_has_international_beneficiary_address" in self.model_fields_set:
            _dict['wire_has_international_beneficiary_address'] = None

        # set to None if wire_reference_to_beneficiary (nullable) is None
        # and model_fields_set contains the field
        if self.wire_reference_to_beneficiary is None and "wire_reference_to_beneficiary" in self.model_fields_set:
            _dict['wire_reference_to_beneficiary'] = None

        # set to None if wire_obi (nullable) is None
        # and model_fields_set contains the field
        if self.wire_obi is None and "wire_obi" in self.model_fields_set:
            _dict['wire_obi'] = None

        # set to None if wire_bbi (nullable) is None
        # and model_fields_set contains the field
        if self.wire_bbi is None and "wire_bbi" in self.model_fields_set:
            _dict['wire_bbi'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PaymentPrefPaymentPrefWire from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "wire_beneficiary_name": obj.get("wire_beneficiary_name"),
            "wire_beneficiary_account_number": obj.get("wire_beneficiary_account_number"),
            "wire_bank_name": obj.get("wire_bank_name"),
            "wire_aba_number": obj.get("wire_aba_number"),
            "wire_has_intermediary": obj.get("wire_has_intermediary"),
            "wire_has_international_beneficiary_address": obj.get("wire_has_international_beneficiary_address"),
            "wire_reference_to_beneficiary": obj.get("wire_reference_to_beneficiary"),
            "wire_obi": obj.get("wire_obi"),
            "wire_bbi": obj.get("wire_bbi"),
            "wire_beneficiary_address": PaymentPrefPaymentPrefWireWireBeneficiaryAddress.from_dict(obj["wire_beneficiary_address"]) if obj.get("wire_beneficiary_address") is not None else None
        })
        return _obj


