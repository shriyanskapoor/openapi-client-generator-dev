# coding: utf-8

"""
    Juniper Square Internal API

    An internal API for inter-service communication at JSQ.

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from main_openapi_client.models.contact_details_attributes_address_inner import ContactDetailsAttributesAddressInner
from main_openapi_client.models.contact_details_attributes_email import ContactDetailsAttributesEmail
from main_openapi_client.models.contact_details_attributes_employments_inner import ContactDetailsAttributesEmploymentsInner
from main_openapi_client.models.contact_details_attributes_phone_fax_inner import ContactDetailsAttributesPhoneFaxInner
from typing import Optional, Set
from typing_extensions import Self

class ContactDetailsAttributes(BaseModel):
    """
    Attributes of the contact
    """ # noqa: E501
    first_name: Optional[StrictStr] = Field(default=None, description="First name of the contact")
    full_name: Optional[StrictStr] = Field(default=None, description="Full name of the contact")
    last_name: Optional[StrictStr] = Field(default=None, description="Last name of the contact")
    middle_name: Optional[StrictStr] = Field(default=None, description="Middle name of the contact")
    salutation_name: Optional[StrictStr] = Field(default=None, description="Salutation name of the contact")
    email: Optional[ContactDetailsAttributesEmail] = None
    employments: Optional[List[ContactDetailsAttributesEmploymentsInner]] = Field(default=None, description="List of employments")
    phone_fax: Optional[List[ContactDetailsAttributesPhoneFaxInner]] = Field(default=None, description="List of phone numbers")
    address: Optional[List[ContactDetailsAttributesAddressInner]] = Field(default=None, description="List of addresses")
    __properties: ClassVar[List[str]] = ["first_name", "full_name", "last_name", "middle_name", "salutation_name", "email", "employments", "phone_fax", "address"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ContactDetailsAttributes from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of email
        if self.email:
            _dict['email'] = self.email.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in employments (list)
        _items = []
        if self.employments:
            for _item_employments in self.employments:
                if _item_employments:
                    _items.append(_item_employments.to_dict())
            _dict['employments'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in phone_fax (list)
        _items = []
        if self.phone_fax:
            for _item_phone_fax in self.phone_fax:
                if _item_phone_fax:
                    _items.append(_item_phone_fax.to_dict())
            _dict['phone_fax'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in address (list)
        _items = []
        if self.address:
            for _item_address in self.address:
                if _item_address:
                    _items.append(_item_address.to_dict())
            _dict['address'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ContactDetailsAttributes from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "first_name": obj.get("first_name"),
            "full_name": obj.get("full_name"),
            "last_name": obj.get("last_name"),
            "middle_name": obj.get("middle_name"),
            "salutation_name": obj.get("salutation_name"),
            "email": ContactDetailsAttributesEmail.from_dict(obj["email"]) if obj.get("email") is not None else None,
            "employments": [ContactDetailsAttributesEmploymentsInner.from_dict(_item) for _item in obj["employments"]] if obj.get("employments") is not None else None,
            "phone_fax": [ContactDetailsAttributesPhoneFaxInner.from_dict(_item) for _item in obj["phone_fax"]] if obj.get("phone_fax") is not None else None,
            "address": [ContactDetailsAttributesAddressInner.from_dict(_item) for _item in obj["address"]] if obj.get("address") is not None else None
        })
        return _obj


