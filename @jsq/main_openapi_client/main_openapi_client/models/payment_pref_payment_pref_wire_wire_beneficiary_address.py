# coding: utf-8

"""
    Juniper Square Internal API

    An internal API for inter-service communication at JSQ.

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class PaymentPrefPaymentPrefWireWireBeneficiaryAddress(BaseModel):
    """
    PaymentPrefPaymentPrefWireWireBeneficiaryAddress
    """ # noqa: E501
    street1: Optional[StrictStr] = None
    street2: Optional[StrictStr] = None
    street3: Optional[StrictStr] = None
    city: Optional[StrictStr] = None
    state: Optional[StrictStr] = None
    region: Optional[StrictStr] = None
    postal_code: Optional[StrictStr] = None
    country: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["street1", "street2", "street3", "city", "state", "region", "postal_code", "country"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PaymentPrefPaymentPrefWireWireBeneficiaryAddress from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if street1 (nullable) is None
        # and model_fields_set contains the field
        if self.street1 is None and "street1" in self.model_fields_set:
            _dict['street1'] = None

        # set to None if street2 (nullable) is None
        # and model_fields_set contains the field
        if self.street2 is None and "street2" in self.model_fields_set:
            _dict['street2'] = None

        # set to None if street3 (nullable) is None
        # and model_fields_set contains the field
        if self.street3 is None and "street3" in self.model_fields_set:
            _dict['street3'] = None

        # set to None if city (nullable) is None
        # and model_fields_set contains the field
        if self.city is None and "city" in self.model_fields_set:
            _dict['city'] = None

        # set to None if state (nullable) is None
        # and model_fields_set contains the field
        if self.state is None and "state" in self.model_fields_set:
            _dict['state'] = None

        # set to None if region (nullable) is None
        # and model_fields_set contains the field
        if self.region is None and "region" in self.model_fields_set:
            _dict['region'] = None

        # set to None if postal_code (nullable) is None
        # and model_fields_set contains the field
        if self.postal_code is None and "postal_code" in self.model_fields_set:
            _dict['postal_code'] = None

        # set to None if country (nullable) is None
        # and model_fields_set contains the field
        if self.country is None and "country" in self.model_fields_set:
            _dict['country'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PaymentPrefPaymentPrefWireWireBeneficiaryAddress from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "street1": obj.get("street1"),
            "street2": obj.get("street2"),
            "street3": obj.get("street3"),
            "city": obj.get("city"),
            "state": obj.get("state"),
            "region": obj.get("region"),
            "postal_code": obj.get("postal_code"),
            "country": obj.get("country")
        })
        return _obj


