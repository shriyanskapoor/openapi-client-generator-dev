# coding: utf-8

"""
    Juniper Square Internal API

    An internal API for inter-service communication at JSQ.

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from main_openapi_client.models.create_diligence_business_info import CreateDiligenceBusinessInfo
from main_openapi_client.models.create_diligence_diligence_category import CreateDiligenceDiligenceCategory
from main_openapi_client.models.create_diligence_diligence_type import CreateDiligenceDiligenceType
from main_openapi_client.models.create_diligence_external_object_type import CreateDiligenceExternalObjectType
from main_openapi_client.models.create_diligence_reference_external_object_type import CreateDiligenceReferenceExternalObjectType
from typing import Optional, Set
from typing_extensions import Self

class CreateDiligence(BaseModel):
    """
    Deprecated create diligence object and underlying KYC/watchlists
    """ # noqa: E501
    arena_id: Optional[StrictInt] = Field(default=None, description="Arena ID the diligence is located in")
    user_id: Optional[StrictInt] = Field(default=None, description="User ID of the user creating the diligence")
    external_object_type: Optional[CreateDiligenceExternalObjectType] = None
    external_object_id: Optional[StrictInt] = Field(default=None, description="Number representing the id of the external object type in the external object type table.")
    diligence_type: Optional[CreateDiligenceDiligenceType] = None
    diligence_category: Optional[CreateDiligenceDiligenceCategory] = None
    business_info: Optional[CreateDiligenceBusinessInfo] = None
    reference_external_object_type: Optional[CreateDiligenceReferenceExternalObjectType] = None
    reference_external_object_id: Optional[StrictInt] = Field(default=None, description="Reference external object ID. Useful when needing to check the relationship between two objects.")
    other_info: Optional[Dict[str, Any]] = Field(default=None, description="Other key values info for the diligence")
    __properties: ClassVar[List[str]] = ["arena_id", "user_id", "external_object_type", "external_object_id", "diligence_type", "diligence_category", "business_info", "reference_external_object_type", "reference_external_object_id", "other_info"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateDiligence from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of external_object_type
        if self.external_object_type:
            _dict['external_object_type'] = self.external_object_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of diligence_type
        if self.diligence_type:
            _dict['diligence_type'] = self.diligence_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of diligence_category
        if self.diligence_category:
            _dict['diligence_category'] = self.diligence_category.to_dict()
        # override the default output from pydantic by calling `to_dict()` of business_info
        if self.business_info:
            _dict['business_info'] = self.business_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of reference_external_object_type
        if self.reference_external_object_type:
            _dict['reference_external_object_type'] = self.reference_external_object_type.to_dict()
        # set to None if reference_external_object_type (nullable) is None
        # and model_fields_set contains the field
        if self.reference_external_object_type is None and "reference_external_object_type" in self.model_fields_set:
            _dict['reference_external_object_type'] = None

        # set to None if reference_external_object_id (nullable) is None
        # and model_fields_set contains the field
        if self.reference_external_object_id is None and "reference_external_object_id" in self.model_fields_set:
            _dict['reference_external_object_id'] = None

        # set to None if other_info (nullable) is None
        # and model_fields_set contains the field
        if self.other_info is None and "other_info" in self.model_fields_set:
            _dict['other_info'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateDiligence from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "arena_id": obj.get("arena_id"),
            "user_id": obj.get("user_id"),
            "external_object_type": CreateDiligenceExternalObjectType.from_dict(obj["external_object_type"]) if obj.get("external_object_type") is not None else None,
            "external_object_id": obj.get("external_object_id"),
            "diligence_type": CreateDiligenceDiligenceType.from_dict(obj["diligence_type"]) if obj.get("diligence_type") is not None else None,
            "diligence_category": CreateDiligenceDiligenceCategory.from_dict(obj["diligence_category"]) if obj.get("diligence_category") is not None else None,
            "business_info": CreateDiligenceBusinessInfo.from_dict(obj["business_info"]) if obj.get("business_info") is not None else None,
            "reference_external_object_type": CreateDiligenceReferenceExternalObjectType.from_dict(obj["reference_external_object_type"]) if obj.get("reference_external_object_type") is not None else None,
            "reference_external_object_id": obj.get("reference_external_object_id"),
            "other_info": obj.get("other_info")
        })
        return _obj


