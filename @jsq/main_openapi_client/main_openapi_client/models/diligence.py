# coding: utf-8

"""
    Juniper Square Internal API

    An internal API for inter-service communication at JSQ.

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from main_openapi_client.models.diligence_category import DiligenceCategory
from main_openapi_client.models.diligence_external_object_type import DiligenceExternalObjectType
from main_openapi_client.models.diligence_status import DiligenceStatus
from main_openapi_client.models.diligence_type import DiligenceType
from typing import Optional, Set
from typing_extensions import Self

class Diligence(BaseModel):
    """
    Diligence used as a model for keeping track of investor diligence actions on a variety of items
    """ # noqa: E501
    id: StrictInt = Field(description="ID of the diligence object in the DB.")
    external_object_type: Optional[DiligenceExternalObjectType]
    external_object_id: Optional[StrictInt] = Field(description="Number representing the id of the external object type in the external object type table.")
    diligence_type: DiligenceType
    status: DiligenceStatus
    reviewer_user_id: Optional[StrictInt] = Field(description="ID of user who reviewed the diligence")
    review_start_date: Optional[datetime] = Field(description="Date-time the diligence was moved into review status")
    review_end_date: Optional[datetime] = Field(description="Date-time the diligence was moved out of review status")
    peer_reviewer_user_id: Optional[StrictInt] = Field(description="ID of user who peer-reviewed the diligence")
    peer_review_start_date: Optional[datetime] = Field(description="Date-time the diligence was moved into peer-review status")
    peer_review_end_date: Optional[datetime] = Field(description="Date-time the diligence was moved out of peer-review status")
    arena_id: StrictInt = Field(description="Arena ID the diligence is located in")
    modified_at: Optional[datetime] = Field(description="Date-time the diligence was last modified")
    created_at: Optional[datetime] = Field(description="Date-time the diligence was created")
    created_by: StrictInt = Field(description="FK to the user id who created the diligence")
    current_investor_diligence_risk_log_id: Optional[StrictInt] = Field(description="FK to the Investor Diligence Risk Log")
    category: DiligenceCategory
    external_reference_key: Optional[Annotated[str, Field(strict=True, max_length=36)]] = Field(description="String of external reference")
    name: Optional[StrictStr] = Field(description="Name of the diligence")
    perform_recurring_check: Optional[StrictBool] = Field(description="Only used for watchlist diligences. Used to determine if recurring checks is enabled")
    other_info: Optional[Dict[str, Any]] = Field(default=None, description="Other key values info for the diligence")
    __properties: ClassVar[List[str]] = ["id", "external_object_type", "external_object_id", "diligence_type", "status", "reviewer_user_id", "review_start_date", "review_end_date", "peer_reviewer_user_id", "peer_review_start_date", "peer_review_end_date", "arena_id", "modified_at", "created_at", "created_by", "current_investor_diligence_risk_log_id", "category", "external_reference_key", "name", "perform_recurring_check", "other_info"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Diligence from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of external_object_type
        if self.external_object_type:
            _dict['external_object_type'] = self.external_object_type.to_dict()
        # set to None if external_object_type (nullable) is None
        # and model_fields_set contains the field
        if self.external_object_type is None and "external_object_type" in self.model_fields_set:
            _dict['external_object_type'] = None

        # set to None if external_object_id (nullable) is None
        # and model_fields_set contains the field
        if self.external_object_id is None and "external_object_id" in self.model_fields_set:
            _dict['external_object_id'] = None

        # set to None if reviewer_user_id (nullable) is None
        # and model_fields_set contains the field
        if self.reviewer_user_id is None and "reviewer_user_id" in self.model_fields_set:
            _dict['reviewer_user_id'] = None

        # set to None if review_start_date (nullable) is None
        # and model_fields_set contains the field
        if self.review_start_date is None and "review_start_date" in self.model_fields_set:
            _dict['review_start_date'] = None

        # set to None if review_end_date (nullable) is None
        # and model_fields_set contains the field
        if self.review_end_date is None and "review_end_date" in self.model_fields_set:
            _dict['review_end_date'] = None

        # set to None if peer_reviewer_user_id (nullable) is None
        # and model_fields_set contains the field
        if self.peer_reviewer_user_id is None and "peer_reviewer_user_id" in self.model_fields_set:
            _dict['peer_reviewer_user_id'] = None

        # set to None if peer_review_start_date (nullable) is None
        # and model_fields_set contains the field
        if self.peer_review_start_date is None and "peer_review_start_date" in self.model_fields_set:
            _dict['peer_review_start_date'] = None

        # set to None if peer_review_end_date (nullable) is None
        # and model_fields_set contains the field
        if self.peer_review_end_date is None and "peer_review_end_date" in self.model_fields_set:
            _dict['peer_review_end_date'] = None

        # set to None if modified_at (nullable) is None
        # and model_fields_set contains the field
        if self.modified_at is None and "modified_at" in self.model_fields_set:
            _dict['modified_at'] = None

        # set to None if created_at (nullable) is None
        # and model_fields_set contains the field
        if self.created_at is None and "created_at" in self.model_fields_set:
            _dict['created_at'] = None

        # set to None if current_investor_diligence_risk_log_id (nullable) is None
        # and model_fields_set contains the field
        if self.current_investor_diligence_risk_log_id is None and "current_investor_diligence_risk_log_id" in self.model_fields_set:
            _dict['current_investor_diligence_risk_log_id'] = None

        # set to None if external_reference_key (nullable) is None
        # and model_fields_set contains the field
        if self.external_reference_key is None and "external_reference_key" in self.model_fields_set:
            _dict['external_reference_key'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if perform_recurring_check (nullable) is None
        # and model_fields_set contains the field
        if self.perform_recurring_check is None and "perform_recurring_check" in self.model_fields_set:
            _dict['perform_recurring_check'] = None

        # set to None if other_info (nullable) is None
        # and model_fields_set contains the field
        if self.other_info is None and "other_info" in self.model_fields_set:
            _dict['other_info'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Diligence from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "external_object_type": DiligenceExternalObjectType.from_dict(obj["external_object_type"]) if obj.get("external_object_type") is not None else None,
            "external_object_id": obj.get("external_object_id"),
            "diligence_type": obj.get("diligence_type"),
            "status": obj.get("status"),
            "reviewer_user_id": obj.get("reviewer_user_id"),
            "review_start_date": obj.get("review_start_date"),
            "review_end_date": obj.get("review_end_date"),
            "peer_reviewer_user_id": obj.get("peer_reviewer_user_id"),
            "peer_review_start_date": obj.get("peer_review_start_date"),
            "peer_review_end_date": obj.get("peer_review_end_date"),
            "arena_id": obj.get("arena_id"),
            "modified_at": obj.get("modified_at"),
            "created_at": obj.get("created_at"),
            "created_by": obj.get("created_by"),
            "current_investor_diligence_risk_log_id": obj.get("current_investor_diligence_risk_log_id"),
            "category": obj.get("category"),
            "external_reference_key": obj.get("external_reference_key"),
            "name": obj.get("name"),
            "perform_recurring_check": obj.get("perform_recurring_check"),
            "other_info": obj.get("other_info")
        })
        return _obj


