# coding: utf-8

"""
    Juniper Square Internal API

    An internal API for inter-service communication at JSQ.

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class Distribution(BaseModel):
    """
    A Distribution that is part of a distribution batch.
    """ # noqa: E501
    id: StrictInt
    arena_id: StrictInt = Field(description="Arena ID this distribution batch belongs to.")
    position_id: StrictInt = Field(description="FK to position ID this distribution belongs to")
    payment_pref_id: Optional[StrictInt] = Field(description="FK to payment pref for this distribution's position's payment pref")
    amount: Union[StrictFloat, StrictInt] = Field(description="Amount to be distributed")
    amount_payable: Union[StrictFloat, StrictInt] = Field(description="Amount to be distributed netting any amount adjusted or reinvested")
    manual_settlement_date: Optional[date] = Field(description="The date the distribution was manually settled (if applicable)")
    has_legacy_payment: StrictBool = Field(description="Whether or not the distribution has a legacy payment associated with it (that has not been marked as canceled or failed or voided)")
    __properties: ClassVar[List[str]] = ["id", "arena_id", "position_id", "payment_pref_id", "amount", "amount_payable", "manual_settlement_date", "has_legacy_payment"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Distribution from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "id",
            "arena_id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if payment_pref_id (nullable) is None
        # and model_fields_set contains the field
        if self.payment_pref_id is None and "payment_pref_id" in self.model_fields_set:
            _dict['payment_pref_id'] = None

        # set to None if manual_settlement_date (nullable) is None
        # and model_fields_set contains the field
        if self.manual_settlement_date is None and "manual_settlement_date" in self.model_fields_set:
            _dict['manual_settlement_date'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Distribution from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "arena_id": obj.get("arena_id"),
            "position_id": obj.get("position_id"),
            "payment_pref_id": obj.get("payment_pref_id"),
            "amount": obj.get("amount"),
            "amount_payable": obj.get("amount_payable"),
            "manual_settlement_date": obj.get("manual_settlement_date"),
            "has_legacy_payment": obj.get("has_legacy_payment")
        })
        return _obj


