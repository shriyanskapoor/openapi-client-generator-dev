# coding: utf-8

"""
    Juniper Square Internal API

    An internal API for inter-service communication at JSQ.

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from main_openapi_client.models.position_cabs_inner import PositionCabsInner
from main_openapi_client.models.position_contributions_inner import PositionContributionsInner
from main_openapi_client.models.position_net_income_sum_by_type_inner import PositionNetIncomeSumByTypeInner
from typing import Optional, Set
from typing_extensions import Self

class Position(BaseModel):
    """
    A position in an investment entity.
    """ # noqa: E501
    id: StrictInt
    name: StrictStr = Field(description="Name of the position.")
    amount_committed: Optional[Union[StrictFloat, StrictInt]] = Field(description="Amount that this position has committed to invest.")
    percent_ownership: Optional[Union[StrictFloat, StrictInt]] = Field(description="Percentage of ownership in the investment.")
    investor_group_name: StrictStr = Field(description="Name of the position's investor group.")
    cabs: Optional[List[PositionCabsInner]] = Field(description="Capital account balances of position")
    contributions: Optional[List[PositionContributionsInner]] = None
    distributions: Optional[List[PositionContributionsInner]] = None
    net_income_sum_by_type: Optional[List[PositionNetIncomeSumByTypeInner]] = None
    __properties: ClassVar[List[str]] = ["id", "name", "amount_committed", "percent_ownership", "investor_group_name", "cabs", "contributions", "distributions", "net_income_sum_by_type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Position from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in cabs (list)
        _items = []
        if self.cabs:
            for _item_cabs in self.cabs:
                if _item_cabs:
                    _items.append(_item_cabs.to_dict())
            _dict['cabs'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in contributions (list)
        _items = []
        if self.contributions:
            for _item_contributions in self.contributions:
                if _item_contributions:
                    _items.append(_item_contributions.to_dict())
            _dict['contributions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in distributions (list)
        _items = []
        if self.distributions:
            for _item_distributions in self.distributions:
                if _item_distributions:
                    _items.append(_item_distributions.to_dict())
            _dict['distributions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in net_income_sum_by_type (list)
        _items = []
        if self.net_income_sum_by_type:
            for _item_net_income_sum_by_type in self.net_income_sum_by_type:
                if _item_net_income_sum_by_type:
                    _items.append(_item_net_income_sum_by_type.to_dict())
            _dict['net_income_sum_by_type'] = _items
        # set to None if amount_committed (nullable) is None
        # and model_fields_set contains the field
        if self.amount_committed is None and "amount_committed" in self.model_fields_set:
            _dict['amount_committed'] = None

        # set to None if percent_ownership (nullable) is None
        # and model_fields_set contains the field
        if self.percent_ownership is None and "percent_ownership" in self.model_fields_set:
            _dict['percent_ownership'] = None

        # set to None if cabs (nullable) is None
        # and model_fields_set contains the field
        if self.cabs is None and "cabs" in self.model_fields_set:
            _dict['cabs'] = None

        # set to None if contributions (nullable) is None
        # and model_fields_set contains the field
        if self.contributions is None and "contributions" in self.model_fields_set:
            _dict['contributions'] = None

        # set to None if distributions (nullable) is None
        # and model_fields_set contains the field
        if self.distributions is None and "distributions" in self.model_fields_set:
            _dict['distributions'] = None

        # set to None if net_income_sum_by_type (nullable) is None
        # and model_fields_set contains the field
        if self.net_income_sum_by_type is None and "net_income_sum_by_type" in self.model_fields_set:
            _dict['net_income_sum_by_type'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Position from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "amount_committed": obj.get("amount_committed"),
            "percent_ownership": obj.get("percent_ownership"),
            "investor_group_name": obj.get("investor_group_name"),
            "cabs": [PositionCabsInner.from_dict(_item) for _item in obj["cabs"]] if obj.get("cabs") is not None else None,
            "contributions": [PositionContributionsInner.from_dict(_item) for _item in obj["contributions"]] if obj.get("contributions") is not None else None,
            "distributions": [PositionContributionsInner.from_dict(_item) for _item in obj["distributions"]] if obj.get("distributions") is not None else None,
            "net_income_sum_by_type": [PositionNetIncomeSumByTypeInner.from_dict(_item) for _item in obj["net_income_sum_by_type"]] if obj.get("net_income_sum_by_type") is not None else None
        })
        return _obj


