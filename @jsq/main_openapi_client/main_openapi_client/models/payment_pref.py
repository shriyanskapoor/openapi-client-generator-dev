# coding: utf-8

"""
    Juniper Square Internal API

    An internal API for inter-service communication at JSQ.

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from main_openapi_client.models.payment_pref_payment_pref_ach import PaymentPrefPaymentPrefAch
from main_openapi_client.models.payment_pref_payment_pref_wire import PaymentPrefPaymentPrefWire
from typing import Optional, Set
from typing_extensions import Self

class PaymentPref(BaseModel):
    """
    A payment preference.
    """ # noqa: E501
    id: StrictInt
    payment_method: StrictStr = Field(description="Payment method for the payment preference: ACH, Wire or Check.")
    verification_status: Optional[StrictStr] = Field(description="Verification status for the payment preference: verified, unverified or error.")
    wire_has_intermediary: Optional[StrictBool] = Field(default=None, description="For wire payment method only, whether the wire payment pref has an intermediary bank that wires transfer through. ")
    wire_has_international_beneficiary_address: Optional[StrictBool] = Field(default=None, description="For wire payment method only, whether the wire payment pref has an international beneficiary address")
    payment_pref_wire: Optional[PaymentPrefPaymentPrefWire] = None
    payment_pref_ach: Optional[PaymentPrefPaymentPrefAch] = None
    __properties: ClassVar[List[str]] = ["id", "payment_method", "verification_status", "wire_has_intermediary", "wire_has_international_beneficiary_address", "payment_pref_wire", "payment_pref_ach"]

    @field_validator('payment_method')
    def payment_method_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['ACH', 'Check', 'Wire']):
            raise ValueError("must be one of enum values ('ACH', 'Check', 'Wire')")
        return value

    @field_validator('verification_status')
    def verification_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['verified', 'unverified', 'error']):
            raise ValueError("must be one of enum values ('verified', 'unverified', 'error')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PaymentPref from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of payment_pref_wire
        if self.payment_pref_wire:
            _dict['payment_pref_wire'] = self.payment_pref_wire.to_dict()
        # override the default output from pydantic by calling `to_dict()` of payment_pref_ach
        if self.payment_pref_ach:
            _dict['payment_pref_ach'] = self.payment_pref_ach.to_dict()
        # set to None if verification_status (nullable) is None
        # and model_fields_set contains the field
        if self.verification_status is None and "verification_status" in self.model_fields_set:
            _dict['verification_status'] = None

        # set to None if wire_has_intermediary (nullable) is None
        # and model_fields_set contains the field
        if self.wire_has_intermediary is None and "wire_has_intermediary" in self.model_fields_set:
            _dict['wire_has_intermediary'] = None

        # set to None if wire_has_international_beneficiary_address (nullable) is None
        # and model_fields_set contains the field
        if self.wire_has_international_beneficiary_address is None and "wire_has_international_beneficiary_address" in self.model_fields_set:
            _dict['wire_has_international_beneficiary_address'] = None

        # set to None if payment_pref_wire (nullable) is None
        # and model_fields_set contains the field
        if self.payment_pref_wire is None and "payment_pref_wire" in self.model_fields_set:
            _dict['payment_pref_wire'] = None

        # set to None if payment_pref_ach (nullable) is None
        # and model_fields_set contains the field
        if self.payment_pref_ach is None and "payment_pref_ach" in self.model_fields_set:
            _dict['payment_pref_ach'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PaymentPref from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "payment_method": obj.get("payment_method"),
            "verification_status": obj.get("verification_status"),
            "wire_has_intermediary": obj.get("wire_has_intermediary"),
            "wire_has_international_beneficiary_address": obj.get("wire_has_international_beneficiary_address"),
            "payment_pref_wire": PaymentPrefPaymentPrefWire.from_dict(obj["payment_pref_wire"]) if obj.get("payment_pref_wire") is not None else None,
            "payment_pref_ach": PaymentPrefPaymentPrefAch.from_dict(obj["payment_pref_ach"]) if obj.get("payment_pref_ach") is not None else None
        })
        return _obj


