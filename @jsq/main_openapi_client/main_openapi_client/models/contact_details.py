# coding: utf-8

"""
    Juniper Square Internal API

    An internal API for inter-service communication at JSQ.

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from main_openapi_client.models.contact_details_attributes import ContactDetailsAttributes
from typing import Optional, Set
from typing_extensions import Self

class ContactDetails(BaseModel):
    """
    Details of the contact to be added or updated
    """ # noqa: E501
    contact_id: Optional[StrictInt] = Field(default=None, description="ID of the contact")
    arena_id: Optional[StrictInt] = Field(default=None, description="ID of the arena")
    is_update: Optional[StrictBool] = Field(default=None, description="Indicates if the contact is being updated")
    attributes: Optional[ContactDetailsAttributes] = None
    access_group_ids: Optional[List[StrictInt]] = Field(default=None, description="List of access group IDs")
    invite_to_portal: Optional[StrictBool] = Field(default=False, description="Indicates if the contact should be invited to the portal")
    __properties: ClassVar[List[str]] = ["contact_id", "arena_id", "is_update", "attributes", "access_group_ids", "invite_to_portal"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ContactDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of attributes
        if self.attributes:
            _dict['attributes'] = self.attributes.to_dict()
        # set to None if contact_id (nullable) is None
        # and model_fields_set contains the field
        if self.contact_id is None and "contact_id" in self.model_fields_set:
            _dict['contact_id'] = None

        # set to None if access_group_ids (nullable) is None
        # and model_fields_set contains the field
        if self.access_group_ids is None and "access_group_ids" in self.model_fields_set:
            _dict['access_group_ids'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ContactDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "contact_id": obj.get("contact_id"),
            "arena_id": obj.get("arena_id"),
            "is_update": obj.get("is_update"),
            "attributes": ContactDetailsAttributes.from_dict(obj["attributes"]) if obj.get("attributes") is not None else None,
            "access_group_ids": obj.get("access_group_ids"),
            "invite_to_portal": obj.get("invite_to_portal") if obj.get("invite_to_portal") is not None else False
        })
        return _obj


