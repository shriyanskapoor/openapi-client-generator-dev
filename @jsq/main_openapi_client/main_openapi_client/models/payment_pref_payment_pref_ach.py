# coding: utf-8

"""
    Juniper Square Internal API

    An internal API for inter-service communication at JSQ.

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from main_openapi_client.models.payment_pref_payment_pref_ach_ach_domicile_address import PaymentPrefPaymentPrefAchAchDomicileAddress
from typing import Optional, Set
from typing_extensions import Self

class PaymentPrefPaymentPrefAch(BaseModel):
    """
    A payment preference containing ach specific info. This will only have valid fields if payment pref method is ach. Otherwise, it will contain an empty object 
    """ # noqa: E501
    ach_account_name: Optional[StrictStr] = Field(default=None, description="Optional ach account name")
    ach_bank_name: StrictStr = Field(description="Ach bank name")
    ach_account_number: StrictStr = Field(description="ach account number")
    ach_routing_number: StrictStr = Field(description="ach routing number")
    ach_account_type: StrictStr = Field(description="ach account type")
    ach_account_ownership: Optional[StrictStr] = Field(default=None, description="ach account ownership")
    ach_additional_instructions: Optional[StrictStr] = Field(default=None, description="ach account ownership")
    ach_domicile_address: Optional[PaymentPrefPaymentPrefAchAchDomicileAddress] = None
    __properties: ClassVar[List[str]] = ["ach_account_name", "ach_bank_name", "ach_account_number", "ach_routing_number", "ach_account_type", "ach_account_ownership", "ach_additional_instructions", "ach_domicile_address"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PaymentPrefPaymentPrefAch from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of ach_domicile_address
        if self.ach_domicile_address:
            _dict['ach_domicile_address'] = self.ach_domicile_address.to_dict()
        # set to None if ach_account_name (nullable) is None
        # and model_fields_set contains the field
        if self.ach_account_name is None and "ach_account_name" in self.model_fields_set:
            _dict['ach_account_name'] = None

        # set to None if ach_account_ownership (nullable) is None
        # and model_fields_set contains the field
        if self.ach_account_ownership is None and "ach_account_ownership" in self.model_fields_set:
            _dict['ach_account_ownership'] = None

        # set to None if ach_additional_instructions (nullable) is None
        # and model_fields_set contains the field
        if self.ach_additional_instructions is None and "ach_additional_instructions" in self.model_fields_set:
            _dict['ach_additional_instructions'] = None

        # set to None if ach_domicile_address (nullable) is None
        # and model_fields_set contains the field
        if self.ach_domicile_address is None and "ach_domicile_address" in self.model_fields_set:
            _dict['ach_domicile_address'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PaymentPrefPaymentPrefAch from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ach_account_name": obj.get("ach_account_name"),
            "ach_bank_name": obj.get("ach_bank_name"),
            "ach_account_number": obj.get("ach_account_number"),
            "ach_routing_number": obj.get("ach_routing_number"),
            "ach_account_type": obj.get("ach_account_type"),
            "ach_account_ownership": obj.get("ach_account_ownership"),
            "ach_additional_instructions": obj.get("ach_additional_instructions"),
            "ach_domicile_address": PaymentPrefPaymentPrefAchAchDomicileAddress.from_dict(obj["ach_domicile_address"]) if obj.get("ach_domicile_address") is not None else None
        })
        return _obj


