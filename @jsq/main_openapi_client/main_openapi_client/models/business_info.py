# coding: utf-8

"""
    Juniper Square Internal API

    An internal API for inter-service communication at JSQ.

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from main_openapi_client.models.business_info_address import BusinessInfoAddress
from main_openapi_client.models.business_info_documents_inner import BusinessInfoDocumentsInner
from main_openapi_client.models.business_info_individual_profiles_inner import BusinessInfoIndividualProfilesInner
from main_openapi_client.models.business_info_institution_profiles_inner import BusinessInfoInstitutionProfilesInner
from typing import Optional, Set
from typing_extensions import Self

class BusinessInfo(BaseModel):
    """
    Business information for diligence
    """ # noqa: E501
    external_profile_id: Optional[StrictInt] = Field(default=None, description="Profile ID for diligence")
    legal_entity_name: Optional[StrictStr] = Field(default=None, description="Legal entity name")
    date_of_organization: Optional[StrictStr] = Field(default=None, description="Date of formation for business")
    tax_id: Optional[StrictStr] = Field(default=None, description="Tax ID for business")
    documents: Optional[List[BusinessInfoDocumentsInner]] = Field(default=None, description="Documents for business")
    address: Optional[BusinessInfoAddress] = None
    individual_profiles: Optional[List[BusinessInfoIndividualProfilesInner]] = Field(default=None, description="Individual profiles used for legacy diligences. This is deprecated. For KYC, a KycDetail will be created. For watchlist, a watchlist screening will be triggered.")
    institution_profiles: Optional[List[BusinessInfoInstitutionProfilesInner]] = Field(default=None, description="Institution profiles used for legacy diligences. This is deprecated. For KYC, a KycDetail will be created. For watchlist, a watchlist screening will be triggered.")
    __properties: ClassVar[List[str]] = ["external_profile_id", "legal_entity_name", "date_of_organization", "tax_id", "documents", "address", "individual_profiles", "institution_profiles"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BusinessInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in documents (list)
        _items = []
        if self.documents:
            for _item_documents in self.documents:
                if _item_documents:
                    _items.append(_item_documents.to_dict())
            _dict['documents'] = _items
        # override the default output from pydantic by calling `to_dict()` of address
        if self.address:
            _dict['address'] = self.address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in individual_profiles (list)
        _items = []
        if self.individual_profiles:
            for _item_individual_profiles in self.individual_profiles:
                if _item_individual_profiles:
                    _items.append(_item_individual_profiles.to_dict())
            _dict['individual_profiles'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in institution_profiles (list)
        _items = []
        if self.institution_profiles:
            for _item_institution_profiles in self.institution_profiles:
                if _item_institution_profiles:
                    _items.append(_item_institution_profiles.to_dict())
            _dict['institution_profiles'] = _items
        # set to None if tax_id (nullable) is None
        # and model_fields_set contains the field
        if self.tax_id is None and "tax_id" in self.model_fields_set:
            _dict['tax_id'] = None

        # set to None if address (nullable) is None
        # and model_fields_set contains the field
        if self.address is None and "address" in self.model_fields_set:
            _dict['address'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BusinessInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "external_profile_id": obj.get("external_profile_id"),
            "legal_entity_name": obj.get("legal_entity_name"),
            "date_of_organization": obj.get("date_of_organization"),
            "tax_id": obj.get("tax_id"),
            "documents": [BusinessInfoDocumentsInner.from_dict(_item) for _item in obj["documents"]] if obj.get("documents") is not None else None,
            "address": BusinessInfoAddress.from_dict(obj["address"]) if obj.get("address") is not None else None,
            "individual_profiles": [BusinessInfoIndividualProfilesInner.from_dict(_item) for _item in obj["individual_profiles"]] if obj.get("individual_profiles") is not None else None,
            "institution_profiles": [BusinessInfoInstitutionProfilesInner.from_dict(_item) for _item in obj["institution_profiles"]] if obj.get("institution_profiles") is not None else None
        })
        return _obj


