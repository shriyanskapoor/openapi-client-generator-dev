# coding: utf-8

"""
    Juniper Square Internal API

    An internal API for inter-service communication at JSQ.

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from main_openapi_client.models.detailed_entity import DetailedEntity

class TestDetailedEntity(unittest.TestCase):
    """DetailedEntity unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DetailedEntity:
        """Test DetailedEntity
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `DetailedEntity`
        """
        model = DetailedEntity()
        if include_optional:
            return DetailedEntity(
                id = 56,
                name = '',
                arena_id = 56,
                bank_account_id = 56,
                automated_payments_enabled = True,
                positions = [
                    main_openapi_client.models.position.Position(
                        id = 56, 
                        name = '', 
                        amount_committed = 1.337, 
                        percent_ownership = 1.337, 
                        investor_group_name = '', 
                        cabs = [
                            main_openapi_client.models.position_cabs_inner.Position_cabs_inner(
                                end = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                balance = 1.337, )
                            ], 
                        contributions = [
                            main_openapi_client.models.position_contributions_inner.Position_contributions_inner(
                                start_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                end_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                amount = 1.337, )
                            ], 
                        distributions = [
                            main_openapi_client.models.position_contributions_inner.Position_contributions_inner(
                                start_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                end_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                amount = 1.337, )
                            ], 
                        net_income_sum_by_type = [
                            main_openapi_client.models.position_net_income_sum_by_type_inner.Position_net_income_sum_by_type_inner(
                                start_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                end_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                amount = 1.337, 
                                type_id = 1.337, )
                            ], )
                    ]
            )
        else:
            return DetailedEntity(
        )
        """

    def testDetailedEntity(self):
        """Test DetailedEntity"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
