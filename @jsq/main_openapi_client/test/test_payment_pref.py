# coding: utf-8

"""
    Juniper Square Internal API

    An internal API for inter-service communication at JSQ.

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from main_openapi_client.models.payment_pref import PaymentPref

class TestPaymentPref(unittest.TestCase):
    """PaymentPref unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PaymentPref:
        """Test PaymentPref
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PaymentPref`
        """
        model = PaymentPref()
        if include_optional:
            return PaymentPref(
                id = 56,
                payment_method = 'ACH',
                verification_status = 'verified',
                wire_has_intermediary = True,
                wire_has_international_beneficiary_address = True,
                payment_pref_wire = main_openapi_client.models.payment_pref_payment_pref_wire.PaymentPref_payment_pref_wire(
                    wire_beneficiary_name = '', 
                    wire_beneficiary_account_number = '', 
                    wire_bank_name = '', 
                    wire_aba_number = '', 
                    wire_has_intermediary = True, 
                    wire_has_international_beneficiary_address = True, 
                    wire_reference_to_beneficiary = '', 
                    wire_obi = { }, 
                    wire_bbi = { }, 
                    wire_beneficiary_address = main_openapi_client.models.payment_pref_payment_pref_wire_wire_beneficiary_address.PaymentPref_payment_pref_wire_wire_beneficiary_address(
                        street1 = '', 
                        street2 = '', 
                        street3 = '', 
                        city = '', 
                        state = '', 
                        region = '', 
                        postal_code = '', 
                        country = '', ), ),
                payment_pref_ach = main_openapi_client.models.payment_pref_payment_pref_ach.PaymentPref_payment_pref_ach(
                    ach_account_name = '', 
                    ach_bank_name = '', 
                    ach_account_number = '', 
                    ach_routing_number = '', 
                    ach_account_type = '', 
                    ach_account_ownership = '', 
                    ach_additional_instructions = '', 
                    ach_domicile_address = main_openapi_client.models.payment_pref_payment_pref_ach_ach_domicile_address.PaymentPref_payment_pref_ach_ach_domicile_address(
                        street1 = '', 
                        street2 = '', 
                        street3 = '', 
                        city = '', 
                        state = '', 
                        region = '', 
                        postal_code = '', 
                        country = '', ), )
            )
        else:
            return PaymentPref(
                id = 56,
                payment_method = 'ACH',
                verification_status = 'verified',
        )
        """

    def testPaymentPref(self):
        """Test PaymentPref"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
