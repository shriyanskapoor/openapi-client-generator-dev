# coding: utf-8

"""
    Juniper Square Internal API

    An internal API for inter-service communication at JSQ.

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from main_openapi_client.models.diligence import Diligence

class TestDiligence(unittest.TestCase):
    """Diligence unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Diligence:
        """Test Diligence
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Diligence`
        """
        model = Diligence()
        if include_optional:
            return Diligence(
                id = 1,
                external_object_type = account,
                external_object_id = 3,
                diligence_type = 'kyc',
                status = 'started',
                reviewer_user_id = 4,
                review_start_date = '2024-03-01T17:32:28Z',
                review_end_date = '2024-03-01T17:32:28Z',
                peer_reviewer_user_id = 5,
                peer_review_start_date = '2024-03-01T17:32:28Z',
                peer_review_end_date = '2024-03-01T17:32:28Z',
                arena_id = 6,
                modified_at = '2024-03-01T17:32:28Z',
                created_at = '2024-03-01T17:32:28Z',
                created_by = 7,
                current_investor_diligence_risk_log_id = 8,
                category = 'payments_onboarding_flow',
                external_reference_key = 'external_reference_key',
                name = 'Diligence Name',
                perform_recurring_check = False,
                other_info = {"key":"value"}
            )
        else:
            return Diligence(
                id = 1,
                external_object_type = account,
                external_object_id = 3,
                diligence_type = 'kyc',
                status = 'started',
                reviewer_user_id = 4,
                review_start_date = '2024-03-01T17:32:28Z',
                review_end_date = '2024-03-01T17:32:28Z',
                peer_reviewer_user_id = 5,
                peer_review_start_date = '2024-03-01T17:32:28Z',
                peer_review_end_date = '2024-03-01T17:32:28Z',
                arena_id = 6,
                modified_at = '2024-03-01T17:32:28Z',
                created_at = '2024-03-01T17:32:28Z',
                created_by = 7,
                current_investor_diligence_risk_log_id = 8,
                category = 'payments_onboarding_flow',
                external_reference_key = 'external_reference_key',
                name = 'Diligence Name',
                perform_recurring_check = False,
        )
        """

    def testDiligence(self):
        """Test Diligence"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
