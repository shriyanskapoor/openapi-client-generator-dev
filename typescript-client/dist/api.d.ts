/**
 * Juniper Square Internal API
 * An internal API for inter-service communication at JSQ.
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import type { RequestArgs } from './base';
import { BaseAPI } from './base';
/**
 * Account contact bulk success response
 * @export
 * @interface AccountContactBulkSuccessResponse
 */
export interface AccountContactBulkSuccessResponse {
    /**
     * Arena ID
     * @type {number}
     * @memberof AccountContactBulkSuccessResponse
     */
    'arena_id'?: number;
    /**
     * User ID
     * @type {number}
     * @memberof AccountContactBulkSuccessResponse
     */
    'account_id'?: number;
    /**
     * Account contact ID
     * @type {number}
     * @memberof AccountContactBulkSuccessResponse
     */
    'account_contact_id'?: number;
    /**
     *
     * @type {ResponseStatus}
     * @memberof AccountContactBulkSuccessResponse
     */
    'status'?: ResponseStatus;
}
/**
 * Address for business
 * @export
 * @interface Address
 */
export interface Address {
    /**
     * Street address
     * @type {string}
     * @memberof Address
     */
    'line1'?: string;
    /**
     * Street address line 2
     * @type {string}
     * @memberof Address
     */
    'line2'?: string | null;
    /**
     * City
     * @type {string}
     * @memberof Address
     */
    'city'?: string;
    /**
     * State
     * @type {string}
     * @memberof Address
     */
    'state'?: string;
    /**
     * Postal code
     * @type {string}
     * @memberof Address
     */
    'postal_code'?: string;
    /**
     * Country (ISO 3166-1 alpha-2)
     * @type {string}
     * @memberof Address
     */
    'country'?: string;
}
/**
 * Allocation Types for an arena
 * @export
 * @interface AllocationType
 */
export interface AllocationType {
    /**
     * Name of the allocation type.
     * @type {string}
     * @memberof AllocationType
     */
    'name': string;
    /**
     * Category of the allocation type.
     * @type {string}
     * @memberof AllocationType
     */
    'category': AllocationTypeCategoryEnum;
    /**
     * Flag to indicate whether the allocation type is recallable.
     * @type {boolean}
     * @memberof AllocationType
     */
    'is_recallable': boolean;
}
export declare const AllocationTypeCategoryEnum: {
    readonly CapitalCall: "Capital Call";
    readonly CapitalActivity: "Capital Activity";
    readonly DistributionAllocations: "Distribution Allocations";
    readonly NetIncomeAllocations: "Net Income Allocations";
};
export type AllocationTypeCategoryEnum = typeof AllocationTypeCategoryEnum[keyof typeof AllocationTypeCategoryEnum];
/**
 * Arena resources representing a GP workspace.
 * @export
 * @interface Arena
 */
export interface Arena {
    /**
     *
     * @type {number}
     * @memberof Arena
     */
    'id': number;
    /**
     * The name of the arena.
     * @type {string}
     * @memberof Arena
     */
    'name': string;
    /**
     * The environment specific arena\'s hostname and path prefix for the Unified Portal (Portal 2.0)
     * @type {string}
     * @memberof Arena
     */
    'unified_portal_url': string;
    /**
     * Whether the arena is active.
     * @type {boolean}
     * @memberof Arena
     */
    'is_active': boolean;
    /**
     * The domain of the arena.
     * @type {string}
     * @memberof Arena
     */
    'domain': string;
}
/**
 * Allocation Type for an arena.
 * @export
 * @interface ArenaNetIncomeType
 */
export interface ArenaNetIncomeType {
    /**
     * FK to the the arena these payment settings belong to.
     * @type {number}
     * @memberof ArenaNetIncomeType
     */
    'arena_id': number;
    /**
     * ID of the allocation type.
     * @type {number}
     * @memberof ArenaNetIncomeType
     */
    'id': number;
    /**
     * The sort order of the object.
     * @type {number}
     * @memberof ArenaNetIncomeType
     */
    'sort_order'?: number;
    /**
     * Name of the allocation type.
     * @type {string}
     * @memberof ArenaNetIncomeType
     */
    'name': string;
}
/**
 * Payment Settings for an arena.
 * @export
 * @interface ArenaPaymentSettings
 */
export interface ArenaPaymentSettings {
    /**
     * FK to the the arena these payment settings belong to.
     * @type {number}
     * @memberof ArenaPaymentSettings
     */
    'arena_id': number;
    /**
     * The number of approvers required on a payment batch.
     * @type {number}
     * @memberof ArenaPaymentSettings
     */
    'required_approval_count': number;
    /**
     * Whether or not the payment batch creator can also approve the payment batch.
     * @type {boolean}
     * @memberof ArenaPaymentSettings
     */
    'require_different_approver': boolean;
}
/**
 * Roles for an arena.
 * @export
 * @interface ArenaRoles
 */
export interface ArenaRoles {
    /**
     * FK to the arena.
     * @type {number}
     * @memberof ArenaRoles
     */
    'arena_id': number;
    /**
     * FK to the role.
     * @type {Array<number>}
     * @memberof ArenaRoles
     */
    'role_ids': Array<number>;
    /**
     * Enum key for the role. Orders sorted by role name alphabetical order.
     * @type {Array<string>}
     * @memberof ArenaRoles
     */
    'role_enums': Array<string>;
}
/**
 * A bank account
 * @export
 * @interface BankAccount
 */
export interface BankAccount {
    /**
     * ID of the bank account.
     * @type {number}
     * @memberof BankAccount
     */
    'id': number;
    /**
     * Name of the bank account owner.
     * @type {string}
     * @memberof BankAccount
     */
    'owner_name': string;
    /**
     * Bank account number.
     * @type {string}
     * @memberof BankAccount
     */
    'account_number': string;
    /**
     * Bank account routing number.
     * @type {string}
     * @memberof BankAccount
     */
    'routing_number': string;
    /**
     * Arena ID this bank account belongs to.
     * @type {number}
     * @memberof BankAccount
     */
    'arena_id': number;
    /**
     *
     * @type {BankAccountAchInfo}
     * @memberof BankAccount
     */
    'ach_info'?: BankAccountAchInfo | null;
}
/**
 * A bank account containing ach specific info. This will only have valid fields if the bank account is set to ach.
 * @export
 * @interface BankAccountAchInfo
 */
export interface BankAccountAchInfo {
    /**
     * Optional ach account owner name
     * @type {string}
     * @memberof BankAccountAchInfo
     */
    'ach_instructions_account_owner_name'?: string | null;
}
/**
 *
 * @export
 * @interface BulkAccountContactChangeNotify
 */
export interface BulkAccountContactChangeNotify {
    /**
     *
     * @type {string}
     * @memberof BulkAccountContactChangeNotify
     */
    'request_type'?: BulkAccountContactChangeNotifyRequestTypeEnum;
    /**
     *
     * @type {Array<BulkAccountContactChangeNotifyRequestPayloadsInner>}
     * @memberof BulkAccountContactChangeNotify
     */
    'request_payloads'?: Array<BulkAccountContactChangeNotifyRequestPayloadsInner>;
}
export declare const BulkAccountContactChangeNotifyRequestTypeEnum: {
    readonly AddContact: "ADD_CONTACT";
    readonly UpdateContact: "UPDATE_CONTACT";
    readonly RemoveContact: "REMOVE_CONTACT";
};
export type BulkAccountContactChangeNotifyRequestTypeEnum = typeof BulkAccountContactChangeNotifyRequestTypeEnum[keyof typeof BulkAccountContactChangeNotifyRequestTypeEnum];
/**
 *
 * @export
 * @interface BulkAccountContactChangeNotifyRequestPayloadsInner
 */
export interface BulkAccountContactChangeNotifyRequestPayloadsInner {
    /**
     *
     * @type {number}
     * @memberof BulkAccountContactChangeNotifyRequestPayloadsInner
     */
    'arena_id': number;
    /**
     *
     * @type {number}
     * @memberof BulkAccountContactChangeNotifyRequestPayloadsInner
     */
    'account_id': number;
    /**
     *
     * @type {number}
     * @memberof BulkAccountContactChangeNotifyRequestPayloadsInner
     */
    'contact_id': number;
    /**
     *
     * @type {string}
     * @memberof BulkAccountContactChangeNotifyRequestPayloadsInner
     */
    'comment': string;
}
/**
 * Bulk account contact removal object
 * @export
 * @interface BulkAccountContactRemove
 */
export interface BulkAccountContactRemove {
    /**
     * Arena ID
     * @type {number}
     * @memberof BulkAccountContactRemove
     */
    'arena_id': number;
    /**
     * User ID
     * @type {number}
     * @memberof BulkAccountContactRemove
     */
    'account_id': number;
    /**
     * Account contact ID
     * @type {number}
     * @memberof BulkAccountContactRemove
     */
    'account_contact_id': number;
}
/**
 * Bulk account contact removal array input
 * @export
 * @interface BulkAccountContactRemoveRequestBody
 */
export interface BulkAccountContactRemoveRequestBody {
    /**
     *
     * @type {{ [key: string]: any; }}
     * @memberof BulkAccountContactRemoveRequestBody
     */
    'metadata'?: {
        [key: string]: any;
    };
    /**
     *
     * @type {Array<BulkAccountContactRemove>}
     * @memberof BulkAccountContactRemoveRequestBody
     */
    'request_payloads'?: Array<BulkAccountContactRemove>;
}
/**
 * Bulk account contact update
 * @export
 * @interface BulkAccountContactUpdate
 */
export interface BulkAccountContactUpdate {
    /**
     * Arena ID
     * @type {number}
     * @memberof BulkAccountContactUpdate
     */
    'arena_id': number;
    /**
     * User ID
     * @type {number}
     * @memberof BulkAccountContactUpdate
     */
    'account_id': number;
    /**
     * Account contact ID
     * @type {number}
     * @memberof BulkAccountContactUpdate
     */
    'account_contact_id': number;
    /**
     * Relationship label for account contact
     * @type {string}
     * @memberof BulkAccountContactUpdate
     */
    'label'?: string | null;
    /**
     * True if the account contact is To contact, False for CC contact
     * @type {boolean}
     * @memberof BulkAccountContactUpdate
     */
    'is_main_contact'?: boolean | null;
    /**
     * True if the account contact is an admin contact
     * @type {boolean}
     * @memberof BulkAccountContactUpdate
     */
    'is_admin_contact'?: boolean | null;
    /**
     * List of distribution IDs
     * @type {Array<number>}
     * @memberof BulkAccountContactUpdate
     */
    'distribution_list'?: Array<number> | null;
}
/**
 * Bulk account contact update array input
 * @export
 * @interface BulkAccountContactUpdateRequestBody
 */
export interface BulkAccountContactUpdateRequestBody {
    /**
     *
     * @type {{ [key: string]: any; }}
     * @memberof BulkAccountContactUpdateRequestBody
     */
    'metadata'?: {
        [key: string]: any;
    };
    /**
     *
     * @type {Array<BulkAccountContactUpdate>}
     * @memberof BulkAccountContactUpdateRequestBody
     */
    'request_payloads'?: Array<BulkAccountContactUpdate>;
}
/**
 * @type BulkUpdateDeveloperFeatureFlags400Response
 * @export
 */
export type BulkUpdateDeveloperFeatureFlags400Response = Array<Error> | ModelError;
/**
 * Bulk operation to update feature flag states in bulk.
 * @export
 * @interface BulkUpdateFeatureFlags
 */
export interface BulkUpdateFeatureFlags {
    [key: string]: boolean;
}
/**
 * Business information for diligence
 * @export
 * @interface BusinessInfo
 */
export interface BusinessInfo {
    /**
     * Profile ID for diligence
     * @type {number}
     * @memberof BusinessInfo
     */
    'external_profile_id'?: number;
    /**
     * Legal entity name
     * @type {string}
     * @memberof BusinessInfo
     */
    'legal_entity_name'?: string;
    /**
     * Date of formation for business
     * @type {string}
     * @memberof BusinessInfo
     */
    'date_of_organization'?: string;
    /**
     * Tax ID for business
     * @type {string}
     * @memberof BusinessInfo
     */
    'tax_id'?: string | null;
    /**
     * Documents for business
     * @type {Array<BusinessInfoDocumentsInner>}
     * @memberof BusinessInfo
     */
    'documents'?: Array<BusinessInfoDocumentsInner>;
    /**
     *
     * @type {BusinessInfoAddress}
     * @memberof BusinessInfo
     */
    'address'?: BusinessInfoAddress | null;
    /**
     * Individual profiles used for legacy diligences. This is deprecated. For KYC, a KycDetail will be created. For watchlist, a watchlist screening will be triggered.
     * @type {Array<BusinessInfoIndividualProfilesInner>}
     * @memberof BusinessInfo
     */
    'individual_profiles'?: Array<BusinessInfoIndividualProfilesInner>;
    /**
     * Institution profiles used for legacy diligences. This is deprecated. For KYC, a KycDetail will be created. For watchlist, a watchlist screening will be triggered.
     * @type {Array<BusinessInfoInstitutionProfilesInner>}
     * @memberof BusinessInfo
     */
    'institution_profiles'?: Array<BusinessInfoInstitutionProfilesInner>;
}
/**
 * @type BusinessInfoAddress
 * Address for business
 * @export
 */
export type BusinessInfoAddress = Address;
/**
 * @type BusinessInfoDocumentsInner
 * @export
 */
export type BusinessInfoDocumentsInner = Document;
/**
 * @type BusinessInfoIndividualProfilesInner
 * @export
 */
export type BusinessInfoIndividualProfilesInner = IndividualProfile;
/**
 * @type BusinessInfoInstitutionProfilesInner
 * @export
 */
export type BusinessInfoInstitutionProfilesInner = InstitutionProfile;
/**
 * Deprecated create diligence object and underlying KYC/watchlists
 * @export
 * @interface CreateDiligence
 */
export interface CreateDiligence {
    /**
     * Arena ID the diligence is located in
     * @type {number}
     * @memberof CreateDiligence
     */
    'arena_id'?: number;
    /**
     * User ID of the user creating the diligence
     * @type {number}
     * @memberof CreateDiligence
     */
    'user_id'?: number;
    /**
     *
     * @type {CreateDiligenceExternalObjectType}
     * @memberof CreateDiligence
     */
    'external_object_type'?: CreateDiligenceExternalObjectType;
    /**
     * Number representing the id of the external object type in the external object type table.
     * @type {number}
     * @memberof CreateDiligence
     */
    'external_object_id'?: number;
    /**
     *
     * @type {CreateDiligenceDiligenceType}
     * @memberof CreateDiligence
     */
    'diligence_type'?: CreateDiligenceDiligenceType;
    /**
     *
     * @type {CreateDiligenceDiligenceCategory}
     * @memberof CreateDiligence
     */
    'diligence_category'?: CreateDiligenceDiligenceCategory;
    /**
     *
     * @type {CreateDiligenceBusinessInfo}
     * @memberof CreateDiligence
     */
    'business_info'?: CreateDiligenceBusinessInfo;
    /**
     *
     * @type {CreateDiligenceReferenceExternalObjectType}
     * @memberof CreateDiligence
     */
    'reference_external_object_type'?: CreateDiligenceReferenceExternalObjectType | null;
    /**
     * Reference external object ID. Useful when needing to check the relationship between two objects.
     * @type {number}
     * @memberof CreateDiligence
     */
    'reference_external_object_id'?: number | null;
    /**
     * Other key values info for the diligence
     * @type {{ [key: string]: any; }}
     * @memberof CreateDiligence
     */
    'other_info'?: {
        [key: string]: any;
    } | null;
}
/**
 * @type CreateDiligenceBusinessInfo
 * Business information for diligence
 * @export
 */
export type CreateDiligenceBusinessInfo = BusinessInfo;
/**
 * @type CreateDiligenceDiligenceCategory
 * Category of the Diligence
 * @export
 */
export type CreateDiligenceDiligenceCategory = DiligenceCategory;
/**
 * @type CreateDiligenceDiligenceType
 * Type of diligence
 * @export
 */
export type CreateDiligenceDiligenceType = DiligenceType;
/**
 * @type CreateDiligenceExternalObjectType
 * External object type.
 * @export
 */
export type CreateDiligenceExternalObjectType = ObjectType;
/**
 * Reference external object type. Useful when the diligence is related to another object.
 * @export
 * @interface CreateDiligenceReferenceExternalObjectType
 */
export interface CreateDiligenceReferenceExternalObjectType {
}
/**
 * An entity with it\'s positions.
 * @export
 * @interface DetailedEntity
 */
export interface DetailedEntity {
    /**
     *
     * @type {number}
     * @memberof DetailedEntity
     */
    'id'?: number;
    /**
     * Name of the entity.
     * @type {string}
     * @memberof DetailedEntity
     */
    'name'?: string;
    /**
     *
     * @type {number}
     * @memberof DetailedEntity
     */
    'arena_id'?: number;
    /**
     *
     * @type {number}
     * @memberof DetailedEntity
     */
    'bank_account_id'?: number | null;
    /**
     *
     * @type {boolean}
     * @memberof DetailedEntity
     */
    'automated_payments_enabled'?: boolean;
    /**
     *
     * @type {Array<Position>}
     * @memberof DetailedEntity
     */
    'positions'?: Array<Position>;
}
/**
 * Diligence used as a model for keeping track of investor diligence actions on a variety of items
 * @export
 * @interface Diligence
 */
export interface Diligence {
    /**
     * ID of the diligence object in the DB.
     * @type {number}
     * @memberof Diligence
     */
    'id': number;
    /**
     *
     * @type {DiligenceExternalObjectType}
     * @memberof Diligence
     */
    'external_object_type': DiligenceExternalObjectType | null;
    /**
     * Number representing the id of the external object type in the external object type table.
     * @type {number}
     * @memberof Diligence
     */
    'external_object_id': number | null;
    /**
     *
     * @type {DiligenceType}
     * @memberof Diligence
     */
    'diligence_type': DiligenceType;
    /**
     *
     * @type {DiligenceStatus}
     * @memberof Diligence
     */
    'status': DiligenceStatus;
    /**
     * ID of user who reviewed the diligence
     * @type {number}
     * @memberof Diligence
     */
    'reviewer_user_id': number | null;
    /**
     * Date-time the diligence was moved into review status
     * @type {string}
     * @memberof Diligence
     */
    'review_start_date': string | null;
    /**
     * Date-time the diligence was moved out of review status
     * @type {string}
     * @memberof Diligence
     */
    'review_end_date': string | null;
    /**
     * ID of user who peer-reviewed the diligence
     * @type {number}
     * @memberof Diligence
     */
    'peer_reviewer_user_id': number | null;
    /**
     * Date-time the diligence was moved into peer-review status
     * @type {string}
     * @memberof Diligence
     */
    'peer_review_start_date': string | null;
    /**
     * Date-time the diligence was moved out of peer-review status
     * @type {string}
     * @memberof Diligence
     */
    'peer_review_end_date': string | null;
    /**
     * Arena ID the diligence is located in
     * @type {number}
     * @memberof Diligence
     */
    'arena_id': number;
    /**
     * Date-time the diligence was last modified
     * @type {string}
     * @memberof Diligence
     */
    'modified_at': string | null;
    /**
     * Date-time the diligence was created
     * @type {string}
     * @memberof Diligence
     */
    'created_at': string | null;
    /**
     * FK to the user id who created the diligence
     * @type {number}
     * @memberof Diligence
     */
    'created_by': number;
    /**
     * FK to the Investor Diligence Risk Log
     * @type {number}
     * @memberof Diligence
     */
    'current_investor_diligence_risk_log_id': number | null;
    /**
     *
     * @type {DiligenceCategory}
     * @memberof Diligence
     */
    'category': DiligenceCategory;
    /**
     * String of external reference
     * @type {string}
     * @memberof Diligence
     */
    'external_reference_key': string | null;
    /**
     * Name of the diligence
     * @type {string}
     * @memberof Diligence
     */
    'name': string | null;
    /**
     * Only used for watchlist diligences. Used to determine if recurring checks is enabled
     * @type {boolean}
     * @memberof Diligence
     */
    'perform_recurring_check': boolean | null;
    /**
     * Other key values info for the diligence
     * @type {{ [key: string]: any; }}
     * @memberof Diligence
     */
    'other_info'?: {
        [key: string]: any;
    } | null;
}
/**
 * Category of Diligence
 * @export
 * @enum {string}
 */
export declare const DiligenceCategory: {
    readonly PaymentsOnboardingFlow: "payments_onboarding_flow";
};
export type DiligenceCategory = typeof DiligenceCategory[keyof typeof DiligenceCategory];
/**
 * @type DiligenceExternalObjectType
 * External object type.
 * @export
 */
export type DiligenceExternalObjectType = ObjectType | object;
/**
 * Status of the diligence in the submission workflow
 * @export
 * @enum {string}
 */
export declare const DiligenceStatus: {
    readonly Started: "started";
    readonly PendingReview: "pending_review";
    readonly RequestedLpForInfo: "requested_lp_for_info";
    readonly InReview: "in_review";
    readonly PendingPeerReview: "pending_peer_review";
    readonly InPeerReview: "in_peer_review";
    readonly Confirmed: "confirmed";
};
export type DiligenceStatus = typeof DiligenceStatus[keyof typeof DiligenceStatus];
/**
 * Type of Diligence. Differs from category because category represents what type of service/entity is requesting the diligence. DiligenceType represents the type of diligence created
 * @export
 * @enum {string}
 */
export declare const DiligenceType: {
    readonly Kyc: "kyc";
    readonly WatchlistScreening: "watchlist_screening";
    readonly Manual: "manual";
};
export type DiligenceType = typeof DiligenceType[keyof typeof DiligenceType];
/**
 * A Distribution that is part of a distribution batch.
 * @export
 * @interface Distribution
 */
export interface Distribution {
    /**
     *
     * @type {number}
     * @memberof Distribution
     */
    'id': number;
    /**
     * Arena ID this distribution batch belongs to.
     * @type {number}
     * @memberof Distribution
     */
    'arena_id': number;
    /**
     * FK to position ID this distribution belongs to
     * @type {number}
     * @memberof Distribution
     */
    'position_id': number;
    /**
     * FK to payment pref for this distribution\'s position\'s payment pref
     * @type {number}
     * @memberof Distribution
     */
    'payment_pref_id': number | null;
    /**
     * Amount to be distributed
     * @type {number}
     * @memberof Distribution
     */
    'amount': number;
    /**
     * Amount to be distributed netting any amount adjusted or reinvested
     * @type {number}
     * @memberof Distribution
     */
    'amount_payable': number;
    /**
     * The date the distribution was manually settled (if applicable)
     * @type {string}
     * @memberof Distribution
     */
    'manual_settlement_date': string | null;
    /**
     * Whether or not the distribution has a legacy payment associated with it (that has not been marked as canceled or failed or voided)
     * @type {boolean}
     * @memberof Distribution
     */
    'has_legacy_payment': boolean;
}
/**
 * A Distribution Batch.
 * @export
 * @interface DistributionBatch
 */
export interface DistributionBatch {
    /**
     *
     * @type {number}
     * @memberof DistributionBatch
     */
    'id': number;
    /**
     * Total amount distributed
     * @type {number}
     * @memberof DistributionBatch
     */
    'total_amount': number;
    /**
     * Arena ID this distribution batch belongs to.
     * @type {number}
     * @memberof DistributionBatch
     */
    'arena_id': number;
    /**
     * Entity ID this distribution batch belongs to.
     * @type {number}
     * @memberof DistributionBatch
     */
    'entity_id': number;
}
/**
 * Documents for business
 * @export
 * @interface Document
 */
export interface Document {
    /**
     * Document type
     * @type {string}
     * @memberof Document
     */
    'document_type'?: DocumentDocumentTypeEnum;
    /**
     * S3 Keys for documents
     * @type {string}
     * @memberof Document
     */
    's3_key'?: string;
    /**
     * Name of document
     * @type {string}
     * @memberof Document
     */
    'name'?: string;
    /**
     * Content type of document
     * @type {string}
     * @memberof Document
     */
    'content_type'?: DocumentContentTypeEnum;
}
export declare const DocumentDocumentTypeEnum: {
    readonly IdentityDocument: "identity_document";
    readonly FormationDocument: "formation_document";
    readonly TaxDocument: "tax_document";
    readonly File: "file";
    readonly CorporateResolution: "corporate_resolution";
    readonly AuditedFinancial: "audited_financial";
};
export type DocumentDocumentTypeEnum = typeof DocumentDocumentTypeEnum[keyof typeof DocumentDocumentTypeEnum];
export declare const DocumentContentTypeEnum: {
    readonly ImageWebp: "image/webp";
    readonly ApplicationPdf: "application/pdf";
    readonly ImagePng: "image/png";
    readonly ImageJpeg: "image/jpeg";
};
export type DocumentContentTypeEnum = typeof DocumentContentTypeEnum[keyof typeof DocumentContentTypeEnum];
/**
 * An entity
 * @export
 * @interface Entity
 */
export interface Entity {
    /**
     *
     * @type {number}
     * @memberof Entity
     */
    'id': number;
    /**
     *
     * @type {number}
     * @memberof Entity
     */
    'arena_id': number;
    /**
     *
     * @type {string}
     * @memberof Entity
     */
    'name': string;
    /**
     *
     * @type {number}
     * @memberof Entity
     */
    'bank_account_id'?: number | null;
    /**
     *
     * @type {boolean}
     * @memberof Entity
     */
    'automated_payments_enabled': boolean;
}
/**
 * A position for a specific arena, source name, and source object id.
 * @export
 * @interface ExternalPosition
 */
export interface ExternalPosition {
    /**
     *
     * @type {number}
     * @memberof ExternalPosition
     */
    'id': number;
}
/**
 * Feature flags used to control application or arena wide availability of features. Note: presently only supports boolean (enabled/disabled) feature flags.
 * @export
 * @interface FeatureFlag
 */
export interface FeatureFlag {
    /**
     *
     * @type {number}
     * @memberof FeatureFlag
     */
    'id': number;
    /**
     * The name of the feature flag.
     * @type {string}
     * @memberof FeatureFlag
     */
    'name': string;
    /**
     * A meaningful label for the feature flag.
     * @type {string}
     * @memberof FeatureFlag
     */
    'label': string;
    /**
     * A description of the purpose of the feature flag.
     * @type {string}
     * @memberof FeatureFlag
     */
    'description'?: string | null;
    /**
     * Whether the feature flag is enabled or disabled.
     * @type {boolean}
     * @memberof FeatureFlag
     */
    'is_enabled': boolean;
    /**
     * Whether the feature flag has side-effect operations that must be performed when the feature flag is enabled or disabled.
     * @type {boolean}
     * @memberof FeatureFlag
     */
    'has_side_effects'?: boolean;
}
/**
 * @type GetDeveloperFeatureFlags401Response
 * @export
 */
export type GetDeveloperFeatureFlags401Response = Array<ServerError> | ServerError;
/**
 * Granular permission enum
 * @export
 * @enum {string}
 */
export declare const GranularPermission: {
    readonly ManagePortalSettings: "CAN_MANAGE_PORTAL_SETTINGS";
    readonly ManageGeneralSubscriptionSettings: "CAN_MANAGE_GENERAL_SUBSCRIPTION_SETTINGS";
    readonly ManageStaffAccess: "CAN_MANAGE_STAFF_ACCESS";
    readonly ManageSelf: "CAN_MANAGE_SELF";
    readonly ManageUserRoles: "CAN_MANAGE_USER_ROLES";
    readonly AssignAdministratorPermissionsToStaffUsers: "CAN_ASSIGN_ADMINISTRATOR_PERMISSIONS_TO_STAFF_USERS";
    readonly ManageAuthentication: "CAN_MANAGE_AUTHENTICATION";
    readonly ManageAgreements: "CAN_MANAGE_AGREEMENTS";
    readonly ManageDataFields: "CAN_MANAGE_DATA_FIELDS";
    readonly AccessAuditLog: "CAN_ACCESS_AUDIT_LOG";
    readonly ConfigDocumentCategories: "CAN_CONFIG_DOCUMENT_CATEGORIES";
    readonly ConfigEmailDistributionLists: "CAN_CONFIG_EMAIL_DISTRIBUTION_LISTS";
    readonly ConfigCrmNotificationLists: "CAN_CONFIG_CRM_NOTIFICATION_LISTS";
    readonly ConfigOwnershipUnitsAndPercentages: "CAN_CONFIG_OWNERSHIP_UNITS_AND_PERCENTAGES";
    readonly ConfigDistributionsAndCapitalTransactions: "CAN_CONFIG_DISTRIBUTIONS_AND_CAPITAL_TRANSACTIONS";
    readonly ConfigNetIncomeAndNavComponents: "CAN_CONFIG_NET_INCOME_AND_NAV_COMPONENTS";
    readonly ConfigEntitySubtypes: "CAN_CONFIG_ENTITY_SUBTYPES";
    readonly ConfigMetricsSettings: "CAN_CONFIG_METRICS_SETTINGS";
    readonly ConfigWatermarkTemplates: "CAN_CONFIG_WATERMARK_TEMPLATES";
    readonly ConfigManagementFees: "CAN_CONFIG_MANAGEMENT_FEES";
    readonly ConfigOrganizationSettings: "CAN_CONFIG_ORGANIZATION_SETTINGS";
    readonly ConfigESignatures: "CAN_CONFIG_E_SIGNATURES";
    readonly ConfigStatementNotices: "CAN_CONFIG_STATEMENT_NOTICES";
    readonly ConfigStationeryLibrary: "CAN_CONFIG_STATIONERY_LIBRARY";
    readonly ConfigReportingTemplate: "CAN_CONFIG_REPORTING_TEMPLATE";
    readonly ConfigIntegrations: "CAN_CONFIG_INTEGRATIONS";
    readonly ConfigMappings: "CAN_CONFIG_MAPPINGS";
    readonly AccessProspectSubscription: "CAN_ACCESS_PROSPECT_SUBSCRIPTION";
};
export type GranularPermission = typeof GranularPermission[keyof typeof GranularPermission];
/**
 * Individual profile for diligence
 * @export
 * @interface IndividualProfile
 */
export interface IndividualProfile {
    /**
     * Profile ID for diligence
     * @type {number}
     * @memberof IndividualProfile
     */
    'external_profile_id': number;
    /**
     * First name
     * @type {string}
     * @memberof IndividualProfile
     */
    'first_name': string;
    /**
     * Last name
     * @type {string}
     * @memberof IndividualProfile
     */
    'last_name': string;
    /**
     * Date of birth
     * @type {string}
     * @memberof IndividualProfile
     */
    'date_of_birth': string;
    /**
     * SSN
     * @type {string}
     * @memberof IndividualProfile
     */
    'tax_id': string;
    /**
     *
     * @type {IndividualProfileAddress}
     * @memberof IndividualProfile
     */
    'address': IndividualProfileAddress;
    /**
     * Documents for individual
     * @type {Array<BusinessInfoDocumentsInner>}
     * @memberof IndividualProfile
     */
    'documents': Array<BusinessInfoDocumentsInner>;
    /**
     * Whether the individual is a beneficial owner
     * @type {boolean}
     * @memberof IndividualProfile
     */
    'is_beneficial_owner'?: boolean;
    /**
     * Whether the individual is a controller
     * @type {boolean}
     * @memberof IndividualProfile
     */
    'is_controller'?: boolean;
    /**
     * Whether the individual is a signatory
     * @type {boolean}
     * @memberof IndividualProfile
     */
    'is_signatory'?: boolean;
    /**
     * Potential percentage of the business the individual owns
     * @type {number}
     * @memberof IndividualProfile
     */
    'business_ownership_percent'?: number | null;
}
/**
 * @type IndividualProfileAddress
 * Address for individual
 * @export
 */
export type IndividualProfileAddress = Address;
/**
 * Institution profile for diligence
 * @export
 * @interface InstitutionProfile
 */
export interface InstitutionProfile {
    /**
     * Profile ID for institution
     * @type {number}
     * @memberof InstitutionProfile
     */
    'external_profile_id': number;
    /**
     * Name of institution
     * @type {string}
     * @memberof InstitutionProfile
     */
    'legal_entity_name': string;
    /**
     * Tax ID for institution
     * @type {string}
     * @memberof InstitutionProfile
     */
    'tax_id': string;
    /**
     * Date of formation for business
     * @type {string}
     * @memberof InstitutionProfile
     */
    'date_of_organization': string;
    /**
     * Whether the individual is a beneficial owner
     * @type {boolean}
     * @memberof InstitutionProfile
     */
    'is_beneficial_owner'?: boolean;
    /**
     *
     * @type {InstitutionProfileAddress}
     * @memberof InstitutionProfile
     */
    'address': InstitutionProfileAddress;
    /**
     * Documents for individual
     * @type {Array<BusinessInfoDocumentsInner>}
     * @memberof InstitutionProfile
     */
    'documents': Array<BusinessInfoDocumentsInner>;
    /**
     * Potential percentage of the business the individual owns
     * @type {number}
     * @memberof InstitutionProfile
     */
    'business_ownership_percent'?: number | null;
}
/**
 * @type InstitutionProfileAddress
 * Address for institution
 * @export
 */
export type InstitutionProfileAddress = Address;
/**
 * Bulk account contact update and remove metadata
 * @export
 * @interface MetaData
 */
export interface MetaData {
    /**
     * Requester user ID
     * @type {number}
     * @memberof MetaData
     */
    'requester_user_id': number;
    /**
     * Comment for the bulk update from account admin
     * @type {string}
     * @memberof MetaData
     */
    'comment': string;
}
/**
 *
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     *
     * @type {string}
     * @memberof ModelError
     */
    'field'?: string;
    /**
     *
     * @type {string}
     * @memberof ModelError
     */
    'message': string;
    /**
     *
     * @type {string}
     * @memberof ModelError
     */
    'exception'?: string;
}
/**
 * Returns the permissioning object for the queried user and object type combination.
 * @export
 * @interface ObjectLevelPermission
 */
export interface ObjectLevelPermission {
    /**
     * Boolean if the user has permission based on the specified filters
     * @type {boolean}
     * @memberof ObjectLevelPermission
     */
    'has_permission': boolean;
}
/**
 * String representation of ObjectType enum
 * @export
 * @enum {string}
 */
export declare const ObjectType: {
    readonly Arena: "arena";
    readonly User: "user";
    readonly Contact: "contact";
    readonly Offering: "offering";
    readonly Prospect: "prospect";
    readonly Account: "account";
    readonly Property: "property";
    readonly CommPref: "comm_pref";
    readonly Position: "position";
    readonly Document: "document";
    readonly EmailBatch: "email_batch";
    readonly CapitalCallBatch: "capital_call_batch";
    readonly DistributionBatch: "distribution_batch";
    readonly Transaction: "transaction";
    readonly Asset: "asset";
    readonly ProspectContactMap: "prospect_contact_map";
    readonly DataRoom: "data_room";
    readonly NetIncomeBatch: "net_income_batch";
    readonly Publication: "publication";
    readonly SubscriptionBatch: "subscription_batch";
    readonly Subscription: "subscription";
    readonly EventLog: "event_log";
    readonly PaymentBatch: "payment_batch";
    readonly ManagementFeeBatch: "management_fee_batch";
    readonly Task: "task";
    readonly Lead: "lead";
    readonly CrmNotificationList: "crm_notification_list";
    readonly NavBatch: "nav_batch";
    readonly Loan: "loan";
    readonly AssetDateSampledData: "asset_date_sampled_data";
    readonly TransactionBatch: "transaction_batch";
    readonly UnitValue: "unit_value";
    readonly UnitValueBatch: "unit_value_batch";
    readonly CapitalCall: "capital_call";
    readonly Distribution: "distribution";
    readonly NetIncome: "net_income";
    readonly Nav: "nav";
    readonly Note: "note";
    readonly StoredEmail: "stored_email";
    readonly Email: "email";
    readonly InvestorDiligence: "investor_diligence";
    readonly WatchlistScreeningDetail: "watchlist_screening_detail";
    readonly KycDetail: "kyc_detail";
    readonly KycDocument: "kyc_document";
    readonly KycDocumentVersion: "kyc_document_version";
    readonly ImportTemplate: "import_template";
    readonly KycDocumentVersionActivity: "kyc_document_version_activity";
    readonly Acquisition: "acquisition";
    readonly Disposition: "disposition";
    readonly FeatureFlag: "feature_flag";
    readonly PaymentPref: "payment_pref";
    readonly DocumentCategory: "document_category";
    readonly ConsolidatedPaymentBatch: "consolidated_payment_batch";
    readonly ESignatureDocument: "e_signature_document";
    readonly ESignatureRequestTemplate: "e_signature_request_template";
    readonly ESignatureGpSigner: "e_signature_gp_signer";
    readonly ESignatureRequestBatch: "e_signature_request_batch";
    readonly ESignatureRequest: "e_signature_request";
    readonly ESignatureRequestRecipient: "e_signature_request_recipient";
    readonly ESignatureLpSigner: "e_signature_lp_signer";
    readonly ESignatureLpConfigurator: "e_signature_lp_configurator";
    readonly Payment: "payment";
    readonly BankAccount: "bank_account";
    readonly TwrPeriodMetric: "twr_period_metric";
    readonly FieldAccessRole: "field_access_role";
    readonly FieldAccessRoleObjectMap: "field_access_role_object_map";
    readonly Location: "location";
    readonly ProductType: "product_type";
    readonly DocumentFolder: "document_folder";
    readonly LpConsolidationRequest: "lp_consolidation_request";
    readonly FundAdminService: "fund_admin_service";
    readonly EntityCollection: "entity_collection";
    readonly ComplianceProfile: "compliance_profile";
};
export type ObjectType = typeof ObjectType[keyof typeof ObjectType];
/**
 * An entity\'s operating company information
 * @export
 * @interface Opco
 */
export interface Opco {
    /**
     * The Account ID of the operating company
     * @type {number}
     * @memberof Opco
     */
    'opco_id': number;
    /**
     * The name of the operating company
     * @type {string}
     * @memberof Opco
     */
    'opco_name': string;
    /**
     * The currency of the operating company
     * @type {string}
     * @memberof Opco
     */
    'opco_currency': string;
    /**
     * The positions associated with the operating company
     * @type {Array<OpcoPosition>}
     * @memberof Opco
     */
    'positions': Array<OpcoPosition>;
}
/**
 * An entity\'s position on its operating company
 * @export
 * @interface OpcoPosition
 */
export interface OpcoPosition {
    /**
     *
     * @type {number}
     * @memberof OpcoPosition
     */
    'id': number;
    /**
     *
     * @type {string}
     * @memberof OpcoPosition
     */
    'investor_group_name': string;
    /**
     *
     * @type {string}
     * @memberof OpcoPosition
     */
    'status': string;
    /**
     *
     * @type {string}
     * @memberof OpcoPosition
     */
    'ownership_percent': string | null;
}
/**
 * A payment preference.
 * @export
 * @interface PaymentPref
 */
export interface PaymentPref {
    /**
     *
     * @type {number}
     * @memberof PaymentPref
     */
    'id': number;
    /**
     * Payment method for the payment preference: ACH, Wire or Check.
     * @type {string}
     * @memberof PaymentPref
     */
    'payment_method': PaymentPrefPaymentMethodEnum;
    /**
     * Verification status for the payment preference: verified, unverified or error.
     * @type {string}
     * @memberof PaymentPref
     */
    'verification_status': PaymentPrefVerificationStatusEnum | null;
    /**
     * For wire payment method only, whether the wire payment pref has an intermediary bank that wires transfer through.
     * @type {boolean}
     * @memberof PaymentPref
     */
    'wire_has_intermediary'?: boolean | null;
    /**
     * For wire payment method only, whether the wire payment pref has an international beneficiary address
     * @type {boolean}
     * @memberof PaymentPref
     */
    'wire_has_international_beneficiary_address'?: boolean | null;
    /**
     *
     * @type {PaymentPrefPaymentPrefWire}
     * @memberof PaymentPref
     */
    'payment_pref_wire'?: PaymentPrefPaymentPrefWire | null;
    /**
     *
     * @type {PaymentPrefPaymentPrefAch}
     * @memberof PaymentPref
     */
    'payment_pref_ach'?: PaymentPrefPaymentPrefAch | null;
}
export declare const PaymentPrefPaymentMethodEnum: {
    readonly Ach: "ACH";
    readonly Check: "Check";
    readonly Wire: "Wire";
};
export type PaymentPrefPaymentMethodEnum = typeof PaymentPrefPaymentMethodEnum[keyof typeof PaymentPrefPaymentMethodEnum];
export declare const PaymentPrefVerificationStatusEnum: {
    readonly Verified: "verified";
    readonly Unverified: "unverified";
    readonly Error: "error";
};
export type PaymentPrefVerificationStatusEnum = typeof PaymentPrefVerificationStatusEnum[keyof typeof PaymentPrefVerificationStatusEnum];
/**
 * A payment preference containing ach specific info. This will only have valid fields if payment pref method is ach. Otherwise, it will contain an empty object
 * @export
 * @interface PaymentPrefPaymentPrefAch
 */
export interface PaymentPrefPaymentPrefAch {
    /**
     * Optional ach account name
     * @type {string}
     * @memberof PaymentPrefPaymentPrefAch
     */
    'ach_account_name'?: string | null;
    /**
     * Ach bank name
     * @type {string}
     * @memberof PaymentPrefPaymentPrefAch
     */
    'ach_bank_name': string;
    /**
     * ach account number
     * @type {string}
     * @memberof PaymentPrefPaymentPrefAch
     */
    'ach_account_number': string;
    /**
     * ach routing number
     * @type {string}
     * @memberof PaymentPrefPaymentPrefAch
     */
    'ach_routing_number': string;
    /**
     * ach account type
     * @type {string}
     * @memberof PaymentPrefPaymentPrefAch
     */
    'ach_account_type': string;
    /**
     * ach account ownership
     * @type {string}
     * @memberof PaymentPrefPaymentPrefAch
     */
    'ach_account_ownership'?: string | null;
    /**
     * ach account ownership
     * @type {string}
     * @memberof PaymentPrefPaymentPrefAch
     */
    'ach_additional_instructions'?: string | null;
    /**
     *
     * @type {PaymentPrefPaymentPrefAchAchDomicileAddress}
     * @memberof PaymentPrefPaymentPrefAch
     */
    'ach_domicile_address'?: PaymentPrefPaymentPrefAchAchDomicileAddress | null;
}
/**
 *
 * @export
 * @interface PaymentPrefPaymentPrefAchAchDomicileAddress
 */
export interface PaymentPrefPaymentPrefAchAchDomicileAddress {
    /**
     *
     * @type {string}
     * @memberof PaymentPrefPaymentPrefAchAchDomicileAddress
     */
    'street1'?: string | null;
    /**
     *
     * @type {string}
     * @memberof PaymentPrefPaymentPrefAchAchDomicileAddress
     */
    'street2'?: string | null;
    /**
     *
     * @type {string}
     * @memberof PaymentPrefPaymentPrefAchAchDomicileAddress
     */
    'street3'?: string | null;
    /**
     *
     * @type {string}
     * @memberof PaymentPrefPaymentPrefAchAchDomicileAddress
     */
    'city'?: string | null;
    /**
     *
     * @type {string}
     * @memberof PaymentPrefPaymentPrefAchAchDomicileAddress
     */
    'state'?: string | null;
    /**
     *
     * @type {string}
     * @memberof PaymentPrefPaymentPrefAchAchDomicileAddress
     */
    'region'?: string | null;
    /**
     *
     * @type {string}
     * @memberof PaymentPrefPaymentPrefAchAchDomicileAddress
     */
    'postal_code'?: string | null;
    /**
     *
     * @type {string}
     * @memberof PaymentPrefPaymentPrefAchAchDomicileAddress
     */
    'country'?: string | null;
}
/**
 * A payment preference containing wire specific info. This will only have valid fields if payment pref method is wire.
 * @export
 * @interface PaymentPrefPaymentPrefWire
 */
export interface PaymentPrefPaymentPrefWire {
    /**
     * Optional wire beneficiary name
     * @type {string}
     * @memberof PaymentPrefPaymentPrefWire
     */
    'wire_beneficiary_name'?: string | null;
    /**
     * Wire beneficiary account number
     * @type {string}
     * @memberof PaymentPrefPaymentPrefWire
     */
    'wire_beneficiary_account_number': string;
    /**
     * Wire bank name
     * @type {string}
     * @memberof PaymentPrefPaymentPrefWire
     */
    'wire_bank_name': string;
    /**
     * Wire aba number (usually routing number)
     * @type {string}
     * @memberof PaymentPrefPaymentPrefWire
     */
    'wire_aba_number': string;
    /**
     * For wire payment method only, whether the wire payment pref has an intermediary bank that wires transfer through.
     * @type {boolean}
     * @memberof PaymentPrefPaymentPrefWire
     */
    'wire_has_intermediary': boolean;
    /**
     * Boolean to determine whether a wire has an international beneficiary address. Can be None if not applicable.
     * @type {boolean}
     * @memberof PaymentPrefPaymentPrefWire
     */
    'wire_has_international_beneficiary_address'?: boolean | null;
    /**
     * Wire reference to beneficiary
     * @type {string}
     * @memberof PaymentPrefPaymentPrefWire
     */
    'wire_reference_to_beneficiary'?: string | null;
    /**
     *
     * @type {{ [key: string]: any; }}
     * @memberof PaymentPrefPaymentPrefWire
     */
    'wire_obi'?: {
        [key: string]: any;
    } | null;
    /**
     *
     * @type {{ [key: string]: any; }}
     * @memberof PaymentPrefPaymentPrefWire
     */
    'wire_bbi'?: {
        [key: string]: any;
    } | null;
    /**
     *
     * @type {PaymentPrefPaymentPrefWireWireBeneficiaryAddress}
     * @memberof PaymentPrefPaymentPrefWire
     */
    'wire_beneficiary_address': PaymentPrefPaymentPrefWireWireBeneficiaryAddress;
}
/**
 *
 * @export
 * @interface PaymentPrefPaymentPrefWireWireBeneficiaryAddress
 */
export interface PaymentPrefPaymentPrefWireWireBeneficiaryAddress {
    /**
     *
     * @type {string}
     * @memberof PaymentPrefPaymentPrefWireWireBeneficiaryAddress
     */
    'street1'?: string | null;
    /**
     *
     * @type {string}
     * @memberof PaymentPrefPaymentPrefWireWireBeneficiaryAddress
     */
    'street2'?: string | null;
    /**
     *
     * @type {string}
     * @memberof PaymentPrefPaymentPrefWireWireBeneficiaryAddress
     */
    'street3'?: string | null;
    /**
     *
     * @type {string}
     * @memberof PaymentPrefPaymentPrefWireWireBeneficiaryAddress
     */
    'city'?: string | null;
    /**
     *
     * @type {string}
     * @memberof PaymentPrefPaymentPrefWireWireBeneficiaryAddress
     */
    'state'?: string | null;
    /**
     *
     * @type {string}
     * @memberof PaymentPrefPaymentPrefWireWireBeneficiaryAddress
     */
    'region'?: string | null;
    /**
     *
     * @type {string}
     * @memberof PaymentPrefPaymentPrefWireWireBeneficiaryAddress
     */
    'postal_code'?: string | null;
    /**
     *
     * @type {string}
     * @memberof PaymentPrefPaymentPrefWireWireBeneficiaryAddress
     */
    'country'?: string | null;
}
/**
 * String representation of Permission enum
 * @export
 * @enum {string}
 */
export declare const Permission: {
    readonly Create: "create";
    readonly Read: "read";
    readonly Update: "update";
    readonly Delete: "delete";
    readonly Administer: "administer";
    readonly Download: "download";
    readonly ManagePortal: "manage_portal";
    readonly LimitedRead: "limited_read";
    readonly PublishTransactions: "publish_transactions";
    readonly LimitedEdit: "limited_edit";
};
export type Permission = typeof Permission[keyof typeof Permission];
/**
 * A position in an investment entity.
 * @export
 * @interface Position
 */
export interface Position {
    /**
     *
     * @type {number}
     * @memberof Position
     */
    'id': number;
    /**
     * Name of the position.
     * @type {string}
     * @memberof Position
     */
    'name': string;
    /**
     * Amount that this position has committed to invest.
     * @type {number}
     * @memberof Position
     */
    'amount_committed': number | null;
    /**
     * Percentage of ownership in the investment.
     * @type {number}
     * @memberof Position
     */
    'percent_ownership': number | null;
    /**
     * Name of the position\'s investor group.
     * @type {string}
     * @memberof Position
     */
    'investor_group_name': string;
    /**
     * Capital account balances of position
     * @type {Array<PositionCabsInner>}
     * @memberof Position
     */
    'cabs': Array<PositionCabsInner> | null;
    /**
     *
     * @type {Array<PositionContributionsInner>}
     * @memberof Position
     */
    'contributions'?: Array<PositionContributionsInner> | null;
    /**
     *
     * @type {Array<PositionContributionsInner>}
     * @memberof Position
     */
    'distributions'?: Array<PositionContributionsInner> | null;
    /**
     *
     * @type {Array<PositionNetIncomeSumByTypeInner>}
     * @memberof Position
     */
    'net_income_sum_by_type'?: Array<PositionNetIncomeSumByTypeInner> | null;
}
/**
 * A position with account, investor group, and investment entity ids.
 * @export
 * @interface PositionAttribute
 */
export interface PositionAttribute {
    /**
     *
     * @type {number}
     * @memberof PositionAttribute
     */
    'id': number;
    /**
     *
     * @type {number}
     * @memberof PositionAttribute
     */
    'account_id': number;
    /**
     *
     * @type {number}
     * @memberof PositionAttribute
     */
    'investment_entity_id': number;
    /**
     *
     * @type {number}
     * @memberof PositionAttribute
     */
    'investor_group_id': number;
}
/**
 *
 * @export
 * @interface PositionCabsInner
 */
export interface PositionCabsInner {
    /**
     *
     * @type {string}
     * @memberof PositionCabsInner
     */
    'end': string;
    /**
     *
     * @type {number}
     * @memberof PositionCabsInner
     */
    'balance': number;
}
/**
 *
 * @export
 * @interface PositionContributionsInner
 */
export interface PositionContributionsInner {
    /**
     *
     * @type {string}
     * @memberof PositionContributionsInner
     */
    'start_date': string | null;
    /**
     *
     * @type {string}
     * @memberof PositionContributionsInner
     */
    'end_date': string;
    /**
     *
     * @type {number}
     * @memberof PositionContributionsInner
     */
    'amount': number;
}
/**
 *
 * @export
 * @interface PositionNetIncomeSumByTypeInner
 */
export interface PositionNetIncomeSumByTypeInner {
    /**
     *
     * @type {string}
     * @memberof PositionNetIncomeSumByTypeInner
     */
    'start_date': string | null;
    /**
     *
     * @type {string}
     * @memberof PositionNetIncomeSumByTypeInner
     */
    'end_date': string;
    /**
     *
     * @type {number}
     * @memberof PositionNetIncomeSumByTypeInner
     */
    'amount': number;
    /**
     *
     * @type {number}
     * @memberof PositionNetIncomeSumByTypeInner
     */
    'type_id': number;
}
/**
 * Response status
 * @export
 * @enum {string}
 */
export declare const ResponseStatus: {
    readonly Success: "Success";
    readonly Failure: "Failure";
};
export type ResponseStatus = typeof ResponseStatus[keyof typeof ResponseStatus];
/**
 *
 * @export
 * @interface ServerError
 */
export interface ServerError {
    /**
     *
     * @type {string}
     * @memberof ServerError
     */
    'message': string;
    /**
     *
     * @type {string}
     * @memberof ServerError
     */
    'exception'?: string;
}
/**
 *
 * @export
 * @interface TransactionRollupStatus
 */
export interface TransactionRollupStatus {
    /**
     * The batch ID associated with the transaction rollup
     * @type {string}
     * @memberof TransactionRollupStatus
     */
    'sync_id'?: string;
    /**
     * The date and time the status was last updated
     * @type {string}
     * @memberof TransactionRollupStatus
     */
    'updated_at'?: string;
    /**
     * The current status of the transaction rollup
     * @type {string}
     * @memberof TransactionRollupStatus
     */
    'status'?: TransactionRollupStatusStatusEnum;
}
export declare const TransactionRollupStatusStatusEnum: {
    readonly Received: "received";
    readonly Completed: "completed";
    readonly Failed: "failed";
};
export type TransactionRollupStatusStatusEnum = typeof TransactionRollupStatusStatusEnum[keyof typeof TransactionRollupStatusStatusEnum];
/**
 * Feature flags used to control application or arena wide availability of features. Note: presently only supports boolean (enabled/disabled) feature flags.
 * @export
 * @interface UpdateFeatureFlag
 */
export interface UpdateFeatureFlag {
    /**
     * Whether the feature flag is enabled or disabled.
     * @type {boolean}
     * @memberof UpdateFeatureFlag
     */
    'is_enabled': boolean;
}
/**
 * An object provided when updating (patch) payment prefs. Note: presently only supports verification_status.
 * @export
 * @interface UpdatePaymentPrefOptions
 */
export interface UpdatePaymentPrefOptions {
    /**
     * Verification status for the payment preference: verified, unverified or error.
     * @type {string}
     * @memberof UpdatePaymentPrefOptions
     */
    'verification_status'?: UpdatePaymentPrefOptionsVerificationStatusEnum | null;
}
export declare const UpdatePaymentPrefOptionsVerificationStatusEnum: {
    readonly Verified: "verified";
    readonly Unverified: "unverified";
    readonly Error: "error";
};
export type UpdatePaymentPrefOptionsVerificationStatusEnum = typeof UpdatePaymentPrefOptionsVerificationStatusEnum[keyof typeof UpdatePaymentPrefOptionsVerificationStatusEnum];
/**
 * A User object.
 * @export
 * @interface User
 */
export interface User {
    /**
     *
     * @type {number}
     * @memberof User
     */
    'id': number;
    /**
     * Global ID for user.
     * @type {string}
     * @memberof User
     */
    'global_id': string;
    /**
     * User first name.
     * @type {string}
     * @memberof User
     */
    'first_name': string;
    /**
     * User last name.
     * @type {string}
     * @memberof User
     */
    'last_name': string;
    /**
     * User email.
     * @type {string}
     * @memberof User
     */
    'email_address': string;
}
/**
 * AccountsApi - axios parameter creator
 * @export
 */
export declare const AccountsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * API for account contact bulk removal
     * @summary API for account contact bulk removal
     * @param {BulkAccountContactRemoveRequestBody} [bulkAccountContactRemoveRequestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountContactBulkRemove: (bulkAccountContactRemoveRequestBody?: BulkAccountContactRemoveRequestBody, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * API for account contact bulk update
     * @summary API for account contact bulk update
     * @param {BulkAccountContactUpdateRequestBody} [bulkAccountContactUpdateRequestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountContactBulkUpdate: (bulkAccountContactUpdateRequestBody?: BulkAccountContactUpdateRequestBody, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * API for account contact change notification
     * @summary API for account contact change notification
     * @param {number} userId User ID of the resource
     * @param {BulkAccountContactChangeNotify} [bulkAccountContactChangeNotify]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountContactChangeNotify: (userId: number, bulkAccountContactChangeNotify?: BulkAccountContactChangeNotify, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * AccountsApi - functional programming interface
 * @export
 */
export declare const AccountsApiFp: (configuration?: Configuration) => {
    /**
     * API for account contact bulk removal
     * @summary API for account contact bulk removal
     * @param {BulkAccountContactRemoveRequestBody} [bulkAccountContactRemoveRequestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountContactBulkRemove(bulkAccountContactRemoveRequestBody?: BulkAccountContactRemoveRequestBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AccountContactBulkSuccessResponse>>>;
    /**
     * API for account contact bulk update
     * @summary API for account contact bulk update
     * @param {BulkAccountContactUpdateRequestBody} [bulkAccountContactUpdateRequestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountContactBulkUpdate(bulkAccountContactUpdateRequestBody?: BulkAccountContactUpdateRequestBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AccountContactBulkSuccessResponse>>>;
    /**
     * API for account contact change notification
     * @summary API for account contact change notification
     * @param {number} userId User ID of the resource
     * @param {BulkAccountContactChangeNotify} [bulkAccountContactChangeNotify]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountContactChangeNotify(userId: number, bulkAccountContactChangeNotify?: BulkAccountContactChangeNotify, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * AccountsApi - factory interface
 * @export
 */
export declare const AccountsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * API for account contact bulk removal
     * @summary API for account contact bulk removal
     * @param {BulkAccountContactRemoveRequestBody} [bulkAccountContactRemoveRequestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountContactBulkRemove(bulkAccountContactRemoveRequestBody?: BulkAccountContactRemoveRequestBody, options?: RawAxiosRequestConfig): AxiosPromise<Array<AccountContactBulkSuccessResponse>>;
    /**
     * API for account contact bulk update
     * @summary API for account contact bulk update
     * @param {BulkAccountContactUpdateRequestBody} [bulkAccountContactUpdateRequestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountContactBulkUpdate(bulkAccountContactUpdateRequestBody?: BulkAccountContactUpdateRequestBody, options?: RawAxiosRequestConfig): AxiosPromise<Array<AccountContactBulkSuccessResponse>>;
    /**
     * API for account contact change notification
     * @summary API for account contact change notification
     * @param {number} userId User ID of the resource
     * @param {BulkAccountContactChangeNotify} [bulkAccountContactChangeNotify]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountContactChangeNotify(userId: number, bulkAccountContactChangeNotify?: BulkAccountContactChangeNotify, options?: RawAxiosRequestConfig): AxiosPromise<void>;
};
/**
 * AccountsApi - object-oriented interface
 * @export
 * @class AccountsApi
 * @extends {BaseAPI}
 */
export declare class AccountsApi extends BaseAPI {
    /**
     * API for account contact bulk removal
     * @summary API for account contact bulk removal
     * @param {BulkAccountContactRemoveRequestBody} [bulkAccountContactRemoveRequestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    accountContactBulkRemove(bulkAccountContactRemoveRequestBody?: BulkAccountContactRemoveRequestBody, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<AccountContactBulkSuccessResponse[], any>>;
    /**
     * API for account contact bulk update
     * @summary API for account contact bulk update
     * @param {BulkAccountContactUpdateRequestBody} [bulkAccountContactUpdateRequestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    accountContactBulkUpdate(bulkAccountContactUpdateRequestBody?: BulkAccountContactUpdateRequestBody, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<AccountContactBulkSuccessResponse[], any>>;
    /**
     * API for account contact change notification
     * @summary API for account contact change notification
     * @param {number} userId User ID of the resource
     * @param {BulkAccountContactChangeNotify} [bulkAccountContactChangeNotify]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    accountContactChangeNotify(userId: number, bulkAccountContactChangeNotify?: BulkAccountContactChangeNotify, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
/**
 * ArenasApi - axios parameter creator
 * @export
 */
export declare const ArenasApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Get an un-paginated list of allocation types.
     * @summary Get a list of allocation types for the given arena
     * @param {number} arenaId Id of the arena to operate within
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllocationTypes: (arenaId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get an arena by ID.
     * @summary Get arena
     * @param {number} id Id of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getArena: (id: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get allocationTypes for a given arena by ID
     * @summary Get allocation types for a given arena by ID
     * @param {number} arenaId Id of the arena to operate within
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getArenaNetIncomeTypes: (arenaId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get payment settings for a given arena by ID
     * @summary Get payment settings for a given arena
     * @param {number} arenaId Id of the arena to operate within
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getArenaPaymentSettings: (arenaId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get an un-paginated list of all arenas, optionally filtered by a list of arena IDs.
     * @summary Get a list of Arenas
     * @param {Array<number>} [ids] Optional comma separated list of ids to filter resources by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getArenas: (ids?: Array<number>, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ArenasApi - functional programming interface
 * @export
 */
export declare const ArenasApiFp: (configuration?: Configuration) => {
    /**
     * Get an un-paginated list of allocation types.
     * @summary Get a list of allocation types for the given arena
     * @param {number} arenaId Id of the arena to operate within
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllocationTypes(arenaId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AllocationType>>>;
    /**
     * Get an arena by ID.
     * @summary Get arena
     * @param {number} id Id of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getArena(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Arena>>;
    /**
     * Get allocationTypes for a given arena by ID
     * @summary Get allocation types for a given arena by ID
     * @param {number} arenaId Id of the arena to operate within
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getArenaNetIncomeTypes(arenaId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ArenaNetIncomeType>>>;
    /**
     * Get payment settings for a given arena by ID
     * @summary Get payment settings for a given arena
     * @param {number} arenaId Id of the arena to operate within
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getArenaPaymentSettings(arenaId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ArenaPaymentSettings>>;
    /**
     * Get an un-paginated list of all arenas, optionally filtered by a list of arena IDs.
     * @summary Get a list of Arenas
     * @param {Array<number>} [ids] Optional comma separated list of ids to filter resources by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getArenas(ids?: Array<number>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Arena>>>;
};
/**
 * ArenasApi - factory interface
 * @export
 */
export declare const ArenasApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Get an un-paginated list of allocation types.
     * @summary Get a list of allocation types for the given arena
     * @param {number} arenaId Id of the arena to operate within
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllocationTypes(arenaId: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<AllocationType>>;
    /**
     * Get an arena by ID.
     * @summary Get arena
     * @param {number} id Id of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getArena(id: number, options?: RawAxiosRequestConfig): AxiosPromise<Arena>;
    /**
     * Get allocationTypes for a given arena by ID
     * @summary Get allocation types for a given arena by ID
     * @param {number} arenaId Id of the arena to operate within
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getArenaNetIncomeTypes(arenaId: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<ArenaNetIncomeType>>;
    /**
     * Get payment settings for a given arena by ID
     * @summary Get payment settings for a given arena
     * @param {number} arenaId Id of the arena to operate within
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getArenaPaymentSettings(arenaId: number, options?: RawAxiosRequestConfig): AxiosPromise<ArenaPaymentSettings>;
    /**
     * Get an un-paginated list of all arenas, optionally filtered by a list of arena IDs.
     * @summary Get a list of Arenas
     * @param {Array<number>} [ids] Optional comma separated list of ids to filter resources by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getArenas(ids?: Array<number>, options?: RawAxiosRequestConfig): AxiosPromise<Array<Arena>>;
};
/**
 * ArenasApi - object-oriented interface
 * @export
 * @class ArenasApi
 * @extends {BaseAPI}
 */
export declare class ArenasApi extends BaseAPI {
    /**
     * Get an un-paginated list of allocation types.
     * @summary Get a list of allocation types for the given arena
     * @param {number} arenaId Id of the arena to operate within
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArenasApi
     */
    getAllocationTypes(arenaId: number, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<AllocationType[], any>>;
    /**
     * Get an arena by ID.
     * @summary Get arena
     * @param {number} id Id of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArenasApi
     */
    getArena(id: number, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Arena, any>>;
    /**
     * Get allocationTypes for a given arena by ID
     * @summary Get allocation types for a given arena by ID
     * @param {number} arenaId Id of the arena to operate within
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArenasApi
     */
    getArenaNetIncomeTypes(arenaId: number, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ArenaNetIncomeType[], any>>;
    /**
     * Get payment settings for a given arena by ID
     * @summary Get payment settings for a given arena
     * @param {number} arenaId Id of the arena to operate within
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArenasApi
     */
    getArenaPaymentSettings(arenaId: number, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ArenaPaymentSettings, any>>;
    /**
     * Get an un-paginated list of all arenas, optionally filtered by a list of arena IDs.
     * @summary Get a list of Arenas
     * @param {Array<number>} [ids] Optional comma separated list of ids to filter resources by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArenasApi
     */
    getArenas(ids?: Array<number>, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Arena[], any>>;
}
/**
 * BankAccountApi - axios parameter creator
 * @export
 */
export declare const BankAccountApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Get the name of the provided bank_account_id
     * @summary Get a bank account (BankAccountModel)
     * @param {number} id Id of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBankAccount: (id: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * BankAccountApi - functional programming interface
 * @export
 */
export declare const BankAccountApiFp: (configuration?: Configuration) => {
    /**
     * Get the name of the provided bank_account_id
     * @summary Get a bank account (BankAccountModel)
     * @param {number} id Id of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBankAccount(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BankAccount>>;
};
/**
 * BankAccountApi - factory interface
 * @export
 */
export declare const BankAccountApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Get the name of the provided bank_account_id
     * @summary Get a bank account (BankAccountModel)
     * @param {number} id Id of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBankAccount(id: number, options?: RawAxiosRequestConfig): AxiosPromise<BankAccount>;
};
/**
 * BankAccountApi - object-oriented interface
 * @export
 * @class BankAccountApi
 * @extends {BaseAPI}
 */
export declare class BankAccountApi extends BaseAPI {
    /**
     * Get the name of the provided bank_account_id
     * @summary Get a bank account (BankAccountModel)
     * @param {number} id Id of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankAccountApi
     */
    getBankAccount(id: number, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<BankAccount, any>>;
}
/**
 * DiligencesApi - axios parameter creator
 * @export
 */
export declare const DiligencesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Create a diligence and underlying KYC/watchlists. This method is considered deprecated and used to bridge the gap until the compliance service API is fully available.
     * @summary Create a diligence object and underlying KYC/watchlists
     * @param {CreateDiligence} [createDiligence]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createDiligences: (createDiligence?: CreateDiligence, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get an un-paginated list of diligences
     * @summary Get a list of diligences
     * @param {DiligenceCategory} diligenceCategory Category of diligences to filter on
     * @param {ObjectType} [objectType] Optional object_type to filter by. Should match an ObjectType enum.
     * @param {number} [objectId] Object ID to filter on
     * @param {Array<number>} [objectIds] Object IDs to filter on
     * @param {DiligenceType} [diligenceType] Type of Diligence to filter on
     * @param {DiligenceStatus} [diligenceStatus] Status of diligence in submission workflow.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDiligences: (diligenceCategory: DiligenceCategory, objectType?: ObjectType, objectId?: number, objectIds?: Array<number>, diligenceType?: DiligenceType, diligenceStatus?: DiligenceStatus, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * DiligencesApi - functional programming interface
 * @export
 */
export declare const DiligencesApiFp: (configuration?: Configuration) => {
    /**
     * Create a diligence and underlying KYC/watchlists. This method is considered deprecated and used to bridge the gap until the compliance service API is fully available.
     * @summary Create a diligence object and underlying KYC/watchlists
     * @param {CreateDiligence} [createDiligence]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createDiligences(createDiligence?: CreateDiligence, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Diligence>>;
    /**
     * Get an un-paginated list of diligences
     * @summary Get a list of diligences
     * @param {DiligenceCategory} diligenceCategory Category of diligences to filter on
     * @param {ObjectType} [objectType] Optional object_type to filter by. Should match an ObjectType enum.
     * @param {number} [objectId] Object ID to filter on
     * @param {Array<number>} [objectIds] Object IDs to filter on
     * @param {DiligenceType} [diligenceType] Type of Diligence to filter on
     * @param {DiligenceStatus} [diligenceStatus] Status of diligence in submission workflow.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDiligences(diligenceCategory: DiligenceCategory, objectType?: ObjectType, objectId?: number, objectIds?: Array<number>, diligenceType?: DiligenceType, diligenceStatus?: DiligenceStatus, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Diligence>>>;
};
/**
 * DiligencesApi - factory interface
 * @export
 */
export declare const DiligencesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Create a diligence and underlying KYC/watchlists. This method is considered deprecated and used to bridge the gap until the compliance service API is fully available.
     * @summary Create a diligence object and underlying KYC/watchlists
     * @param {CreateDiligence} [createDiligence]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createDiligences(createDiligence?: CreateDiligence, options?: RawAxiosRequestConfig): AxiosPromise<Diligence>;
    /**
     * Get an un-paginated list of diligences
     * @summary Get a list of diligences
     * @param {DiligenceCategory} diligenceCategory Category of diligences to filter on
     * @param {ObjectType} [objectType] Optional object_type to filter by. Should match an ObjectType enum.
     * @param {number} [objectId] Object ID to filter on
     * @param {Array<number>} [objectIds] Object IDs to filter on
     * @param {DiligenceType} [diligenceType] Type of Diligence to filter on
     * @param {DiligenceStatus} [diligenceStatus] Status of diligence in submission workflow.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDiligences(diligenceCategory: DiligenceCategory, objectType?: ObjectType, objectId?: number, objectIds?: Array<number>, diligenceType?: DiligenceType, diligenceStatus?: DiligenceStatus, options?: RawAxiosRequestConfig): AxiosPromise<Array<Diligence>>;
};
/**
 * DiligencesApi - object-oriented interface
 * @export
 * @class DiligencesApi
 * @extends {BaseAPI}
 */
export declare class DiligencesApi extends BaseAPI {
    /**
     * Create a diligence and underlying KYC/watchlists. This method is considered deprecated and used to bridge the gap until the compliance service API is fully available.
     * @summary Create a diligence object and underlying KYC/watchlists
     * @param {CreateDiligence} [createDiligence]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiligencesApi
     */
    createDiligences(createDiligence?: CreateDiligence, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Diligence, any>>;
    /**
     * Get an un-paginated list of diligences
     * @summary Get a list of diligences
     * @param {DiligenceCategory} diligenceCategory Category of diligences to filter on
     * @param {ObjectType} [objectType] Optional object_type to filter by. Should match an ObjectType enum.
     * @param {number} [objectId] Object ID to filter on
     * @param {Array<number>} [objectIds] Object IDs to filter on
     * @param {DiligenceType} [diligenceType] Type of Diligence to filter on
     * @param {DiligenceStatus} [diligenceStatus] Status of diligence in submission workflow.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiligencesApi
     */
    getDiligences(diligenceCategory: DiligenceCategory, objectType?: ObjectType, objectId?: number, objectIds?: Array<number>, diligenceType?: DiligenceType, diligenceStatus?: DiligenceStatus, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Diligence[], any>>;
}
/**
 * DistributionApi - axios parameter creator
 * @export
 */
export declare const DistributionApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Get a distribution by the given distribution id. This does not handle auth.
     * @summary Get distribution
     * @param {number} id Id of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDistribution: (id: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * DistributionApi - functional programming interface
 * @export
 */
export declare const DistributionApiFp: (configuration?: Configuration) => {
    /**
     * Get a distribution by the given distribution id. This does not handle auth.
     * @summary Get distribution
     * @param {number} id Id of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDistribution(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Distribution>>;
};
/**
 * DistributionApi - factory interface
 * @export
 */
export declare const DistributionApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Get a distribution by the given distribution id. This does not handle auth.
     * @summary Get distribution
     * @param {number} id Id of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDistribution(id: number, options?: RawAxiosRequestConfig): AxiosPromise<Distribution>;
};
/**
 * DistributionApi - object-oriented interface
 * @export
 * @class DistributionApi
 * @extends {BaseAPI}
 */
export declare class DistributionApi extends BaseAPI {
    /**
     * Get a distribution by the given distribution id. This does not handle auth.
     * @summary Get distribution
     * @param {number} id Id of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DistributionApi
     */
    getDistribution(id: number, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Distribution, any>>;
}
/**
 * DistributionBatchesApi - axios parameter creator
 * @export
 */
export declare const DistributionBatchesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Get a distribution batch by ID. This does not handle auth checks.
     * @summary Get distribution batch no authorization checks
     * @param {number} id Id of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDistributionBatch: (id: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get distributions for a distribution batch by distribution batch ID. This does not handle auth.
     * @summary Get distributions for a distribution batch not authorization checks
     * @param {number} id Id of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDistributionsForDistributionBatch: (id: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * DistributionBatchesApi - functional programming interface
 * @export
 */
export declare const DistributionBatchesApiFp: (configuration?: Configuration) => {
    /**
     * Get a distribution batch by ID. This does not handle auth checks.
     * @summary Get distribution batch no authorization checks
     * @param {number} id Id of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDistributionBatch(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DistributionBatch>>;
    /**
     * Get distributions for a distribution batch by distribution batch ID. This does not handle auth.
     * @summary Get distributions for a distribution batch not authorization checks
     * @param {number} id Id of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDistributionsForDistributionBatch(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Distribution>>>;
};
/**
 * DistributionBatchesApi - factory interface
 * @export
 */
export declare const DistributionBatchesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Get a distribution batch by ID. This does not handle auth checks.
     * @summary Get distribution batch no authorization checks
     * @param {number} id Id of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDistributionBatch(id: number, options?: RawAxiosRequestConfig): AxiosPromise<DistributionBatch>;
    /**
     * Get distributions for a distribution batch by distribution batch ID. This does not handle auth.
     * @summary Get distributions for a distribution batch not authorization checks
     * @param {number} id Id of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDistributionsForDistributionBatch(id: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<Distribution>>;
};
/**
 * DistributionBatchesApi - object-oriented interface
 * @export
 * @class DistributionBatchesApi
 * @extends {BaseAPI}
 */
export declare class DistributionBatchesApi extends BaseAPI {
    /**
     * Get a distribution batch by ID. This does not handle auth checks.
     * @summary Get distribution batch no authorization checks
     * @param {number} id Id of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DistributionBatchesApi
     */
    getDistributionBatch(id: number, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<DistributionBatch, any>>;
    /**
     * Get distributions for a distribution batch by distribution batch ID. This does not handle auth.
     * @summary Get distributions for a distribution batch not authorization checks
     * @param {number} id Id of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DistributionBatchesApi
     */
    getDistributionsForDistributionBatch(id: number, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Distribution[], any>>;
}
/**
 * EntitiesApi - axios parameter creator
 * @export
 */
export declare const EntitiesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Get an un-paginated list of investment entities with their positions.
     * @summary Get a list of investment entities with their positions in an arena
     * @param {number} arenaId Id of the arena to operate within
     * @param {Array<string>} [entityIds] Comma separated list of entity ids.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntitiesWithPositions: (arenaId: number, entityIds?: Array<string>, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get the name of the provided entity_id
     * @summary Get an entity (AccountModel)
     * @param {number} id Id of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntity: (id: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get an un-paginated list of entity ids filtered by query params
     * @summary Get entity ids
     * @param {boolean} [isFundAdmin] Flag to fetch FA only resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityIds: (isFundAdmin?: boolean, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get an un-paginated list of positions in an investment entity.
     * @summary Get a list of positions in an investment entity.
     * @param {number} id Id of the resource
     * @param {Array<string>} [cabPeriodEnds] Comma separated list of dates for calculating cab. Date format should be YYYY-MM-DDThh:mm:ssZ.
     * @param {Array<string>} [transactionDates] Comma separated list of dates. Format should be YYYY-MM-DDThh:mm:ssZ.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityPositions: (id: number, cabPeriodEnds?: Array<string>, transactionDates?: Array<string>, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * EntitiesApi - functional programming interface
 * @export
 */
export declare const EntitiesApiFp: (configuration?: Configuration) => {
    /**
     * Get an un-paginated list of investment entities with their positions.
     * @summary Get a list of investment entities with their positions in an arena
     * @param {number} arenaId Id of the arena to operate within
     * @param {Array<string>} [entityIds] Comma separated list of entity ids.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntitiesWithPositions(arenaId: number, entityIds?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DetailedEntity>>>;
    /**
     * Get the name of the provided entity_id
     * @summary Get an entity (AccountModel)
     * @param {number} id Id of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntity(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Entity>>;
    /**
     * Get an un-paginated list of entity ids filtered by query params
     * @summary Get entity ids
     * @param {boolean} [isFundAdmin] Flag to fetch FA only resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityIds(isFundAdmin?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<number>>>;
    /**
     * Get an un-paginated list of positions in an investment entity.
     * @summary Get a list of positions in an investment entity.
     * @param {number} id Id of the resource
     * @param {Array<string>} [cabPeriodEnds] Comma separated list of dates for calculating cab. Date format should be YYYY-MM-DDThh:mm:ssZ.
     * @param {Array<string>} [transactionDates] Comma separated list of dates. Format should be YYYY-MM-DDThh:mm:ssZ.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityPositions(id: number, cabPeriodEnds?: Array<string>, transactionDates?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Position>>>;
};
/**
 * EntitiesApi - factory interface
 * @export
 */
export declare const EntitiesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Get an un-paginated list of investment entities with their positions.
     * @summary Get a list of investment entities with their positions in an arena
     * @param {number} arenaId Id of the arena to operate within
     * @param {Array<string>} [entityIds] Comma separated list of entity ids.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntitiesWithPositions(arenaId: number, entityIds?: Array<string>, options?: RawAxiosRequestConfig): AxiosPromise<Array<DetailedEntity>>;
    /**
     * Get the name of the provided entity_id
     * @summary Get an entity (AccountModel)
     * @param {number} id Id of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntity(id: number, options?: RawAxiosRequestConfig): AxiosPromise<Entity>;
    /**
     * Get an un-paginated list of entity ids filtered by query params
     * @summary Get entity ids
     * @param {boolean} [isFundAdmin] Flag to fetch FA only resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityIds(isFundAdmin?: boolean, options?: RawAxiosRequestConfig): AxiosPromise<Array<number>>;
    /**
     * Get an un-paginated list of positions in an investment entity.
     * @summary Get a list of positions in an investment entity.
     * @param {number} id Id of the resource
     * @param {Array<string>} [cabPeriodEnds] Comma separated list of dates for calculating cab. Date format should be YYYY-MM-DDThh:mm:ssZ.
     * @param {Array<string>} [transactionDates] Comma separated list of dates. Format should be YYYY-MM-DDThh:mm:ssZ.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityPositions(id: number, cabPeriodEnds?: Array<string>, transactionDates?: Array<string>, options?: RawAxiosRequestConfig): AxiosPromise<Array<Position>>;
};
/**
 * EntitiesApi - object-oriented interface
 * @export
 * @class EntitiesApi
 * @extends {BaseAPI}
 */
export declare class EntitiesApi extends BaseAPI {
    /**
     * Get an un-paginated list of investment entities with their positions.
     * @summary Get a list of investment entities with their positions in an arena
     * @param {number} arenaId Id of the arena to operate within
     * @param {Array<string>} [entityIds] Comma separated list of entity ids.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    getEntitiesWithPositions(arenaId: number, entityIds?: Array<string>, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<DetailedEntity[], any>>;
    /**
     * Get the name of the provided entity_id
     * @summary Get an entity (AccountModel)
     * @param {number} id Id of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    getEntity(id: number, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Entity, any>>;
    /**
     * Get an un-paginated list of entity ids filtered by query params
     * @summary Get entity ids
     * @param {boolean} [isFundAdmin] Flag to fetch FA only resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    getEntityIds(isFundAdmin?: boolean, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<number[], any>>;
    /**
     * Get an un-paginated list of positions in an investment entity.
     * @summary Get a list of positions in an investment entity.
     * @param {number} id Id of the resource
     * @param {Array<string>} [cabPeriodEnds] Comma separated list of dates for calculating cab. Date format should be YYYY-MM-DDThh:mm:ssZ.
     * @param {Array<string>} [transactionDates] Comma separated list of dates. Format should be YYYY-MM-DDThh:mm:ssZ.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    getEntityPositions(id: number, cabPeriodEnds?: Array<string>, transactionDates?: Array<string>, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Position[], any>>;
}
/**
 * FeatureFlagsApi - axios parameter creator
 * @export
 */
export declare const FeatureFlagsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Bulk update the state of arena feature flags.
     * @summary Bulk Update Arena Feature Flags
     * @param {number} arenaId Id of the arena to operate within
     * @param {BulkUpdateFeatureFlags} [bulkUpdateFeatureFlags] Fields used to update arena feature flags in bulk.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bulkUpdateArenaFeatureFlags: (arenaId: number, bulkUpdateFeatureFlags?: BulkUpdateFeatureFlags, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Bulk update the state of developer feature flags.
     * @summary Bulk Update Developer Feature Flags
     * @param {BulkUpdateFeatureFlags} [bulkUpdateFeatureFlags] Fields used to update developer feature flags in bulk.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bulkUpdateDeveloperFeatureFlags: (bulkUpdateFeatureFlags?: BulkUpdateFeatureFlags, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieves an arena feature flag by feature flag name and arena domain
     * @summary Arena Feature Flag
     * @param {number} arenaId Id of the arena to operate within
     * @param {string} featureFlagName Name of the feature flag to retrieve
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getArenaFeatureFlag: (arenaId: number, featureFlagName: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieves all arena-level feature flags for an arena.
     * @summary Feature Flags for Arena
     * @param {number} arenaId Id of the arena to operate within
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getArenaFeatureFlags: (arenaId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieves a developer feature flag by name.
     * @summary Developer Feature Flag
     * @param {string} featureFlagName Name of the feature flag to retrieve
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDeveloperFeatureFlag: (featureFlagName: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieves all developer feature flags.
     * @summary Developer Feature Flags
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDeveloperFeatureFlags: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update a developer feature flag
     * @summary Update Arena Feature Flag
     * @param {number} arenaId Id of the arena to operate within
     * @param {string} featureFlagName Name of the feature flag to retrieve
     * @param {UpdateFeatureFlag} [updateFeatureFlag] Fields used to update (patch) an arena feature flag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateArenaFeatureFlag: (arenaId: number, featureFlagName: string, updateFeatureFlag?: UpdateFeatureFlag, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update a developer feature flag
     * @summary Update Developer Feature Flag
     * @param {string} featureFlagName Name of the feature flag to retrieve
     * @param {UpdateFeatureFlag} [updateFeatureFlag] Fields used to update (patch) a developer feature flag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateDeveloperFeatureFlag: (featureFlagName: string, updateFeatureFlag?: UpdateFeatureFlag, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * FeatureFlagsApi - functional programming interface
 * @export
 */
export declare const FeatureFlagsApiFp: (configuration?: Configuration) => {
    /**
     * Bulk update the state of arena feature flags.
     * @summary Bulk Update Arena Feature Flags
     * @param {number} arenaId Id of the arena to operate within
     * @param {BulkUpdateFeatureFlags} [bulkUpdateFeatureFlags] Fields used to update arena feature flags in bulk.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bulkUpdateArenaFeatureFlags(arenaId: number, bulkUpdateFeatureFlags?: BulkUpdateFeatureFlags, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Bulk update the state of developer feature flags.
     * @summary Bulk Update Developer Feature Flags
     * @param {BulkUpdateFeatureFlags} [bulkUpdateFeatureFlags] Fields used to update developer feature flags in bulk.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bulkUpdateDeveloperFeatureFlags(bulkUpdateFeatureFlags?: BulkUpdateFeatureFlags, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Retrieves an arena feature flag by feature flag name and arena domain
     * @summary Arena Feature Flag
     * @param {number} arenaId Id of the arena to operate within
     * @param {string} featureFlagName Name of the feature flag to retrieve
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getArenaFeatureFlag(arenaId: number, featureFlagName: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeatureFlag>>;
    /**
     * Retrieves all arena-level feature flags for an arena.
     * @summary Feature Flags for Arena
     * @param {number} arenaId Id of the arena to operate within
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getArenaFeatureFlags(arenaId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FeatureFlag>>>;
    /**
     * Retrieves a developer feature flag by name.
     * @summary Developer Feature Flag
     * @param {string} featureFlagName Name of the feature flag to retrieve
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDeveloperFeatureFlag(featureFlagName: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeatureFlag>>;
    /**
     * Retrieves all developer feature flags.
     * @summary Developer Feature Flags
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDeveloperFeatureFlags(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FeatureFlag>>>;
    /**
     * Update a developer feature flag
     * @summary Update Arena Feature Flag
     * @param {number} arenaId Id of the arena to operate within
     * @param {string} featureFlagName Name of the feature flag to retrieve
     * @param {UpdateFeatureFlag} [updateFeatureFlag] Fields used to update (patch) an arena feature flag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateArenaFeatureFlag(arenaId: number, featureFlagName: string, updateFeatureFlag?: UpdateFeatureFlag, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeatureFlag>>;
    /**
     * Update a developer feature flag
     * @summary Update Developer Feature Flag
     * @param {string} featureFlagName Name of the feature flag to retrieve
     * @param {UpdateFeatureFlag} [updateFeatureFlag] Fields used to update (patch) a developer feature flag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateDeveloperFeatureFlag(featureFlagName: string, updateFeatureFlag?: UpdateFeatureFlag, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeatureFlag>>;
};
/**
 * FeatureFlagsApi - factory interface
 * @export
 */
export declare const FeatureFlagsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Bulk update the state of arena feature flags.
     * @summary Bulk Update Arena Feature Flags
     * @param {number} arenaId Id of the arena to operate within
     * @param {BulkUpdateFeatureFlags} [bulkUpdateFeatureFlags] Fields used to update arena feature flags in bulk.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bulkUpdateArenaFeatureFlags(arenaId: number, bulkUpdateFeatureFlags?: BulkUpdateFeatureFlags, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * Bulk update the state of developer feature flags.
     * @summary Bulk Update Developer Feature Flags
     * @param {BulkUpdateFeatureFlags} [bulkUpdateFeatureFlags] Fields used to update developer feature flags in bulk.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bulkUpdateDeveloperFeatureFlags(bulkUpdateFeatureFlags?: BulkUpdateFeatureFlags, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * Retrieves an arena feature flag by feature flag name and arena domain
     * @summary Arena Feature Flag
     * @param {number} arenaId Id of the arena to operate within
     * @param {string} featureFlagName Name of the feature flag to retrieve
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getArenaFeatureFlag(arenaId: number, featureFlagName: string, options?: RawAxiosRequestConfig): AxiosPromise<FeatureFlag>;
    /**
     * Retrieves all arena-level feature flags for an arena.
     * @summary Feature Flags for Arena
     * @param {number} arenaId Id of the arena to operate within
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getArenaFeatureFlags(arenaId: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<FeatureFlag>>;
    /**
     * Retrieves a developer feature flag by name.
     * @summary Developer Feature Flag
     * @param {string} featureFlagName Name of the feature flag to retrieve
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDeveloperFeatureFlag(featureFlagName: string, options?: RawAxiosRequestConfig): AxiosPromise<FeatureFlag>;
    /**
     * Retrieves all developer feature flags.
     * @summary Developer Feature Flags
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDeveloperFeatureFlags(options?: RawAxiosRequestConfig): AxiosPromise<Array<FeatureFlag>>;
    /**
     * Update a developer feature flag
     * @summary Update Arena Feature Flag
     * @param {number} arenaId Id of the arena to operate within
     * @param {string} featureFlagName Name of the feature flag to retrieve
     * @param {UpdateFeatureFlag} [updateFeatureFlag] Fields used to update (patch) an arena feature flag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateArenaFeatureFlag(arenaId: number, featureFlagName: string, updateFeatureFlag?: UpdateFeatureFlag, options?: RawAxiosRequestConfig): AxiosPromise<FeatureFlag>;
    /**
     * Update a developer feature flag
     * @summary Update Developer Feature Flag
     * @param {string} featureFlagName Name of the feature flag to retrieve
     * @param {UpdateFeatureFlag} [updateFeatureFlag] Fields used to update (patch) a developer feature flag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateDeveloperFeatureFlag(featureFlagName: string, updateFeatureFlag?: UpdateFeatureFlag, options?: RawAxiosRequestConfig): AxiosPromise<FeatureFlag>;
};
/**
 * FeatureFlagsApi - object-oriented interface
 * @export
 * @class FeatureFlagsApi
 * @extends {BaseAPI}
 */
export declare class FeatureFlagsApi extends BaseAPI {
    /**
     * Bulk update the state of arena feature flags.
     * @summary Bulk Update Arena Feature Flags
     * @param {number} arenaId Id of the arena to operate within
     * @param {BulkUpdateFeatureFlags} [bulkUpdateFeatureFlags] Fields used to update arena feature flags in bulk.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeatureFlagsApi
     */
    bulkUpdateArenaFeatureFlags(arenaId: number, bulkUpdateFeatureFlags?: BulkUpdateFeatureFlags, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Bulk update the state of developer feature flags.
     * @summary Bulk Update Developer Feature Flags
     * @param {BulkUpdateFeatureFlags} [bulkUpdateFeatureFlags] Fields used to update developer feature flags in bulk.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeatureFlagsApi
     */
    bulkUpdateDeveloperFeatureFlags(bulkUpdateFeatureFlags?: BulkUpdateFeatureFlags, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Retrieves an arena feature flag by feature flag name and arena domain
     * @summary Arena Feature Flag
     * @param {number} arenaId Id of the arena to operate within
     * @param {string} featureFlagName Name of the feature flag to retrieve
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeatureFlagsApi
     */
    getArenaFeatureFlag(arenaId: number, featureFlagName: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<FeatureFlag, any>>;
    /**
     * Retrieves all arena-level feature flags for an arena.
     * @summary Feature Flags for Arena
     * @param {number} arenaId Id of the arena to operate within
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeatureFlagsApi
     */
    getArenaFeatureFlags(arenaId: number, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<FeatureFlag[], any>>;
    /**
     * Retrieves a developer feature flag by name.
     * @summary Developer Feature Flag
     * @param {string} featureFlagName Name of the feature flag to retrieve
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeatureFlagsApi
     */
    getDeveloperFeatureFlag(featureFlagName: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<FeatureFlag, any>>;
    /**
     * Retrieves all developer feature flags.
     * @summary Developer Feature Flags
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeatureFlagsApi
     */
    getDeveloperFeatureFlags(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<FeatureFlag[], any>>;
    /**
     * Update a developer feature flag
     * @summary Update Arena Feature Flag
     * @param {number} arenaId Id of the arena to operate within
     * @param {string} featureFlagName Name of the feature flag to retrieve
     * @param {UpdateFeatureFlag} [updateFeatureFlag] Fields used to update (patch) an arena feature flag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeatureFlagsApi
     */
    updateArenaFeatureFlag(arenaId: number, featureFlagName: string, updateFeatureFlag?: UpdateFeatureFlag, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<FeatureFlag, any>>;
    /**
     * Update a developer feature flag
     * @summary Update Developer Feature Flag
     * @param {string} featureFlagName Name of the feature flag to retrieve
     * @param {UpdateFeatureFlag} [updateFeatureFlag] Fields used to update (patch) a developer feature flag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeatureFlagsApi
     */
    updateDeveloperFeatureFlag(featureFlagName: string, updateFeatureFlag?: UpdateFeatureFlag, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<FeatureFlag, any>>;
}
/**
 * PaymentPrefsApi - axios parameter creator
 * @export
 */
export declare const PaymentPrefsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Get an un-paginated list of payment prefs filtered by a required list of payment pref IDs.
     * @summary Get a list of payment prefs
     * @param {Array<number>} ids Required comma separated list of ids to filter resources by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPaymentPrefs: (ids: Array<number>, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update (patch) the fields for a specific payment pref. This only supports verification status at the moment.
     * @summary Update payment pref
     * @param {number} id Id of the resource
     * @param {UpdatePaymentPrefOptions} [updatePaymentPrefOptions] Fields used to update a payment pref
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePaymentPref: (id: number, updatePaymentPrefOptions?: UpdatePaymentPrefOptions, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * PaymentPrefsApi - functional programming interface
 * @export
 */
export declare const PaymentPrefsApiFp: (configuration?: Configuration) => {
    /**
     * Get an un-paginated list of payment prefs filtered by a required list of payment pref IDs.
     * @summary Get a list of payment prefs
     * @param {Array<number>} ids Required comma separated list of ids to filter resources by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPaymentPrefs(ids: Array<number>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PaymentPref>>>;
    /**
     * Update (patch) the fields for a specific payment pref. This only supports verification status at the moment.
     * @summary Update payment pref
     * @param {number} id Id of the resource
     * @param {UpdatePaymentPrefOptions} [updatePaymentPrefOptions] Fields used to update a payment pref
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePaymentPref(id: number, updatePaymentPrefOptions?: UpdatePaymentPrefOptions, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentPref>>;
};
/**
 * PaymentPrefsApi - factory interface
 * @export
 */
export declare const PaymentPrefsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Get an un-paginated list of payment prefs filtered by a required list of payment pref IDs.
     * @summary Get a list of payment prefs
     * @param {Array<number>} ids Required comma separated list of ids to filter resources by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPaymentPrefs(ids: Array<number>, options?: RawAxiosRequestConfig): AxiosPromise<Array<PaymentPref>>;
    /**
     * Update (patch) the fields for a specific payment pref. This only supports verification status at the moment.
     * @summary Update payment pref
     * @param {number} id Id of the resource
     * @param {UpdatePaymentPrefOptions} [updatePaymentPrefOptions] Fields used to update a payment pref
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePaymentPref(id: number, updatePaymentPrefOptions?: UpdatePaymentPrefOptions, options?: RawAxiosRequestConfig): AxiosPromise<PaymentPref>;
};
/**
 * PaymentPrefsApi - object-oriented interface
 * @export
 * @class PaymentPrefsApi
 * @extends {BaseAPI}
 */
export declare class PaymentPrefsApi extends BaseAPI {
    /**
     * Get an un-paginated list of payment prefs filtered by a required list of payment pref IDs.
     * @summary Get a list of payment prefs
     * @param {Array<number>} ids Required comma separated list of ids to filter resources by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentPrefsApi
     */
    getPaymentPrefs(ids: Array<number>, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PaymentPref[], any>>;
    /**
     * Update (patch) the fields for a specific payment pref. This only supports verification status at the moment.
     * @summary Update payment pref
     * @param {number} id Id of the resource
     * @param {UpdatePaymentPrefOptions} [updatePaymentPrefOptions] Fields used to update a payment pref
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentPrefsApi
     */
    updatePaymentPref(id: number, updatePaymentPrefOptions?: UpdatePaymentPrefOptions, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PaymentPref, any>>;
}
/**
 * PermissionsApi - axios parameter creator
 * @export
 */
export declare const PermissionsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Returns a list of granular permissions given user has.
     * @summary Returns a list of granular permissions given user has.
     * @param {number} arenaId Id of the arena to operate within
     * @param {number} userId User ID of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGranularPermissions: (arenaId: number, userId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Determines if a user has object level authorization provided as input an objectType, [IDs], and [Permissions]. For staff users, permissions checks are only valid in an arena with ArenaFeatureFlags.advanced_permissions enabled. For portal users, only read permissions checks are allowed.
     * @summary Determines if a user has object level authorization provided as input an objectType, [IDs], and [Permissions]. For staff users, permissions checks are only valid in an arena with ArenaFeatureFlags.advanced_permissions enabled. For portal users, only read permissions checks are allowed.
     * @param {number} userId Required user_id to filter by.
     * @param {ObjectType} objectType Required object_type to filter by. Should match an ObjectType enum.
     * @param {Array<number>} objectIds List of objects_ids of the corresponding ObjectType
     * @param {Array<Permission>} permissions List of object level permissions to filter by
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getObjectLevelPermissions: (userId: number, objectType: ObjectType, objectIds: Array<number>, permissions: Array<Permission>, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * PermissionsApi - functional programming interface
 * @export
 */
export declare const PermissionsApiFp: (configuration?: Configuration) => {
    /**
     * Returns a list of granular permissions given user has.
     * @summary Returns a list of granular permissions given user has.
     * @param {number} arenaId Id of the arena to operate within
     * @param {number} userId User ID of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGranularPermissions(arenaId: number, userId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GranularPermission>>>;
    /**
     * Determines if a user has object level authorization provided as input an objectType, [IDs], and [Permissions]. For staff users, permissions checks are only valid in an arena with ArenaFeatureFlags.advanced_permissions enabled. For portal users, only read permissions checks are allowed.
     * @summary Determines if a user has object level authorization provided as input an objectType, [IDs], and [Permissions]. For staff users, permissions checks are only valid in an arena with ArenaFeatureFlags.advanced_permissions enabled. For portal users, only read permissions checks are allowed.
     * @param {number} userId Required user_id to filter by.
     * @param {ObjectType} objectType Required object_type to filter by. Should match an ObjectType enum.
     * @param {Array<number>} objectIds List of objects_ids of the corresponding ObjectType
     * @param {Array<Permission>} permissions List of object level permissions to filter by
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getObjectLevelPermissions(userId: number, objectType: ObjectType, objectIds: Array<number>, permissions: Array<Permission>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ObjectLevelPermission>>;
};
/**
 * PermissionsApi - factory interface
 * @export
 */
export declare const PermissionsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Returns a list of granular permissions given user has.
     * @summary Returns a list of granular permissions given user has.
     * @param {number} arenaId Id of the arena to operate within
     * @param {number} userId User ID of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGranularPermissions(arenaId: number, userId: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<GranularPermission>>;
    /**
     * Determines if a user has object level authorization provided as input an objectType, [IDs], and [Permissions]. For staff users, permissions checks are only valid in an arena with ArenaFeatureFlags.advanced_permissions enabled. For portal users, only read permissions checks are allowed.
     * @summary Determines if a user has object level authorization provided as input an objectType, [IDs], and [Permissions]. For staff users, permissions checks are only valid in an arena with ArenaFeatureFlags.advanced_permissions enabled. For portal users, only read permissions checks are allowed.
     * @param {number} userId Required user_id to filter by.
     * @param {ObjectType} objectType Required object_type to filter by. Should match an ObjectType enum.
     * @param {Array<number>} objectIds List of objects_ids of the corresponding ObjectType
     * @param {Array<Permission>} permissions List of object level permissions to filter by
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getObjectLevelPermissions(userId: number, objectType: ObjectType, objectIds: Array<number>, permissions: Array<Permission>, options?: RawAxiosRequestConfig): AxiosPromise<ObjectLevelPermission>;
};
/**
 * PermissionsApi - object-oriented interface
 * @export
 * @class PermissionsApi
 * @extends {BaseAPI}
 */
export declare class PermissionsApi extends BaseAPI {
    /**
     * Returns a list of granular permissions given user has.
     * @summary Returns a list of granular permissions given user has.
     * @param {number} arenaId Id of the arena to operate within
     * @param {number} userId User ID of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionsApi
     */
    getGranularPermissions(arenaId: number, userId: number, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<GranularPermission[], any>>;
    /**
     * Determines if a user has object level authorization provided as input an objectType, [IDs], and [Permissions]. For staff users, permissions checks are only valid in an arena with ArenaFeatureFlags.advanced_permissions enabled. For portal users, only read permissions checks are allowed.
     * @summary Determines if a user has object level authorization provided as input an objectType, [IDs], and [Permissions]. For staff users, permissions checks are only valid in an arena with ArenaFeatureFlags.advanced_permissions enabled. For portal users, only read permissions checks are allowed.
     * @param {number} userId Required user_id to filter by.
     * @param {ObjectType} objectType Required object_type to filter by. Should match an ObjectType enum.
     * @param {Array<number>} objectIds List of objects_ids of the corresponding ObjectType
     * @param {Array<Permission>} permissions List of object level permissions to filter by
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionsApi
     */
    getObjectLevelPermissions(userId: number, objectType: ObjectType, objectIds: Array<number>, permissions: Array<Permission>, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ObjectLevelPermission, any>>;
}
/**
 * PositionsApi - axios parameter creator
 * @export
 */
export declare const PositionsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Gets position of a specific arena and source
     * @summary Gets position of a specific arena and source
     * @param {number} arenaId Id of the arena to operate within
     * @param {string} externalPositionId Url safe base64 encoded version of url encoded version of source_name:url encoded version of source_object_id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExternalPosition: (arenaId: number, externalPositionId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get an un-paginated list of the entity\'s positions in its directly-owned operating companies.
     * @summary Get a list of the entity\'s positions in its directly-owned operating companies.
     * @param {number} arenaId Id of the arena to operate within
     * @param {number} entityId Id of the entity
     * @param {boolean} [excludeInactive] Whether to exclude inactive objects from the response.
     * @param {string} [asOfDate] An end date of a period. Format should be YYYY-MM-DD.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOpcoPositions: (arenaId: number, entityId: number, excludeInactive?: boolean, asOfDate?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Gets positions by ids with account, investor group, and investment entity ids.
     * @summary Gets positions by ids with account, investor group, and investment entity ids.
     * @param {number} arenaId Id of the arena to operate within
     * @param {Array<string>} [positionIds] Comma separated list of position ids.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPositionsAttributes: (arenaId: number, positionIds?: Array<string>, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * PositionsApi - functional programming interface
 * @export
 */
export declare const PositionsApiFp: (configuration?: Configuration) => {
    /**
     * Gets position of a specific arena and source
     * @summary Gets position of a specific arena and source
     * @param {number} arenaId Id of the arena to operate within
     * @param {string} externalPositionId Url safe base64 encoded version of url encoded version of source_name:url encoded version of source_object_id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExternalPosition(arenaId: number, externalPositionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExternalPosition>>;
    /**
     * Get an un-paginated list of the entity\'s positions in its directly-owned operating companies.
     * @summary Get a list of the entity\'s positions in its directly-owned operating companies.
     * @param {number} arenaId Id of the arena to operate within
     * @param {number} entityId Id of the entity
     * @param {boolean} [excludeInactive] Whether to exclude inactive objects from the response.
     * @param {string} [asOfDate] An end date of a period. Format should be YYYY-MM-DD.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOpcoPositions(arenaId: number, entityId: number, excludeInactive?: boolean, asOfDate?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Opco>>>;
    /**
     * Gets positions by ids with account, investor group, and investment entity ids.
     * @summary Gets positions by ids with account, investor group, and investment entity ids.
     * @param {number} arenaId Id of the arena to operate within
     * @param {Array<string>} [positionIds] Comma separated list of position ids.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPositionsAttributes(arenaId: number, positionIds?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PositionAttribute>>>;
};
/**
 * PositionsApi - factory interface
 * @export
 */
export declare const PositionsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Gets position of a specific arena and source
     * @summary Gets position of a specific arena and source
     * @param {number} arenaId Id of the arena to operate within
     * @param {string} externalPositionId Url safe base64 encoded version of url encoded version of source_name:url encoded version of source_object_id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExternalPosition(arenaId: number, externalPositionId: string, options?: RawAxiosRequestConfig): AxiosPromise<ExternalPosition>;
    /**
     * Get an un-paginated list of the entity\'s positions in its directly-owned operating companies.
     * @summary Get a list of the entity\'s positions in its directly-owned operating companies.
     * @param {number} arenaId Id of the arena to operate within
     * @param {number} entityId Id of the entity
     * @param {boolean} [excludeInactive] Whether to exclude inactive objects from the response.
     * @param {string} [asOfDate] An end date of a period. Format should be YYYY-MM-DD.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOpcoPositions(arenaId: number, entityId: number, excludeInactive?: boolean, asOfDate?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<Opco>>;
    /**
     * Gets positions by ids with account, investor group, and investment entity ids.
     * @summary Gets positions by ids with account, investor group, and investment entity ids.
     * @param {number} arenaId Id of the arena to operate within
     * @param {Array<string>} [positionIds] Comma separated list of position ids.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPositionsAttributes(arenaId: number, positionIds?: Array<string>, options?: RawAxiosRequestConfig): AxiosPromise<Array<PositionAttribute>>;
};
/**
 * PositionsApi - object-oriented interface
 * @export
 * @class PositionsApi
 * @extends {BaseAPI}
 */
export declare class PositionsApi extends BaseAPI {
    /**
     * Gets position of a specific arena and source
     * @summary Gets position of a specific arena and source
     * @param {number} arenaId Id of the arena to operate within
     * @param {string} externalPositionId Url safe base64 encoded version of url encoded version of source_name:url encoded version of source_object_id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PositionsApi
     */
    getExternalPosition(arenaId: number, externalPositionId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ExternalPosition, any>>;
    /**
     * Get an un-paginated list of the entity\'s positions in its directly-owned operating companies.
     * @summary Get a list of the entity\'s positions in its directly-owned operating companies.
     * @param {number} arenaId Id of the arena to operate within
     * @param {number} entityId Id of the entity
     * @param {boolean} [excludeInactive] Whether to exclude inactive objects from the response.
     * @param {string} [asOfDate] An end date of a period. Format should be YYYY-MM-DD.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PositionsApi
     */
    getOpcoPositions(arenaId: number, entityId: number, excludeInactive?: boolean, asOfDate?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Opco[], any>>;
    /**
     * Gets positions by ids with account, investor group, and investment entity ids.
     * @summary Gets positions by ids with account, investor group, and investment entity ids.
     * @param {number} arenaId Id of the arena to operate within
     * @param {Array<string>} [positionIds] Comma separated list of position ids.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PositionsApi
     */
    getPositionsAttributes(arenaId: number, positionIds?: Array<string>, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PositionAttribute[], any>>;
}
/**
 * TransactionsApi - axios parameter creator
 * @export
 */
export declare const TransactionsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Returns the transaction rollup status for a specified batch ID.
     * @summary Retrieve a single transaction rollup status by batch ID
     * @param {string} syncId The synchronization ID to fetch the transaction rollup status for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTransactionRollupStatus: (syncId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns a list of transaction rollup statuses based on the provided batch IDs.
     * @summary Retrieves the status of transaction rollups by batch IDs
     * @param {Array<string>} syncIds A list of synchronization IDs (UUIDs) to fetch the transaction rollups statuses.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTransactionRollupStatuses: (syncIds: Array<string>, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * TransactionsApi - functional programming interface
 * @export
 */
export declare const TransactionsApiFp: (configuration?: Configuration) => {
    /**
     * Returns the transaction rollup status for a specified batch ID.
     * @summary Retrieve a single transaction rollup status by batch ID
     * @param {string} syncId The synchronization ID to fetch the transaction rollup status for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTransactionRollupStatus(syncId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransactionRollupStatus>>;
    /**
     * Returns a list of transaction rollup statuses based on the provided batch IDs.
     * @summary Retrieves the status of transaction rollups by batch IDs
     * @param {Array<string>} syncIds A list of synchronization IDs (UUIDs) to fetch the transaction rollups statuses.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTransactionRollupStatuses(syncIds: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TransactionRollupStatus>>>;
};
/**
 * TransactionsApi - factory interface
 * @export
 */
export declare const TransactionsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Returns the transaction rollup status for a specified batch ID.
     * @summary Retrieve a single transaction rollup status by batch ID
     * @param {string} syncId The synchronization ID to fetch the transaction rollup status for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTransactionRollupStatus(syncId: string, options?: RawAxiosRequestConfig): AxiosPromise<TransactionRollupStatus>;
    /**
     * Returns a list of transaction rollup statuses based on the provided batch IDs.
     * @summary Retrieves the status of transaction rollups by batch IDs
     * @param {Array<string>} syncIds A list of synchronization IDs (UUIDs) to fetch the transaction rollups statuses.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTransactionRollupStatuses(syncIds: Array<string>, options?: RawAxiosRequestConfig): AxiosPromise<Array<TransactionRollupStatus>>;
};
/**
 * TransactionsApi - object-oriented interface
 * @export
 * @class TransactionsApi
 * @extends {BaseAPI}
 */
export declare class TransactionsApi extends BaseAPI {
    /**
     * Returns the transaction rollup status for a specified batch ID.
     * @summary Retrieve a single transaction rollup status by batch ID
     * @param {string} syncId The synchronization ID to fetch the transaction rollup status for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    getTransactionRollupStatus(syncId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<TransactionRollupStatus, any>>;
    /**
     * Returns a list of transaction rollup statuses based on the provided batch IDs.
     * @summary Retrieves the status of transaction rollups by batch IDs
     * @param {Array<string>} syncIds A list of synchronization IDs (UUIDs) to fetch the transaction rollups statuses.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    getTransactionRollupStatuses(syncIds: Array<string>, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<TransactionRollupStatus[], any>>;
}
/**
 * UsersApi - axios parameter creator
 * @export
 */
export declare const UsersApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Returns account IDs that the user has edit access to.
     * @summary Get accounts with edit access
     * @param {number} userId User ID of the resource
     * @param {Array<number>} [accountIds] Comma separated list of account ids.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAccountsEditAccess: (userId: number, accountIds?: Array<number>, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get roles for each areana
     * @summary Get roles for each arena
     * @param {number} userId User ID of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserArenaRoles: (userId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get a distribution batch by ID. This does handle auth checks (object and role based permissions)
     * @summary Get distribution batch with authorization checks
     * @param {number} userId User ID of the resource
     * @param {number} distributionBatchId Id of the distribution_batch
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserDistributionBatch: (userId: number, distributionBatchId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get an un-paginated list of distributions that a user_id is authorized to view taking into account both role-based and object-level permissioning.
     * @summary Get distribution batch distributions for a user_id with authorization checks
     * @param {number} userId User ID of the resource
     * @param {number} distributionBatchId Id of the distribution_batch
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserDistributionBatchDistributions: (userId: number, distributionBatchId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get an un-paginated list of users filtered by a required list of either DB or global user IDs.
     * @summary Get users
     * @param {Array<string>} [globalIds] Optional comma separated list of global ids to filter resources by.
     * @param {Array<number>} [ids] Optional comma separated list of ids to filter resources by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUsers: (globalIds?: Array<string>, ids?: Array<number>, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * UsersApi - functional programming interface
 * @export
 */
export declare const UsersApiFp: (configuration?: Configuration) => {
    /**
     * Returns account IDs that the user has edit access to.
     * @summary Get accounts with edit access
     * @param {number} userId User ID of the resource
     * @param {Array<number>} [accountIds] Comma separated list of account ids.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAccountsEditAccess(userId: number, accountIds?: Array<number>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<number>>>;
    /**
     * Get roles for each areana
     * @summary Get roles for each arena
     * @param {number} userId User ID of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserArenaRoles(userId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ArenaRoles>>>;
    /**
     * Get a distribution batch by ID. This does handle auth checks (object and role based permissions)
     * @summary Get distribution batch with authorization checks
     * @param {number} userId User ID of the resource
     * @param {number} distributionBatchId Id of the distribution_batch
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserDistributionBatch(userId: number, distributionBatchId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DistributionBatch>>;
    /**
     * Get an un-paginated list of distributions that a user_id is authorized to view taking into account both role-based and object-level permissioning.
     * @summary Get distribution batch distributions for a user_id with authorization checks
     * @param {number} userId User ID of the resource
     * @param {number} distributionBatchId Id of the distribution_batch
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserDistributionBatchDistributions(userId: number, distributionBatchId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Distribution>>>;
    /**
     * Get an un-paginated list of users filtered by a required list of either DB or global user IDs.
     * @summary Get users
     * @param {Array<string>} [globalIds] Optional comma separated list of global ids to filter resources by.
     * @param {Array<number>} [ids] Optional comma separated list of ids to filter resources by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUsers(globalIds?: Array<string>, ids?: Array<number>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<User>>>;
};
/**
 * UsersApi - factory interface
 * @export
 */
export declare const UsersApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Returns account IDs that the user has edit access to.
     * @summary Get accounts with edit access
     * @param {number} userId User ID of the resource
     * @param {Array<number>} [accountIds] Comma separated list of account ids.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAccountsEditAccess(userId: number, accountIds?: Array<number>, options?: RawAxiosRequestConfig): AxiosPromise<Array<number>>;
    /**
     * Get roles for each areana
     * @summary Get roles for each arena
     * @param {number} userId User ID of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserArenaRoles(userId: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<ArenaRoles>>;
    /**
     * Get a distribution batch by ID. This does handle auth checks (object and role based permissions)
     * @summary Get distribution batch with authorization checks
     * @param {number} userId User ID of the resource
     * @param {number} distributionBatchId Id of the distribution_batch
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserDistributionBatch(userId: number, distributionBatchId: number, options?: RawAxiosRequestConfig): AxiosPromise<DistributionBatch>;
    /**
     * Get an un-paginated list of distributions that a user_id is authorized to view taking into account both role-based and object-level permissioning.
     * @summary Get distribution batch distributions for a user_id with authorization checks
     * @param {number} userId User ID of the resource
     * @param {number} distributionBatchId Id of the distribution_batch
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserDistributionBatchDistributions(userId: number, distributionBatchId: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<Distribution>>;
    /**
     * Get an un-paginated list of users filtered by a required list of either DB or global user IDs.
     * @summary Get users
     * @param {Array<string>} [globalIds] Optional comma separated list of global ids to filter resources by.
     * @param {Array<number>} [ids] Optional comma separated list of ids to filter resources by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUsers(globalIds?: Array<string>, ids?: Array<number>, options?: RawAxiosRequestConfig): AxiosPromise<Array<User>>;
};
/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export declare class UsersApi extends BaseAPI {
    /**
     * Returns account IDs that the user has edit access to.
     * @summary Get accounts with edit access
     * @param {number} userId User ID of the resource
     * @param {Array<number>} [accountIds] Comma separated list of account ids.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    getAccountsEditAccess(userId: number, accountIds?: Array<number>, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<number[], any>>;
    /**
     * Get roles for each areana
     * @summary Get roles for each arena
     * @param {number} userId User ID of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    getUserArenaRoles(userId: number, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ArenaRoles[], any>>;
    /**
     * Get a distribution batch by ID. This does handle auth checks (object and role based permissions)
     * @summary Get distribution batch with authorization checks
     * @param {number} userId User ID of the resource
     * @param {number} distributionBatchId Id of the distribution_batch
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    getUserDistributionBatch(userId: number, distributionBatchId: number, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<DistributionBatch, any>>;
    /**
     * Get an un-paginated list of distributions that a user_id is authorized to view taking into account both role-based and object-level permissioning.
     * @summary Get distribution batch distributions for a user_id with authorization checks
     * @param {number} userId User ID of the resource
     * @param {number} distributionBatchId Id of the distribution_batch
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    getUserDistributionBatchDistributions(userId: number, distributionBatchId: number, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Distribution[], any>>;
    /**
     * Get an un-paginated list of users filtered by a required list of either DB or global user IDs.
     * @summary Get users
     * @param {Array<string>} [globalIds] Optional comma separated list of global ids to filter resources by.
     * @param {Array<number>} [ids] Optional comma separated list of ids to filter resources by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    getUsers(globalIds?: Array<string>, ids?: Array<number>, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<User[], any>>;
}
