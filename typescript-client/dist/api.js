"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Juniper Square Internal API
 * An internal API for inter-service communication at JSQ.
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FeatureFlagsApiFactory = exports.FeatureFlagsApiFp = exports.FeatureFlagsApiAxiosParamCreator = exports.EntitiesApi = exports.EntitiesApiFactory = exports.EntitiesApiFp = exports.EntitiesApiAxiosParamCreator = exports.DistributionBatchesApi = exports.DistributionBatchesApiFactory = exports.DistributionBatchesApiFp = exports.DistributionBatchesApiAxiosParamCreator = exports.DistributionApi = exports.DistributionApiFactory = exports.DistributionApiFp = exports.DistributionApiAxiosParamCreator = exports.DiligencesApi = exports.DiligencesApiFactory = exports.DiligencesApiFp = exports.DiligencesApiAxiosParamCreator = exports.BankAccountApi = exports.BankAccountApiFactory = exports.BankAccountApiFp = exports.BankAccountApiAxiosParamCreator = exports.ArenasApi = exports.ArenasApiFactory = exports.ArenasApiFp = exports.ArenasApiAxiosParamCreator = exports.AccountsApi = exports.AccountsApiFactory = exports.AccountsApiFp = exports.AccountsApiAxiosParamCreator = exports.UpdatePaymentPrefOptionsVerificationStatusEnum = exports.TransactionRollupStatusStatusEnum = exports.ResponseStatus = exports.Permission = exports.PaymentPrefVerificationStatusEnum = exports.PaymentPrefPaymentMethodEnum = exports.ObjectType = exports.ObjectAuthorizedClass = exports.GranularPermission = exports.DocumentContentTypeEnum = exports.DocumentDocumentTypeEnum = exports.DiligenceType = exports.DiligenceStatus = exports.DiligenceCategory = exports.BulkAccountContactChangeNotifyByStatusStatusEnum = exports.BulkAccountContactChangeNotifyByStatusRequestTypeEnum = exports.BulkAccountContactChangeNotifyRequestTypeEnum = exports.ArenaManageAccountContactSettingsContactUpdateRequireMgrApprovalEnum = exports.AllocationTypeCategoryEnum = void 0;
exports.UsersApi = exports.UsersApiFactory = exports.UsersApiFp = exports.UsersApiAxiosParamCreator = exports.TransactionsApi = exports.TransactionsApiFactory = exports.TransactionsApiFp = exports.TransactionsApiAxiosParamCreator = exports.PositionsApi = exports.PositionsApiFactory = exports.PositionsApiFp = exports.PositionsApiAxiosParamCreator = exports.PermissionsApi = exports.PermissionsApiFactory = exports.PermissionsApiFp = exports.PermissionsApiAxiosParamCreator = exports.PaymentPrefsApi = exports.PaymentPrefsApiFactory = exports.PaymentPrefsApiFp = exports.PaymentPrefsApiAxiosParamCreator = exports.FeatureFlagsApi = void 0;
var axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
var common_1 = require("./common");
// @ts-ignore
var base_1 = require("./base");
exports.AllocationTypeCategoryEnum = {
    CapitalCall: 'Capital Call',
    CapitalActivity: 'Capital Activity',
    DistributionAllocations: 'Distribution Allocations',
    NetIncomeAllocations: 'Net Income Allocations',
    NetAssetValue: 'Net Asset Value'
};
exports.ArenaManageAccountContactSettingsContactUpdateRequireMgrApprovalEnum = {
    AddOnly: 'add_only',
    All: 'all',
    None: 'none'
};
exports.BulkAccountContactChangeNotifyRequestTypeEnum = {
    AddContact: 'ADD_CONTACT',
    UpdateContact: 'UPDATE_CONTACT',
    RemoveContact: 'REMOVE_CONTACT'
};
exports.BulkAccountContactChangeNotifyByStatusRequestTypeEnum = {
    AddContact: 'ADD_CONTACT',
    UpdateContact: 'UPDATE_CONTACT',
    RemoveContact: 'REMOVE_CONTACT'
};
exports.BulkAccountContactChangeNotifyByStatusStatusEnum = {
    PendingApproval: 'PENDING_APPROVAL',
    AutoApproved: 'AUTO_APPROVED',
    Approved: 'APPROVED',
    Rejected: 'REJECTED'
};
/**
 * Category of Diligence
 * @export
 * @enum {string}
 */
exports.DiligenceCategory = {
    PaymentsOnboardingFlow: 'payments_onboarding_flow'
};
/**
 * Status of the diligence in the submission workflow
 * @export
 * @enum {string}
 */
exports.DiligenceStatus = {
    Started: 'started',
    PendingReview: 'pending_review',
    RequestedLpForInfo: 'requested_lp_for_info',
    InReview: 'in_review',
    PendingPeerReview: 'pending_peer_review',
    InPeerReview: 'in_peer_review',
    Confirmed: 'confirmed'
};
/**
 * Type of Diligence. Differs from category because category represents what type of service/entity is requesting the diligence. DiligenceType represents the type of diligence created
 * @export
 * @enum {string}
 */
exports.DiligenceType = {
    Kyc: 'kyc',
    WatchlistScreening: 'watchlist_screening',
    Manual: 'manual'
};
exports.DocumentDocumentTypeEnum = {
    IdentityDocument: 'identity_document',
    FormationDocument: 'formation_document',
    TaxDocument: 'tax_document',
    File: 'file',
    CorporateResolution: 'corporate_resolution',
    AuditedFinancial: 'audited_financial'
};
exports.DocumentContentTypeEnum = {
    ImageWebp: 'image/webp',
    ApplicationPdf: 'application/pdf',
    ImagePng: 'image/png',
    ImageJpeg: 'image/jpeg'
};
/**
 * Granular permission enum
 * @export
 * @enum {string}
 */
exports.GranularPermission = {
    ManagePortalSettings: 'CAN_MANAGE_PORTAL_SETTINGS',
    ManageGeneralSubscriptionSettings: 'CAN_MANAGE_GENERAL_SUBSCRIPTION_SETTINGS',
    ManageStaffAccess: 'CAN_MANAGE_STAFF_ACCESS',
    ManageSelf: 'CAN_MANAGE_SELF',
    ManageUserRoles: 'CAN_MANAGE_USER_ROLES',
    AssignAdministratorPermissionsToStaffUsers: 'CAN_ASSIGN_ADMINISTRATOR_PERMISSIONS_TO_STAFF_USERS',
    ManageAuthentication: 'CAN_MANAGE_AUTHENTICATION',
    ManageAgreements: 'CAN_MANAGE_AGREEMENTS',
    ManageDataFields: 'CAN_MANAGE_DATA_FIELDS',
    AccessAuditLog: 'CAN_ACCESS_AUDIT_LOG',
    ConfigDocumentCategories: 'CAN_CONFIG_DOCUMENT_CATEGORIES',
    ConfigEmailDistributionLists: 'CAN_CONFIG_EMAIL_DISTRIBUTION_LISTS',
    ConfigCrmNotificationLists: 'CAN_CONFIG_CRM_NOTIFICATION_LISTS',
    ConfigOwnershipUnitsAndPercentages: 'CAN_CONFIG_OWNERSHIP_UNITS_AND_PERCENTAGES',
    ConfigDistributionsAndCapitalTransactions: 'CAN_CONFIG_DISTRIBUTIONS_AND_CAPITAL_TRANSACTIONS',
    ConfigNetIncomeAndNavComponents: 'CAN_CONFIG_NET_INCOME_AND_NAV_COMPONENTS',
    ConfigEntitySubtypes: 'CAN_CONFIG_ENTITY_SUBTYPES',
    ConfigMetricsSettings: 'CAN_CONFIG_METRICS_SETTINGS',
    ConfigWatermarkTemplates: 'CAN_CONFIG_WATERMARK_TEMPLATES',
    ConfigManagementFees: 'CAN_CONFIG_MANAGEMENT_FEES',
    ConfigOrganizationSettings: 'CAN_CONFIG_ORGANIZATION_SETTINGS',
    ConfigESignatures: 'CAN_CONFIG_E_SIGNATURES',
    ConfigStatementNotices: 'CAN_CONFIG_STATEMENT_NOTICES',
    ConfigStationeryLibrary: 'CAN_CONFIG_STATIONERY_LIBRARY',
    ConfigReportingTemplate: 'CAN_CONFIG_REPORTING_TEMPLATE',
    ConfigIntegrations: 'CAN_CONFIG_INTEGRATIONS',
    ConfigMappings: 'CAN_CONFIG_MAPPINGS',
    AccessProspectSubscription: 'CAN_ACCESS_PROSPECT_SUBSCRIPTION'
};
/**
 * String representation of AuthorizedClass enum
 * @export
 * @enum {string}
 */
exports.ObjectAuthorizedClass = {
    Account: 'account',
    Contact: 'contact',
    CustomDataFields: 'custom_data_fields',
    DocumentCategory: 'document_category',
    Entity: 'entity',
    Offering: 'offering'
};
/**
 * String representation of ObjectType enum
 * @export
 * @enum {string}
 */
exports.ObjectType = {
    Arena: 'arena',
    User: 'user',
    Contact: 'contact',
    Offering: 'offering',
    Prospect: 'prospect',
    Account: 'account',
    Property: 'property',
    CommPref: 'comm_pref',
    Position: 'position',
    Document: 'document',
    EmailBatch: 'email_batch',
    CapitalCallBatch: 'capital_call_batch',
    DistributionBatch: 'distribution_batch',
    Transaction: 'transaction',
    Asset: 'asset',
    ProspectContactMap: 'prospect_contact_map',
    DataRoom: 'data_room',
    NetIncomeBatch: 'net_income_batch',
    Publication: 'publication',
    SubscriptionBatch: 'subscription_batch',
    Subscription: 'subscription',
    EventLog: 'event_log',
    PaymentBatch: 'payment_batch',
    ManagementFeeBatch: 'management_fee_batch',
    Task: 'task',
    Lead: 'lead',
    CrmNotificationList: 'crm_notification_list',
    NavBatch: 'nav_batch',
    Loan: 'loan',
    AssetDateSampledData: 'asset_date_sampled_data',
    TransactionBatch: 'transaction_batch',
    UnitValue: 'unit_value',
    UnitValueBatch: 'unit_value_batch',
    CapitalCall: 'capital_call',
    Distribution: 'distribution',
    NetIncome: 'net_income',
    Nav: 'nav',
    Note: 'note',
    StoredEmail: 'stored_email',
    Email: 'email',
    InvestorDiligence: 'investor_diligence',
    WatchlistScreeningDetail: 'watchlist_screening_detail',
    KycDetail: 'kyc_detail',
    KycDocument: 'kyc_document',
    KycDocumentVersion: 'kyc_document_version',
    ImportTemplate: 'import_template',
    KycDocumentVersionActivity: 'kyc_document_version_activity',
    Acquisition: 'acquisition',
    Disposition: 'disposition',
    FeatureFlag: 'feature_flag',
    PaymentPref: 'payment_pref',
    DocumentCategory: 'document_category',
    ConsolidatedPaymentBatch: 'consolidated_payment_batch',
    ESignatureDocument: 'e_signature_document',
    ESignatureRequestTemplate: 'e_signature_request_template',
    ESignatureGpSigner: 'e_signature_gp_signer',
    ESignatureRequestBatch: 'e_signature_request_batch',
    ESignatureRequest: 'e_signature_request',
    ESignatureRequestRecipient: 'e_signature_request_recipient',
    ESignatureLpSigner: 'e_signature_lp_signer',
    ESignatureLpConfigurator: 'e_signature_lp_configurator',
    Payment: 'payment',
    BankAccount: 'bank_account',
    TwrPeriodMetric: 'twr_period_metric',
    FieldAccessRole: 'field_access_role',
    FieldAccessRoleObjectMap: 'field_access_role_object_map',
    Location: 'location',
    ProductType: 'product_type',
    DocumentFolder: 'document_folder',
    LpConsolidationRequest: 'lp_consolidation_request',
    FundAdminService: 'fund_admin_service',
    EntityCollection: 'entity_collection',
    ComplianceProfile: 'compliance_profile'
};
exports.PaymentPrefPaymentMethodEnum = {
    Ach: 'ACH',
    Check: 'Check',
    Wire: 'Wire'
};
exports.PaymentPrefVerificationStatusEnum = {
    Verified: 'verified',
    Unverified: 'unverified',
    Error: 'error',
    Null: 'null'
};
/**
 * String representation of Permission enum
 * @export
 * @enum {string}
 */
exports.Permission = {
    Create: 'create',
    Read: 'read',
    Update: 'update',
    Delete: 'delete',
    Administer: 'administer',
    Download: 'download',
    ManagePortal: 'manage_portal',
    LimitedRead: 'limited_read',
    PublishTransactions: 'publish_transactions',
    LimitedEdit: 'limited_edit'
};
/**
 * Response status
 * @export
 * @enum {string}
 */
exports.ResponseStatus = {
    Success: 'Success',
    Failure: 'Failure'
};
exports.TransactionRollupStatusStatusEnum = {
    Received: 'received',
    Completed: 'completed',
    Failed: 'failed'
};
exports.UpdatePaymentPrefOptionsVerificationStatusEnum = {
    Verified: 'verified',
    Unverified: 'unverified',
    Error: 'error',
    Null: 'null'
};
/**
 * AccountsApi - axios parameter creator
 * @export
 */
var AccountsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * API for account contact to add new or existing contact to account
         * @summary API for account contact to add new or existing contact to account
         * @param {AccountContactAddRequestBody} [accountContactAddRequestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountContactAdd: function (accountContactAddRequestBody, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/account-contact/add";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(accountContactAddRequestBody, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * API for account contact bulk removal
         * @summary API for account contact bulk removal
         * @param {BulkAccountContactRemoveRequestBody} [bulkAccountContactRemoveRequestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountContactBulkRemove: function (bulkAccountContactRemoveRequestBody, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/account-contact/bulk-remove";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(bulkAccountContactRemoveRequestBody, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * API for account contact bulk update
         * @summary API for account contact bulk update
         * @param {BulkAccountContactUpdateRequestBody} [bulkAccountContactUpdateRequestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountContactBulkUpdate: function (bulkAccountContactUpdateRequestBody, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/account-contact/bulk-update";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(bulkAccountContactUpdateRequestBody, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * API for account contact change notification
         * @summary API for account contact change notification
         * @param {number} userId User ID of the resource
         * @param {BulkAccountContactChangeNotify} [bulkAccountContactChangeNotify]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountContactChangeNotify: function (userId, bulkAccountContactChangeNotify, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'userId' is not null or undefined
                    (0, common_1.assertParamExists)('accountContactChangeNotify', 'userId', userId);
                    localVarPath = "/users/{user_id}/account-contact/bulk-notify"
                        .replace("{".concat("user_id", "}"), encodeURIComponent(String(userId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(bulkAccountContactChangeNotify, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * API for account contact change notification by status
         * @summary API for account contact change notification by status
         * @param {number} userId User ID of the resource
         * @param {BulkAccountContactChangeNotifyByStatus} [bulkAccountContactChangeNotifyByStatus]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountContactChangeNotifyByStatus: function (userId, bulkAccountContactChangeNotifyByStatus, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'userId' is not null or undefined
                    (0, common_1.assertParamExists)('accountContactChangeNotifyByStatus', 'userId', userId);
                    localVarPath = "/users/{user_id}/account-contact/bulk-notify-by-status"
                        .replace("{".concat("user_id", "}"), encodeURIComponent(String(userId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(bulkAccountContactChangeNotifyByStatus, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.AccountsApiAxiosParamCreator = AccountsApiAxiosParamCreator;
/**
 * AccountsApi - functional programming interface
 * @export
 */
var AccountsApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.AccountsApiAxiosParamCreator)(configuration);
    return {
        /**
         * API for account contact to add new or existing contact to account
         * @summary API for account contact to add new or existing contact to account
         * @param {AccountContactAddRequestBody} [accountContactAddRequestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountContactAdd: function (accountContactAddRequestBody, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.accountContactAdd(accountContactAddRequestBody, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['AccountsApi.accountContactAdd']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * API for account contact bulk removal
         * @summary API for account contact bulk removal
         * @param {BulkAccountContactRemoveRequestBody} [bulkAccountContactRemoveRequestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountContactBulkRemove: function (bulkAccountContactRemoveRequestBody, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.accountContactBulkRemove(bulkAccountContactRemoveRequestBody, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['AccountsApi.accountContactBulkRemove']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * API for account contact bulk update
         * @summary API for account contact bulk update
         * @param {BulkAccountContactUpdateRequestBody} [bulkAccountContactUpdateRequestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountContactBulkUpdate: function (bulkAccountContactUpdateRequestBody, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.accountContactBulkUpdate(bulkAccountContactUpdateRequestBody, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['AccountsApi.accountContactBulkUpdate']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * API for account contact change notification
         * @summary API for account contact change notification
         * @param {number} userId User ID of the resource
         * @param {BulkAccountContactChangeNotify} [bulkAccountContactChangeNotify]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountContactChangeNotify: function (userId, bulkAccountContactChangeNotify, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.accountContactChangeNotify(userId, bulkAccountContactChangeNotify, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['AccountsApi.accountContactChangeNotify']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * API for account contact change notification by status
         * @summary API for account contact change notification by status
         * @param {number} userId User ID of the resource
         * @param {BulkAccountContactChangeNotifyByStatus} [bulkAccountContactChangeNotifyByStatus]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountContactChangeNotifyByStatus: function (userId, bulkAccountContactChangeNotifyByStatus, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.accountContactChangeNotifyByStatus(userId, bulkAccountContactChangeNotifyByStatus, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['AccountsApi.accountContactChangeNotifyByStatus']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.AccountsApiFp = AccountsApiFp;
/**
 * AccountsApi - factory interface
 * @export
 */
var AccountsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.AccountsApiFp)(configuration);
    return {
        /**
         * API for account contact to add new or existing contact to account
         * @summary API for account contact to add new or existing contact to account
         * @param {AccountContactAddRequestBody} [accountContactAddRequestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountContactAdd: function (accountContactAddRequestBody, options) {
            return localVarFp.accountContactAdd(accountContactAddRequestBody, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * API for account contact bulk removal
         * @summary API for account contact bulk removal
         * @param {BulkAccountContactRemoveRequestBody} [bulkAccountContactRemoveRequestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountContactBulkRemove: function (bulkAccountContactRemoveRequestBody, options) {
            return localVarFp.accountContactBulkRemove(bulkAccountContactRemoveRequestBody, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * API for account contact bulk update
         * @summary API for account contact bulk update
         * @param {BulkAccountContactUpdateRequestBody} [bulkAccountContactUpdateRequestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountContactBulkUpdate: function (bulkAccountContactUpdateRequestBody, options) {
            return localVarFp.accountContactBulkUpdate(bulkAccountContactUpdateRequestBody, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * API for account contact change notification
         * @summary API for account contact change notification
         * @param {number} userId User ID of the resource
         * @param {BulkAccountContactChangeNotify} [bulkAccountContactChangeNotify]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountContactChangeNotify: function (userId, bulkAccountContactChangeNotify, options) {
            return localVarFp.accountContactChangeNotify(userId, bulkAccountContactChangeNotify, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * API for account contact change notification by status
         * @summary API for account contact change notification by status
         * @param {number} userId User ID of the resource
         * @param {BulkAccountContactChangeNotifyByStatus} [bulkAccountContactChangeNotifyByStatus]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountContactChangeNotifyByStatus: function (userId, bulkAccountContactChangeNotifyByStatus, options) {
            return localVarFp.accountContactChangeNotifyByStatus(userId, bulkAccountContactChangeNotifyByStatus, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.AccountsApiFactory = AccountsApiFactory;
/**
 * AccountsApi - object-oriented interface
 * @export
 * @class AccountsApi
 * @extends {BaseAPI}
 */
var AccountsApi = /** @class */ (function (_super) {
    __extends(AccountsApi, _super);
    function AccountsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * API for account contact to add new or existing contact to account
     * @summary API for account contact to add new or existing contact to account
     * @param {AccountContactAddRequestBody} [accountContactAddRequestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    AccountsApi.prototype.accountContactAdd = function (accountContactAddRequestBody, options) {
        var _this = this;
        return (0, exports.AccountsApiFp)(this.configuration).accountContactAdd(accountContactAddRequestBody, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * API for account contact bulk removal
     * @summary API for account contact bulk removal
     * @param {BulkAccountContactRemoveRequestBody} [bulkAccountContactRemoveRequestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    AccountsApi.prototype.accountContactBulkRemove = function (bulkAccountContactRemoveRequestBody, options) {
        var _this = this;
        return (0, exports.AccountsApiFp)(this.configuration).accountContactBulkRemove(bulkAccountContactRemoveRequestBody, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * API for account contact bulk update
     * @summary API for account contact bulk update
     * @param {BulkAccountContactUpdateRequestBody} [bulkAccountContactUpdateRequestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    AccountsApi.prototype.accountContactBulkUpdate = function (bulkAccountContactUpdateRequestBody, options) {
        var _this = this;
        return (0, exports.AccountsApiFp)(this.configuration).accountContactBulkUpdate(bulkAccountContactUpdateRequestBody, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * API for account contact change notification
     * @summary API for account contact change notification
     * @param {number} userId User ID of the resource
     * @param {BulkAccountContactChangeNotify} [bulkAccountContactChangeNotify]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    AccountsApi.prototype.accountContactChangeNotify = function (userId, bulkAccountContactChangeNotify, options) {
        var _this = this;
        return (0, exports.AccountsApiFp)(this.configuration).accountContactChangeNotify(userId, bulkAccountContactChangeNotify, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * API for account contact change notification by status
     * @summary API for account contact change notification by status
     * @param {number} userId User ID of the resource
     * @param {BulkAccountContactChangeNotifyByStatus} [bulkAccountContactChangeNotifyByStatus]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    AccountsApi.prototype.accountContactChangeNotifyByStatus = function (userId, bulkAccountContactChangeNotifyByStatus, options) {
        var _this = this;
        return (0, exports.AccountsApiFp)(this.configuration).accountContactChangeNotifyByStatus(userId, bulkAccountContactChangeNotifyByStatus, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return AccountsApi;
}(base_1.BaseAPI));
exports.AccountsApi = AccountsApi;
/**
 * ArenasApi - axios parameter creator
 * @export
 */
var ArenasApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Get an un-paginated list of allocation types.
         * @summary Get a list of allocation types for the given arena
         * @param {number} arenaId Id of the arena to operate within
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllocationTypes: function (arenaId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'arenaId' is not null or undefined
                    (0, common_1.assertParamExists)('getAllocationTypes', 'arenaId', arenaId);
                    localVarPath = "/arenas/{arena_id}/allocation_types"
                        .replace("{".concat("arena_id", "}"), encodeURIComponent(String(arenaId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Get an arena by ID.
         * @summary Get arena
         * @param {number} id Id of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getArena: function (id, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'id' is not null or undefined
                    (0, common_1.assertParamExists)('getArena', 'id', id);
                    localVarPath = "/arenas/{id}/"
                        .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Get allocationTypes for a given arena by ID
         * @summary Get allocation types for a given arena by ID
         * @param {number} arenaId Id of the arena to operate within
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getArenaNetIncomeTypes: function (arenaId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'arenaId' is not null or undefined
                    (0, common_1.assertParamExists)('getArenaNetIncomeTypes', 'arenaId', arenaId);
                    localVarPath = "/arenas/{arena_id}/net_income_allocation_types"
                        .replace("{".concat("arena_id", "}"), encodeURIComponent(String(arenaId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Get payment settings for a given arena by ID
         * @summary Get payment settings for a given arena
         * @param {number} arenaId Id of the arena to operate within
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getArenaPaymentSettings: function (arenaId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'arenaId' is not null or undefined
                    (0, common_1.assertParamExists)('getArenaPaymentSettings', 'arenaId', arenaId);
                    localVarPath = "/arenas/{arena_id}/payment_settings"
                        .replace("{".concat("arena_id", "}"), encodeURIComponent(String(arenaId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Get an un-paginated list of all arenas, optionally filtered by a list of arena IDs.
         * @summary Get a list of Arenas
         * @param {Array<number>} [ids] Optional comma separated list of ids to filter resources by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getArenas: function (ids, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/arenas/";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (ids) {
                        localVarQueryParameter['ids'] = ids.join(base_1.COLLECTION_FORMATS.csv);
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Get manage account contact settings for a given arenas
         * @summary Get manage account contact settings for a given arenas
         * @param {Array<number>} arenaIds List of arena_ids
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getArenasManageAccountContactSettings: function (arenaIds, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'arenaIds' is not null or undefined
                    (0, common_1.assertParamExists)('getArenasManageAccountContactSettings', 'arenaIds', arenaIds);
                    localVarPath = "/arenas/manage_account_contact_settings";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (arenaIds) {
                        localVarQueryParameter['arena_ids'] = arenaIds.join(base_1.COLLECTION_FORMATS.csv);
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.ArenasApiAxiosParamCreator = ArenasApiAxiosParamCreator;
/**
 * ArenasApi - functional programming interface
 * @export
 */
var ArenasApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.ArenasApiAxiosParamCreator)(configuration);
    return {
        /**
         * Get an un-paginated list of allocation types.
         * @summary Get a list of allocation types for the given arena
         * @param {number} arenaId Id of the arena to operate within
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllocationTypes: function (arenaId, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getAllocationTypes(arenaId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['ArenasApi.getAllocationTypes']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get an arena by ID.
         * @summary Get arena
         * @param {number} id Id of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getArena: function (id, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getArena(id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['ArenasApi.getArena']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get allocationTypes for a given arena by ID
         * @summary Get allocation types for a given arena by ID
         * @param {number} arenaId Id of the arena to operate within
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getArenaNetIncomeTypes: function (arenaId, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getArenaNetIncomeTypes(arenaId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['ArenasApi.getArenaNetIncomeTypes']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get payment settings for a given arena by ID
         * @summary Get payment settings for a given arena
         * @param {number} arenaId Id of the arena to operate within
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getArenaPaymentSettings: function (arenaId, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getArenaPaymentSettings(arenaId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['ArenasApi.getArenaPaymentSettings']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get an un-paginated list of all arenas, optionally filtered by a list of arena IDs.
         * @summary Get a list of Arenas
         * @param {Array<number>} [ids] Optional comma separated list of ids to filter resources by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getArenas: function (ids, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getArenas(ids, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['ArenasApi.getArenas']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get manage account contact settings for a given arenas
         * @summary Get manage account contact settings for a given arenas
         * @param {Array<number>} arenaIds List of arena_ids
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getArenasManageAccountContactSettings: function (arenaIds, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getArenasManageAccountContactSettings(arenaIds, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['ArenasApi.getArenasManageAccountContactSettings']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.ArenasApiFp = ArenasApiFp;
/**
 * ArenasApi - factory interface
 * @export
 */
var ArenasApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.ArenasApiFp)(configuration);
    return {
        /**
         * Get an un-paginated list of allocation types.
         * @summary Get a list of allocation types for the given arena
         * @param {number} arenaId Id of the arena to operate within
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllocationTypes: function (arenaId, options) {
            return localVarFp.getAllocationTypes(arenaId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get an arena by ID.
         * @summary Get arena
         * @param {number} id Id of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getArena: function (id, options) {
            return localVarFp.getArena(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get allocationTypes for a given arena by ID
         * @summary Get allocation types for a given arena by ID
         * @param {number} arenaId Id of the arena to operate within
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getArenaNetIncomeTypes: function (arenaId, options) {
            return localVarFp.getArenaNetIncomeTypes(arenaId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get payment settings for a given arena by ID
         * @summary Get payment settings for a given arena
         * @param {number} arenaId Id of the arena to operate within
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getArenaPaymentSettings: function (arenaId, options) {
            return localVarFp.getArenaPaymentSettings(arenaId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get an un-paginated list of all arenas, optionally filtered by a list of arena IDs.
         * @summary Get a list of Arenas
         * @param {Array<number>} [ids] Optional comma separated list of ids to filter resources by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getArenas: function (ids, options) {
            return localVarFp.getArenas(ids, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get manage account contact settings for a given arenas
         * @summary Get manage account contact settings for a given arenas
         * @param {Array<number>} arenaIds List of arena_ids
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getArenasManageAccountContactSettings: function (arenaIds, options) {
            return localVarFp.getArenasManageAccountContactSettings(arenaIds, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.ArenasApiFactory = ArenasApiFactory;
/**
 * ArenasApi - object-oriented interface
 * @export
 * @class ArenasApi
 * @extends {BaseAPI}
 */
var ArenasApi = /** @class */ (function (_super) {
    __extends(ArenasApi, _super);
    function ArenasApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Get an un-paginated list of allocation types.
     * @summary Get a list of allocation types for the given arena
     * @param {number} arenaId Id of the arena to operate within
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArenasApi
     */
    ArenasApi.prototype.getAllocationTypes = function (arenaId, options) {
        var _this = this;
        return (0, exports.ArenasApiFp)(this.configuration).getAllocationTypes(arenaId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get an arena by ID.
     * @summary Get arena
     * @param {number} id Id of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArenasApi
     */
    ArenasApi.prototype.getArena = function (id, options) {
        var _this = this;
        return (0, exports.ArenasApiFp)(this.configuration).getArena(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get allocationTypes for a given arena by ID
     * @summary Get allocation types for a given arena by ID
     * @param {number} arenaId Id of the arena to operate within
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArenasApi
     */
    ArenasApi.prototype.getArenaNetIncomeTypes = function (arenaId, options) {
        var _this = this;
        return (0, exports.ArenasApiFp)(this.configuration).getArenaNetIncomeTypes(arenaId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get payment settings for a given arena by ID
     * @summary Get payment settings for a given arena
     * @param {number} arenaId Id of the arena to operate within
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArenasApi
     */
    ArenasApi.prototype.getArenaPaymentSettings = function (arenaId, options) {
        var _this = this;
        return (0, exports.ArenasApiFp)(this.configuration).getArenaPaymentSettings(arenaId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get an un-paginated list of all arenas, optionally filtered by a list of arena IDs.
     * @summary Get a list of Arenas
     * @param {Array<number>} [ids] Optional comma separated list of ids to filter resources by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArenasApi
     */
    ArenasApi.prototype.getArenas = function (ids, options) {
        var _this = this;
        return (0, exports.ArenasApiFp)(this.configuration).getArenas(ids, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get manage account contact settings for a given arenas
     * @summary Get manage account contact settings for a given arenas
     * @param {Array<number>} arenaIds List of arena_ids
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArenasApi
     */
    ArenasApi.prototype.getArenasManageAccountContactSettings = function (arenaIds, options) {
        var _this = this;
        return (0, exports.ArenasApiFp)(this.configuration).getArenasManageAccountContactSettings(arenaIds, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return ArenasApi;
}(base_1.BaseAPI));
exports.ArenasApi = ArenasApi;
/**
 * BankAccountApi - axios parameter creator
 * @export
 */
var BankAccountApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Get the name of the provided bank_account_id
         * @summary Get a bank account (BankAccountModel)
         * @param {number} id Id of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBankAccount: function (id, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'id' is not null or undefined
                    (0, common_1.assertParamExists)('getBankAccount', 'id', id);
                    localVarPath = "/bank_account/{id}"
                        .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.BankAccountApiAxiosParamCreator = BankAccountApiAxiosParamCreator;
/**
 * BankAccountApi - functional programming interface
 * @export
 */
var BankAccountApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.BankAccountApiAxiosParamCreator)(configuration);
    return {
        /**
         * Get the name of the provided bank_account_id
         * @summary Get a bank account (BankAccountModel)
         * @param {number} id Id of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBankAccount: function (id, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getBankAccount(id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['BankAccountApi.getBankAccount']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.BankAccountApiFp = BankAccountApiFp;
/**
 * BankAccountApi - factory interface
 * @export
 */
var BankAccountApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.BankAccountApiFp)(configuration);
    return {
        /**
         * Get the name of the provided bank_account_id
         * @summary Get a bank account (BankAccountModel)
         * @param {number} id Id of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBankAccount: function (id, options) {
            return localVarFp.getBankAccount(id, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.BankAccountApiFactory = BankAccountApiFactory;
/**
 * BankAccountApi - object-oriented interface
 * @export
 * @class BankAccountApi
 * @extends {BaseAPI}
 */
var BankAccountApi = /** @class */ (function (_super) {
    __extends(BankAccountApi, _super);
    function BankAccountApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Get the name of the provided bank_account_id
     * @summary Get a bank account (BankAccountModel)
     * @param {number} id Id of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankAccountApi
     */
    BankAccountApi.prototype.getBankAccount = function (id, options) {
        var _this = this;
        return (0, exports.BankAccountApiFp)(this.configuration).getBankAccount(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return BankAccountApi;
}(base_1.BaseAPI));
exports.BankAccountApi = BankAccountApi;
/**
 * DiligencesApi - axios parameter creator
 * @export
 */
var DiligencesApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Create a diligence and underlying KYC/watchlists. This method is considered deprecated and used to bridge the gap until the compliance service API is fully available.
         * @summary Create a diligence object and underlying KYC/watchlists
         * @param {CreateDiligence} [createDiligence]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDiligences: function (createDiligence, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/diligences";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(createDiligence, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Get an un-paginated list of diligences
         * @summary Get a list of diligences
         * @param {DiligenceCategory} diligenceCategory Category of diligences to filter on
         * @param {ObjectType} [objectType] Optional object_type to filter by. Should match an ObjectType enum.
         * @param {number} [objectId] Object ID to filter on
         * @param {Array<number>} [objectIds] Object IDs to filter on
         * @param {DiligenceType} [diligenceType] Type of Diligence to filter on
         * @param {DiligenceStatus} [diligenceStatus] Status of diligence in submission workflow.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDiligences: function (diligenceCategory, objectType, objectId, objectIds, diligenceType, diligenceStatus, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'diligenceCategory' is not null or undefined
                    (0, common_1.assertParamExists)('getDiligences', 'diligenceCategory', diligenceCategory);
                    localVarPath = "/diligences";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (diligenceCategory !== undefined) {
                        localVarQueryParameter['diligence_category'] = diligenceCategory;
                    }
                    if (objectType !== undefined) {
                        localVarQueryParameter['object_type'] = objectType;
                    }
                    if (objectId !== undefined) {
                        localVarQueryParameter['object_id'] = objectId;
                    }
                    if (objectIds) {
                        localVarQueryParameter['object_ids'] = objectIds.join(base_1.COLLECTION_FORMATS.csv);
                    }
                    if (diligenceType !== undefined) {
                        localVarQueryParameter['diligence_type'] = diligenceType;
                    }
                    if (diligenceStatus !== undefined) {
                        localVarQueryParameter['diligence_status'] = diligenceStatus;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.DiligencesApiAxiosParamCreator = DiligencesApiAxiosParamCreator;
/**
 * DiligencesApi - functional programming interface
 * @export
 */
var DiligencesApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.DiligencesApiAxiosParamCreator)(configuration);
    return {
        /**
         * Create a diligence and underlying KYC/watchlists. This method is considered deprecated and used to bridge the gap until the compliance service API is fully available.
         * @summary Create a diligence object and underlying KYC/watchlists
         * @param {CreateDiligence} [createDiligence]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDiligences: function (createDiligence, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createDiligences(createDiligence, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['DiligencesApi.createDiligences']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get an un-paginated list of diligences
         * @summary Get a list of diligences
         * @param {DiligenceCategory} diligenceCategory Category of diligences to filter on
         * @param {ObjectType} [objectType] Optional object_type to filter by. Should match an ObjectType enum.
         * @param {number} [objectId] Object ID to filter on
         * @param {Array<number>} [objectIds] Object IDs to filter on
         * @param {DiligenceType} [diligenceType] Type of Diligence to filter on
         * @param {DiligenceStatus} [diligenceStatus] Status of diligence in submission workflow.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDiligences: function (diligenceCategory, objectType, objectId, objectIds, diligenceType, diligenceStatus, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getDiligences(diligenceCategory, objectType, objectId, objectIds, diligenceType, diligenceStatus, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['DiligencesApi.getDiligences']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.DiligencesApiFp = DiligencesApiFp;
/**
 * DiligencesApi - factory interface
 * @export
 */
var DiligencesApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.DiligencesApiFp)(configuration);
    return {
        /**
         * Create a diligence and underlying KYC/watchlists. This method is considered deprecated and used to bridge the gap until the compliance service API is fully available.
         * @summary Create a diligence object and underlying KYC/watchlists
         * @param {CreateDiligence} [createDiligence]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDiligences: function (createDiligence, options) {
            return localVarFp.createDiligences(createDiligence, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get an un-paginated list of diligences
         * @summary Get a list of diligences
         * @param {DiligenceCategory} diligenceCategory Category of diligences to filter on
         * @param {ObjectType} [objectType] Optional object_type to filter by. Should match an ObjectType enum.
         * @param {number} [objectId] Object ID to filter on
         * @param {Array<number>} [objectIds] Object IDs to filter on
         * @param {DiligenceType} [diligenceType] Type of Diligence to filter on
         * @param {DiligenceStatus} [diligenceStatus] Status of diligence in submission workflow.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDiligences: function (diligenceCategory, objectType, objectId, objectIds, diligenceType, diligenceStatus, options) {
            return localVarFp.getDiligences(diligenceCategory, objectType, objectId, objectIds, diligenceType, diligenceStatus, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.DiligencesApiFactory = DiligencesApiFactory;
/**
 * DiligencesApi - object-oriented interface
 * @export
 * @class DiligencesApi
 * @extends {BaseAPI}
 */
var DiligencesApi = /** @class */ (function (_super) {
    __extends(DiligencesApi, _super);
    function DiligencesApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Create a diligence and underlying KYC/watchlists. This method is considered deprecated and used to bridge the gap until the compliance service API is fully available.
     * @summary Create a diligence object and underlying KYC/watchlists
     * @param {CreateDiligence} [createDiligence]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiligencesApi
     */
    DiligencesApi.prototype.createDiligences = function (createDiligence, options) {
        var _this = this;
        return (0, exports.DiligencesApiFp)(this.configuration).createDiligences(createDiligence, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get an un-paginated list of diligences
     * @summary Get a list of diligences
     * @param {DiligenceCategory} diligenceCategory Category of diligences to filter on
     * @param {ObjectType} [objectType] Optional object_type to filter by. Should match an ObjectType enum.
     * @param {number} [objectId] Object ID to filter on
     * @param {Array<number>} [objectIds] Object IDs to filter on
     * @param {DiligenceType} [diligenceType] Type of Diligence to filter on
     * @param {DiligenceStatus} [diligenceStatus] Status of diligence in submission workflow.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiligencesApi
     */
    DiligencesApi.prototype.getDiligences = function (diligenceCategory, objectType, objectId, objectIds, diligenceType, diligenceStatus, options) {
        var _this = this;
        return (0, exports.DiligencesApiFp)(this.configuration).getDiligences(diligenceCategory, objectType, objectId, objectIds, diligenceType, diligenceStatus, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return DiligencesApi;
}(base_1.BaseAPI));
exports.DiligencesApi = DiligencesApi;
/**
 * DistributionApi - axios parameter creator
 * @export
 */
var DistributionApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Get a distribution by the given distribution id. This does not handle auth.
         * @summary Get distribution
         * @param {number} id Id of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDistribution: function (id, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'id' is not null or undefined
                    (0, common_1.assertParamExists)('getDistribution', 'id', id);
                    localVarPath = "/distributions/{id}"
                        .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.DistributionApiAxiosParamCreator = DistributionApiAxiosParamCreator;
/**
 * DistributionApi - functional programming interface
 * @export
 */
var DistributionApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.DistributionApiAxiosParamCreator)(configuration);
    return {
        /**
         * Get a distribution by the given distribution id. This does not handle auth.
         * @summary Get distribution
         * @param {number} id Id of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDistribution: function (id, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getDistribution(id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['DistributionApi.getDistribution']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.DistributionApiFp = DistributionApiFp;
/**
 * DistributionApi - factory interface
 * @export
 */
var DistributionApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.DistributionApiFp)(configuration);
    return {
        /**
         * Get a distribution by the given distribution id. This does not handle auth.
         * @summary Get distribution
         * @param {number} id Id of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDistribution: function (id, options) {
            return localVarFp.getDistribution(id, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.DistributionApiFactory = DistributionApiFactory;
/**
 * DistributionApi - object-oriented interface
 * @export
 * @class DistributionApi
 * @extends {BaseAPI}
 */
var DistributionApi = /** @class */ (function (_super) {
    __extends(DistributionApi, _super);
    function DistributionApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Get a distribution by the given distribution id. This does not handle auth.
     * @summary Get distribution
     * @param {number} id Id of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DistributionApi
     */
    DistributionApi.prototype.getDistribution = function (id, options) {
        var _this = this;
        return (0, exports.DistributionApiFp)(this.configuration).getDistribution(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return DistributionApi;
}(base_1.BaseAPI));
exports.DistributionApi = DistributionApi;
/**
 * DistributionBatchesApi - axios parameter creator
 * @export
 */
var DistributionBatchesApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Get a distribution batch by ID. This does not handle auth checks.
         * @summary Get distribution batch no authorization checks
         * @param {number} id Id of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDistributionBatch: function (id, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'id' is not null or undefined
                    (0, common_1.assertParamExists)('getDistributionBatch', 'id', id);
                    localVarPath = "/distribution_batches/{id}/"
                        .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Get distributions for a distribution batch by distribution batch ID. This does not handle auth.
         * @summary Get distributions for a distribution batch not authorization checks
         * @param {number} id Id of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDistributionsForDistributionBatch: function (id, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'id' is not null or undefined
                    (0, common_1.assertParamExists)('getDistributionsForDistributionBatch', 'id', id);
                    localVarPath = "/distribution_batches/{id}/distributions"
                        .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.DistributionBatchesApiAxiosParamCreator = DistributionBatchesApiAxiosParamCreator;
/**
 * DistributionBatchesApi - functional programming interface
 * @export
 */
var DistributionBatchesApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.DistributionBatchesApiAxiosParamCreator)(configuration);
    return {
        /**
         * Get a distribution batch by ID. This does not handle auth checks.
         * @summary Get distribution batch no authorization checks
         * @param {number} id Id of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDistributionBatch: function (id, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getDistributionBatch(id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['DistributionBatchesApi.getDistributionBatch']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get distributions for a distribution batch by distribution batch ID. This does not handle auth.
         * @summary Get distributions for a distribution batch not authorization checks
         * @param {number} id Id of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDistributionsForDistributionBatch: function (id, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getDistributionsForDistributionBatch(id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['DistributionBatchesApi.getDistributionsForDistributionBatch']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.DistributionBatchesApiFp = DistributionBatchesApiFp;
/**
 * DistributionBatchesApi - factory interface
 * @export
 */
var DistributionBatchesApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.DistributionBatchesApiFp)(configuration);
    return {
        /**
         * Get a distribution batch by ID. This does not handle auth checks.
         * @summary Get distribution batch no authorization checks
         * @param {number} id Id of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDistributionBatch: function (id, options) {
            return localVarFp.getDistributionBatch(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get distributions for a distribution batch by distribution batch ID. This does not handle auth.
         * @summary Get distributions for a distribution batch not authorization checks
         * @param {number} id Id of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDistributionsForDistributionBatch: function (id, options) {
            return localVarFp.getDistributionsForDistributionBatch(id, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.DistributionBatchesApiFactory = DistributionBatchesApiFactory;
/**
 * DistributionBatchesApi - object-oriented interface
 * @export
 * @class DistributionBatchesApi
 * @extends {BaseAPI}
 */
var DistributionBatchesApi = /** @class */ (function (_super) {
    __extends(DistributionBatchesApi, _super);
    function DistributionBatchesApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Get a distribution batch by ID. This does not handle auth checks.
     * @summary Get distribution batch no authorization checks
     * @param {number} id Id of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DistributionBatchesApi
     */
    DistributionBatchesApi.prototype.getDistributionBatch = function (id, options) {
        var _this = this;
        return (0, exports.DistributionBatchesApiFp)(this.configuration).getDistributionBatch(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get distributions for a distribution batch by distribution batch ID. This does not handle auth.
     * @summary Get distributions for a distribution batch not authorization checks
     * @param {number} id Id of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DistributionBatchesApi
     */
    DistributionBatchesApi.prototype.getDistributionsForDistributionBatch = function (id, options) {
        var _this = this;
        return (0, exports.DistributionBatchesApiFp)(this.configuration).getDistributionsForDistributionBatch(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return DistributionBatchesApi;
}(base_1.BaseAPI));
exports.DistributionBatchesApi = DistributionBatchesApi;
/**
 * EntitiesApi - axios parameter creator
 * @export
 */
var EntitiesApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Get an un-paginated list of investment entities with their positions.
         * @summary Get a list of investment entities with their positions in an arena
         * @param {number} arenaId Id of the arena to operate within
         * @param {Array<string>} [entityIds] Comma separated list of entity ids.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntitiesWithPositions: function (arenaId, entityIds, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'arenaId' is not null or undefined
                    (0, common_1.assertParamExists)('getEntitiesWithPositions', 'arenaId', arenaId);
                    localVarPath = "/arenas/{arena_id}/entities"
                        .replace("{".concat("arena_id", "}"), encodeURIComponent(String(arenaId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (entityIds) {
                        localVarQueryParameter['entity_ids'] = entityIds.join(base_1.COLLECTION_FORMATS.csv);
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Get the name of the provided entity_id
         * @summary Get an entity (AccountModel)
         * @param {number} id Id of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntity: function (id, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'id' is not null or undefined
                    (0, common_1.assertParamExists)('getEntity', 'id', id);
                    localVarPath = "/entities/{id}"
                        .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Get an un-paginated list of entity ids filtered by query params
         * @summary Get entity ids
         * @param {boolean} [isFundAdmin] Flag to fetch FA only resource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityIds: function (isFundAdmin, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/entity-ids";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (isFundAdmin !== undefined) {
                        localVarQueryParameter['is_fund_admin'] = isFundAdmin;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Get an un-paginated list of positions in an investment entity.
         * @summary Get a list of positions in an investment entity.
         * @param {number} id Id of the resource
         * @param {Array<string>} [cabPeriodEnds] Comma separated list of dates for calculating cab. Date format should be YYYY-MM-DDThh:mm:ssZ.
         * @param {Array<string>} [transactionDates] Comma separated list of dates. Format should be YYYY-MM-DDThh:mm:ssZ.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityPositions: function (id, cabPeriodEnds, transactionDates, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'id' is not null or undefined
                    (0, common_1.assertParamExists)('getEntityPositions', 'id', id);
                    localVarPath = "/entities/{id}/positions"
                        .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (cabPeriodEnds) {
                        localVarQueryParameter['cab_period_ends'] = cabPeriodEnds.join(base_1.COLLECTION_FORMATS.csv);
                    }
                    if (transactionDates) {
                        localVarQueryParameter['transaction_dates'] = transactionDates.join(base_1.COLLECTION_FORMATS.csv);
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.EntitiesApiAxiosParamCreator = EntitiesApiAxiosParamCreator;
/**
 * EntitiesApi - functional programming interface
 * @export
 */
var EntitiesApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.EntitiesApiAxiosParamCreator)(configuration);
    return {
        /**
         * Get an un-paginated list of investment entities with their positions.
         * @summary Get a list of investment entities with their positions in an arena
         * @param {number} arenaId Id of the arena to operate within
         * @param {Array<string>} [entityIds] Comma separated list of entity ids.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntitiesWithPositions: function (arenaId, entityIds, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getEntitiesWithPositions(arenaId, entityIds, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['EntitiesApi.getEntitiesWithPositions']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get the name of the provided entity_id
         * @summary Get an entity (AccountModel)
         * @param {number} id Id of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntity: function (id, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getEntity(id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['EntitiesApi.getEntity']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get an un-paginated list of entity ids filtered by query params
         * @summary Get entity ids
         * @param {boolean} [isFundAdmin] Flag to fetch FA only resource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityIds: function (isFundAdmin, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getEntityIds(isFundAdmin, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['EntitiesApi.getEntityIds']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get an un-paginated list of positions in an investment entity.
         * @summary Get a list of positions in an investment entity.
         * @param {number} id Id of the resource
         * @param {Array<string>} [cabPeriodEnds] Comma separated list of dates for calculating cab. Date format should be YYYY-MM-DDThh:mm:ssZ.
         * @param {Array<string>} [transactionDates] Comma separated list of dates. Format should be YYYY-MM-DDThh:mm:ssZ.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityPositions: function (id, cabPeriodEnds, transactionDates, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getEntityPositions(id, cabPeriodEnds, transactionDates, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['EntitiesApi.getEntityPositions']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.EntitiesApiFp = EntitiesApiFp;
/**
 * EntitiesApi - factory interface
 * @export
 */
var EntitiesApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.EntitiesApiFp)(configuration);
    return {
        /**
         * Get an un-paginated list of investment entities with their positions.
         * @summary Get a list of investment entities with their positions in an arena
         * @param {number} arenaId Id of the arena to operate within
         * @param {Array<string>} [entityIds] Comma separated list of entity ids.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntitiesWithPositions: function (arenaId, entityIds, options) {
            return localVarFp.getEntitiesWithPositions(arenaId, entityIds, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get the name of the provided entity_id
         * @summary Get an entity (AccountModel)
         * @param {number} id Id of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntity: function (id, options) {
            return localVarFp.getEntity(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get an un-paginated list of entity ids filtered by query params
         * @summary Get entity ids
         * @param {boolean} [isFundAdmin] Flag to fetch FA only resource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityIds: function (isFundAdmin, options) {
            return localVarFp.getEntityIds(isFundAdmin, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get an un-paginated list of positions in an investment entity.
         * @summary Get a list of positions in an investment entity.
         * @param {number} id Id of the resource
         * @param {Array<string>} [cabPeriodEnds] Comma separated list of dates for calculating cab. Date format should be YYYY-MM-DDThh:mm:ssZ.
         * @param {Array<string>} [transactionDates] Comma separated list of dates. Format should be YYYY-MM-DDThh:mm:ssZ.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityPositions: function (id, cabPeriodEnds, transactionDates, options) {
            return localVarFp.getEntityPositions(id, cabPeriodEnds, transactionDates, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.EntitiesApiFactory = EntitiesApiFactory;
/**
 * EntitiesApi - object-oriented interface
 * @export
 * @class EntitiesApi
 * @extends {BaseAPI}
 */
var EntitiesApi = /** @class */ (function (_super) {
    __extends(EntitiesApi, _super);
    function EntitiesApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Get an un-paginated list of investment entities with their positions.
     * @summary Get a list of investment entities with their positions in an arena
     * @param {number} arenaId Id of the arena to operate within
     * @param {Array<string>} [entityIds] Comma separated list of entity ids.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.getEntitiesWithPositions = function (arenaId, entityIds, options) {
        var _this = this;
        return (0, exports.EntitiesApiFp)(this.configuration).getEntitiesWithPositions(arenaId, entityIds, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get the name of the provided entity_id
     * @summary Get an entity (AccountModel)
     * @param {number} id Id of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.getEntity = function (id, options) {
        var _this = this;
        return (0, exports.EntitiesApiFp)(this.configuration).getEntity(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get an un-paginated list of entity ids filtered by query params
     * @summary Get entity ids
     * @param {boolean} [isFundAdmin] Flag to fetch FA only resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.getEntityIds = function (isFundAdmin, options) {
        var _this = this;
        return (0, exports.EntitiesApiFp)(this.configuration).getEntityIds(isFundAdmin, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get an un-paginated list of positions in an investment entity.
     * @summary Get a list of positions in an investment entity.
     * @param {number} id Id of the resource
     * @param {Array<string>} [cabPeriodEnds] Comma separated list of dates for calculating cab. Date format should be YYYY-MM-DDThh:mm:ssZ.
     * @param {Array<string>} [transactionDates] Comma separated list of dates. Format should be YYYY-MM-DDThh:mm:ssZ.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.getEntityPositions = function (id, cabPeriodEnds, transactionDates, options) {
        var _this = this;
        return (0, exports.EntitiesApiFp)(this.configuration).getEntityPositions(id, cabPeriodEnds, transactionDates, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return EntitiesApi;
}(base_1.BaseAPI));
exports.EntitiesApi = EntitiesApi;
/**
 * FeatureFlagsApi - axios parameter creator
 * @export
 */
var FeatureFlagsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Bulk update the state of arena feature flags.
         * @summary Bulk Update Arena Feature Flags
         * @param {number} arenaId Id of the arena to operate within
         * @param {BulkUpdateFeatureFlags} [bulkUpdateFeatureFlags] Fields used to update arena feature flags in bulk.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkUpdateArenaFeatureFlags: function (arenaId, bulkUpdateFeatureFlags, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'arenaId' is not null or undefined
                            (0, common_1.assertParamExists)('bulkUpdateArenaFeatureFlags', 'arenaId', arenaId);
                            localVarPath = "/feature-flags/arena-feature-flags/{arena_id}/"
                                .replace("{".concat("arena_id", "}"), encodeURIComponent(String(arenaId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication csrf-token required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-CSRF-Token", configuration)];
                        case 1:
                            // authentication csrf-token required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(bulkUpdateFeatureFlags, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Bulk update the state of developer feature flags.
         * @summary Bulk Update Developer Feature Flags
         * @param {BulkUpdateFeatureFlags} [bulkUpdateFeatureFlags] Fields used to update developer feature flags in bulk.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkUpdateDeveloperFeatureFlags: function (bulkUpdateFeatureFlags, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/feature-flags/developer-feature-flags/";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication csrf-token required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-CSRF-Token", configuration)];
                        case 1:
                            // authentication csrf-token required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(bulkUpdateFeatureFlags, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Retrieves an arena feature flag by feature flag name and arena domain
         * @summary Arena Feature Flag
         * @param {number} arenaId Id of the arena to operate within
         * @param {string} featureFlagName Name of the feature flag to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getArenaFeatureFlag: function (arenaId, featureFlagName, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'arenaId' is not null or undefined
                    (0, common_1.assertParamExists)('getArenaFeatureFlag', 'arenaId', arenaId);
                    // verify required parameter 'featureFlagName' is not null or undefined
                    (0, common_1.assertParamExists)('getArenaFeatureFlag', 'featureFlagName', featureFlagName);
                    localVarPath = "/feature-flags/arena-feature-flags/{arena_id}/{feature_flag_name}/"
                        .replace("{".concat("arena_id", "}"), encodeURIComponent(String(arenaId)))
                        .replace("{".concat("feature_flag_name", "}"), encodeURIComponent(String(featureFlagName)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Retrieves all arena-level feature flags for an arena.
         * @summary Feature Flags for Arena
         * @param {number} arenaId Id of the arena to operate within
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getArenaFeatureFlags: function (arenaId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'arenaId' is not null or undefined
                    (0, common_1.assertParamExists)('getArenaFeatureFlags', 'arenaId', arenaId);
                    localVarPath = "/feature-flags/arena-feature-flags/{arena_id}/"
                        .replace("{".concat("arena_id", "}"), encodeURIComponent(String(arenaId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Retrieves a developer feature flag by name.
         * @summary Developer Feature Flag
         * @param {string} featureFlagName Name of the feature flag to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeveloperFeatureFlag: function (featureFlagName, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'featureFlagName' is not null or undefined
                    (0, common_1.assertParamExists)('getDeveloperFeatureFlag', 'featureFlagName', featureFlagName);
                    localVarPath = "/feature-flags/developer-feature-flags/{feature_flag_name}/"
                        .replace("{".concat("feature_flag_name", "}"), encodeURIComponent(String(featureFlagName)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Retrieves all developer feature flags.
         * @summary Developer Feature Flags
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeveloperFeatureFlags: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/feature-flags/developer-feature-flags/";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Update a developer feature flag
         * @summary Update Arena Feature Flag
         * @param {number} arenaId Id of the arena to operate within
         * @param {string} featureFlagName Name of the feature flag to retrieve
         * @param {UpdateFeatureFlag} [updateFeatureFlag] Fields used to update (patch) an arena feature flag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateArenaFeatureFlag: function (arenaId, featureFlagName, updateFeatureFlag, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'arenaId' is not null or undefined
                    (0, common_1.assertParamExists)('updateArenaFeatureFlag', 'arenaId', arenaId);
                    // verify required parameter 'featureFlagName' is not null or undefined
                    (0, common_1.assertParamExists)('updateArenaFeatureFlag', 'featureFlagName', featureFlagName);
                    localVarPath = "/feature-flags/arena-feature-flags/{arena_id}/{feature_flag_name}/"
                        .replace("{".concat("arena_id", "}"), encodeURIComponent(String(arenaId)))
                        .replace("{".concat("feature_flag_name", "}"), encodeURIComponent(String(featureFlagName)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(updateFeatureFlag, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Update a developer feature flag
         * @summary Update Developer Feature Flag
         * @param {string} featureFlagName Name of the feature flag to retrieve
         * @param {UpdateFeatureFlag} [updateFeatureFlag] Fields used to update (patch) a developer feature flag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDeveloperFeatureFlag: function (featureFlagName, updateFeatureFlag, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'featureFlagName' is not null or undefined
                    (0, common_1.assertParamExists)('updateDeveloperFeatureFlag', 'featureFlagName', featureFlagName);
                    localVarPath = "/feature-flags/developer-feature-flags/{feature_flag_name}/"
                        .replace("{".concat("feature_flag_name", "}"), encodeURIComponent(String(featureFlagName)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(updateFeatureFlag, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.FeatureFlagsApiAxiosParamCreator = FeatureFlagsApiAxiosParamCreator;
/**
 * FeatureFlagsApi - functional programming interface
 * @export
 */
var FeatureFlagsApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.FeatureFlagsApiAxiosParamCreator)(configuration);
    return {
        /**
         * Bulk update the state of arena feature flags.
         * @summary Bulk Update Arena Feature Flags
         * @param {number} arenaId Id of the arena to operate within
         * @param {BulkUpdateFeatureFlags} [bulkUpdateFeatureFlags] Fields used to update arena feature flags in bulk.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkUpdateArenaFeatureFlags: function (arenaId, bulkUpdateFeatureFlags, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.bulkUpdateArenaFeatureFlags(arenaId, bulkUpdateFeatureFlags, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['FeatureFlagsApi.bulkUpdateArenaFeatureFlags']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Bulk update the state of developer feature flags.
         * @summary Bulk Update Developer Feature Flags
         * @param {BulkUpdateFeatureFlags} [bulkUpdateFeatureFlags] Fields used to update developer feature flags in bulk.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkUpdateDeveloperFeatureFlags: function (bulkUpdateFeatureFlags, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.bulkUpdateDeveloperFeatureFlags(bulkUpdateFeatureFlags, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['FeatureFlagsApi.bulkUpdateDeveloperFeatureFlags']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Retrieves an arena feature flag by feature flag name and arena domain
         * @summary Arena Feature Flag
         * @param {number} arenaId Id of the arena to operate within
         * @param {string} featureFlagName Name of the feature flag to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getArenaFeatureFlag: function (arenaId, featureFlagName, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getArenaFeatureFlag(arenaId, featureFlagName, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['FeatureFlagsApi.getArenaFeatureFlag']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Retrieves all arena-level feature flags for an arena.
         * @summary Feature Flags for Arena
         * @param {number} arenaId Id of the arena to operate within
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getArenaFeatureFlags: function (arenaId, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getArenaFeatureFlags(arenaId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['FeatureFlagsApi.getArenaFeatureFlags']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Retrieves a developer feature flag by name.
         * @summary Developer Feature Flag
         * @param {string} featureFlagName Name of the feature flag to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeveloperFeatureFlag: function (featureFlagName, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getDeveloperFeatureFlag(featureFlagName, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['FeatureFlagsApi.getDeveloperFeatureFlag']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Retrieves all developer feature flags.
         * @summary Developer Feature Flags
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeveloperFeatureFlags: function (options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getDeveloperFeatureFlags(options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['FeatureFlagsApi.getDeveloperFeatureFlags']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Update a developer feature flag
         * @summary Update Arena Feature Flag
         * @param {number} arenaId Id of the arena to operate within
         * @param {string} featureFlagName Name of the feature flag to retrieve
         * @param {UpdateFeatureFlag} [updateFeatureFlag] Fields used to update (patch) an arena feature flag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateArenaFeatureFlag: function (arenaId, featureFlagName, updateFeatureFlag, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateArenaFeatureFlag(arenaId, featureFlagName, updateFeatureFlag, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['FeatureFlagsApi.updateArenaFeatureFlag']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Update a developer feature flag
         * @summary Update Developer Feature Flag
         * @param {string} featureFlagName Name of the feature flag to retrieve
         * @param {UpdateFeatureFlag} [updateFeatureFlag] Fields used to update (patch) a developer feature flag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDeveloperFeatureFlag: function (featureFlagName, updateFeatureFlag, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateDeveloperFeatureFlag(featureFlagName, updateFeatureFlag, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['FeatureFlagsApi.updateDeveloperFeatureFlag']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.FeatureFlagsApiFp = FeatureFlagsApiFp;
/**
 * FeatureFlagsApi - factory interface
 * @export
 */
var FeatureFlagsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.FeatureFlagsApiFp)(configuration);
    return {
        /**
         * Bulk update the state of arena feature flags.
         * @summary Bulk Update Arena Feature Flags
         * @param {number} arenaId Id of the arena to operate within
         * @param {BulkUpdateFeatureFlags} [bulkUpdateFeatureFlags] Fields used to update arena feature flags in bulk.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkUpdateArenaFeatureFlags: function (arenaId, bulkUpdateFeatureFlags, options) {
            return localVarFp.bulkUpdateArenaFeatureFlags(arenaId, bulkUpdateFeatureFlags, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Bulk update the state of developer feature flags.
         * @summary Bulk Update Developer Feature Flags
         * @param {BulkUpdateFeatureFlags} [bulkUpdateFeatureFlags] Fields used to update developer feature flags in bulk.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkUpdateDeveloperFeatureFlags: function (bulkUpdateFeatureFlags, options) {
            return localVarFp.bulkUpdateDeveloperFeatureFlags(bulkUpdateFeatureFlags, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Retrieves an arena feature flag by feature flag name and arena domain
         * @summary Arena Feature Flag
         * @param {number} arenaId Id of the arena to operate within
         * @param {string} featureFlagName Name of the feature flag to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getArenaFeatureFlag: function (arenaId, featureFlagName, options) {
            return localVarFp.getArenaFeatureFlag(arenaId, featureFlagName, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Retrieves all arena-level feature flags for an arena.
         * @summary Feature Flags for Arena
         * @param {number} arenaId Id of the arena to operate within
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getArenaFeatureFlags: function (arenaId, options) {
            return localVarFp.getArenaFeatureFlags(arenaId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Retrieves a developer feature flag by name.
         * @summary Developer Feature Flag
         * @param {string} featureFlagName Name of the feature flag to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeveloperFeatureFlag: function (featureFlagName, options) {
            return localVarFp.getDeveloperFeatureFlag(featureFlagName, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Retrieves all developer feature flags.
         * @summary Developer Feature Flags
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeveloperFeatureFlags: function (options) {
            return localVarFp.getDeveloperFeatureFlags(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Update a developer feature flag
         * @summary Update Arena Feature Flag
         * @param {number} arenaId Id of the arena to operate within
         * @param {string} featureFlagName Name of the feature flag to retrieve
         * @param {UpdateFeatureFlag} [updateFeatureFlag] Fields used to update (patch) an arena feature flag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateArenaFeatureFlag: function (arenaId, featureFlagName, updateFeatureFlag, options) {
            return localVarFp.updateArenaFeatureFlag(arenaId, featureFlagName, updateFeatureFlag, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Update a developer feature flag
         * @summary Update Developer Feature Flag
         * @param {string} featureFlagName Name of the feature flag to retrieve
         * @param {UpdateFeatureFlag} [updateFeatureFlag] Fields used to update (patch) a developer feature flag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDeveloperFeatureFlag: function (featureFlagName, updateFeatureFlag, options) {
            return localVarFp.updateDeveloperFeatureFlag(featureFlagName, updateFeatureFlag, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.FeatureFlagsApiFactory = FeatureFlagsApiFactory;
/**
 * FeatureFlagsApi - object-oriented interface
 * @export
 * @class FeatureFlagsApi
 * @extends {BaseAPI}
 */
var FeatureFlagsApi = /** @class */ (function (_super) {
    __extends(FeatureFlagsApi, _super);
    function FeatureFlagsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Bulk update the state of arena feature flags.
     * @summary Bulk Update Arena Feature Flags
     * @param {number} arenaId Id of the arena to operate within
     * @param {BulkUpdateFeatureFlags} [bulkUpdateFeatureFlags] Fields used to update arena feature flags in bulk.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeatureFlagsApi
     */
    FeatureFlagsApi.prototype.bulkUpdateArenaFeatureFlags = function (arenaId, bulkUpdateFeatureFlags, options) {
        var _this = this;
        return (0, exports.FeatureFlagsApiFp)(this.configuration).bulkUpdateArenaFeatureFlags(arenaId, bulkUpdateFeatureFlags, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Bulk update the state of developer feature flags.
     * @summary Bulk Update Developer Feature Flags
     * @param {BulkUpdateFeatureFlags} [bulkUpdateFeatureFlags] Fields used to update developer feature flags in bulk.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeatureFlagsApi
     */
    FeatureFlagsApi.prototype.bulkUpdateDeveloperFeatureFlags = function (bulkUpdateFeatureFlags, options) {
        var _this = this;
        return (0, exports.FeatureFlagsApiFp)(this.configuration).bulkUpdateDeveloperFeatureFlags(bulkUpdateFeatureFlags, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Retrieves an arena feature flag by feature flag name and arena domain
     * @summary Arena Feature Flag
     * @param {number} arenaId Id of the arena to operate within
     * @param {string} featureFlagName Name of the feature flag to retrieve
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeatureFlagsApi
     */
    FeatureFlagsApi.prototype.getArenaFeatureFlag = function (arenaId, featureFlagName, options) {
        var _this = this;
        return (0, exports.FeatureFlagsApiFp)(this.configuration).getArenaFeatureFlag(arenaId, featureFlagName, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Retrieves all arena-level feature flags for an arena.
     * @summary Feature Flags for Arena
     * @param {number} arenaId Id of the arena to operate within
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeatureFlagsApi
     */
    FeatureFlagsApi.prototype.getArenaFeatureFlags = function (arenaId, options) {
        var _this = this;
        return (0, exports.FeatureFlagsApiFp)(this.configuration).getArenaFeatureFlags(arenaId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Retrieves a developer feature flag by name.
     * @summary Developer Feature Flag
     * @param {string} featureFlagName Name of the feature flag to retrieve
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeatureFlagsApi
     */
    FeatureFlagsApi.prototype.getDeveloperFeatureFlag = function (featureFlagName, options) {
        var _this = this;
        return (0, exports.FeatureFlagsApiFp)(this.configuration).getDeveloperFeatureFlag(featureFlagName, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Retrieves all developer feature flags.
     * @summary Developer Feature Flags
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeatureFlagsApi
     */
    FeatureFlagsApi.prototype.getDeveloperFeatureFlags = function (options) {
        var _this = this;
        return (0, exports.FeatureFlagsApiFp)(this.configuration).getDeveloperFeatureFlags(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Update a developer feature flag
     * @summary Update Arena Feature Flag
     * @param {number} arenaId Id of the arena to operate within
     * @param {string} featureFlagName Name of the feature flag to retrieve
     * @param {UpdateFeatureFlag} [updateFeatureFlag] Fields used to update (patch) an arena feature flag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeatureFlagsApi
     */
    FeatureFlagsApi.prototype.updateArenaFeatureFlag = function (arenaId, featureFlagName, updateFeatureFlag, options) {
        var _this = this;
        return (0, exports.FeatureFlagsApiFp)(this.configuration).updateArenaFeatureFlag(arenaId, featureFlagName, updateFeatureFlag, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Update a developer feature flag
     * @summary Update Developer Feature Flag
     * @param {string} featureFlagName Name of the feature flag to retrieve
     * @param {UpdateFeatureFlag} [updateFeatureFlag] Fields used to update (patch) a developer feature flag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeatureFlagsApi
     */
    FeatureFlagsApi.prototype.updateDeveloperFeatureFlag = function (featureFlagName, updateFeatureFlag, options) {
        var _this = this;
        return (0, exports.FeatureFlagsApiFp)(this.configuration).updateDeveloperFeatureFlag(featureFlagName, updateFeatureFlag, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return FeatureFlagsApi;
}(base_1.BaseAPI));
exports.FeatureFlagsApi = FeatureFlagsApi;
/**
 * PaymentPrefsApi - axios parameter creator
 * @export
 */
var PaymentPrefsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Get an un-paginated list of payment prefs filtered by a required list of payment pref IDs.
         * @summary Get a list of payment prefs
         * @param {Array<number>} ids Required comma separated list of ids to filter resources by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPaymentPrefs: function (ids, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'ids' is not null or undefined
                    (0, common_1.assertParamExists)('getPaymentPrefs', 'ids', ids);
                    localVarPath = "/payment_prefs";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (ids) {
                        localVarQueryParameter['ids'] = ids.join(base_1.COLLECTION_FORMATS.csv);
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Update (patch) the fields for a specific payment pref. This only supports verification status at the moment.
         * @summary Update payment pref
         * @param {number} id Id of the resource
         * @param {UpdatePaymentPrefOptions} [updatePaymentPrefOptions] Fields used to update a payment pref
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePaymentPref: function (id, updatePaymentPrefOptions, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'id' is not null or undefined
                    (0, common_1.assertParamExists)('updatePaymentPref', 'id', id);
                    localVarPath = "/payment_prefs/{id}"
                        .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(updatePaymentPrefOptions, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.PaymentPrefsApiAxiosParamCreator = PaymentPrefsApiAxiosParamCreator;
/**
 * PaymentPrefsApi - functional programming interface
 * @export
 */
var PaymentPrefsApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.PaymentPrefsApiAxiosParamCreator)(configuration);
    return {
        /**
         * Get an un-paginated list of payment prefs filtered by a required list of payment pref IDs.
         * @summary Get a list of payment prefs
         * @param {Array<number>} ids Required comma separated list of ids to filter resources by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPaymentPrefs: function (ids, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getPaymentPrefs(ids, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['PaymentPrefsApi.getPaymentPrefs']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Update (patch) the fields for a specific payment pref. This only supports verification status at the moment.
         * @summary Update payment pref
         * @param {number} id Id of the resource
         * @param {UpdatePaymentPrefOptions} [updatePaymentPrefOptions] Fields used to update a payment pref
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePaymentPref: function (id, updatePaymentPrefOptions, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updatePaymentPref(id, updatePaymentPrefOptions, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['PaymentPrefsApi.updatePaymentPref']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.PaymentPrefsApiFp = PaymentPrefsApiFp;
/**
 * PaymentPrefsApi - factory interface
 * @export
 */
var PaymentPrefsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.PaymentPrefsApiFp)(configuration);
    return {
        /**
         * Get an un-paginated list of payment prefs filtered by a required list of payment pref IDs.
         * @summary Get a list of payment prefs
         * @param {Array<number>} ids Required comma separated list of ids to filter resources by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPaymentPrefs: function (ids, options) {
            return localVarFp.getPaymentPrefs(ids, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Update (patch) the fields for a specific payment pref. This only supports verification status at the moment.
         * @summary Update payment pref
         * @param {number} id Id of the resource
         * @param {UpdatePaymentPrefOptions} [updatePaymentPrefOptions] Fields used to update a payment pref
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePaymentPref: function (id, updatePaymentPrefOptions, options) {
            return localVarFp.updatePaymentPref(id, updatePaymentPrefOptions, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.PaymentPrefsApiFactory = PaymentPrefsApiFactory;
/**
 * PaymentPrefsApi - object-oriented interface
 * @export
 * @class PaymentPrefsApi
 * @extends {BaseAPI}
 */
var PaymentPrefsApi = /** @class */ (function (_super) {
    __extends(PaymentPrefsApi, _super);
    function PaymentPrefsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Get an un-paginated list of payment prefs filtered by a required list of payment pref IDs.
     * @summary Get a list of payment prefs
     * @param {Array<number>} ids Required comma separated list of ids to filter resources by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentPrefsApi
     */
    PaymentPrefsApi.prototype.getPaymentPrefs = function (ids, options) {
        var _this = this;
        return (0, exports.PaymentPrefsApiFp)(this.configuration).getPaymentPrefs(ids, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Update (patch) the fields for a specific payment pref. This only supports verification status at the moment.
     * @summary Update payment pref
     * @param {number} id Id of the resource
     * @param {UpdatePaymentPrefOptions} [updatePaymentPrefOptions] Fields used to update a payment pref
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentPrefsApi
     */
    PaymentPrefsApi.prototype.updatePaymentPref = function (id, updatePaymentPrefOptions, options) {
        var _this = this;
        return (0, exports.PaymentPrefsApiFp)(this.configuration).updatePaymentPref(id, updatePaymentPrefOptions, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return PaymentPrefsApi;
}(base_1.BaseAPI));
exports.PaymentPrefsApi = PaymentPrefsApi;
/**
 * PermissionsApi - axios parameter creator
 * @export
 */
var PermissionsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Returns a list of granular permissions given user has.
         * @summary Returns a list of granular permissions given user has.
         * @param {number} arenaId Id of the arena to operate within
         * @param {number} userId User ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGranularPermissions: function (arenaId, userId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'arenaId' is not null or undefined
                    (0, common_1.assertParamExists)('getGranularPermissions', 'arenaId', arenaId);
                    // verify required parameter 'userId' is not null or undefined
                    (0, common_1.assertParamExists)('getGranularPermissions', 'userId', userId);
                    localVarPath = "/arenas/{arena_id}/users/{user_id}/granular_permissions"
                        .replace("{".concat("arena_id", "}"), encodeURIComponent(String(arenaId)))
                        .replace("{".concat("user_id", "}"), encodeURIComponent(String(userId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Determines if a user has object class level authorization provided as input an objectAuthorizationClass, [Permissions]. For staff users, permissions checks are only valid in an arena with ArenaFeatureFlags.advanced_permissions enabled.
         * @summary Determines if a user has object class level authorization provided as input an objectAuthorizationClass, [Permissions]. For staff users, permissions checks are only valid in an arena with ArenaFeatureFlags.advanced_permissions enabled.
         * @param {number} userId Required user_id to filter by.
         * @param {ObjectAuthorizedClass} objectAuthorizedClass Required object_authorized_class to filter by. Should match an AuthorizedClass enum.
         * @param {Array<Permission>} permissions List of object level permissions to filter by
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getObjectClassLevelPermissions: function (userId, objectAuthorizedClass, permissions, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'userId' is not null or undefined
                    (0, common_1.assertParamExists)('getObjectClassLevelPermissions', 'userId', userId);
                    // verify required parameter 'objectAuthorizedClass' is not null or undefined
                    (0, common_1.assertParamExists)('getObjectClassLevelPermissions', 'objectAuthorizedClass', objectAuthorizedClass);
                    // verify required parameter 'permissions' is not null or undefined
                    (0, common_1.assertParamExists)('getObjectClassLevelPermissions', 'permissions', permissions);
                    localVarPath = "/object_class_level_permission";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (userId !== undefined) {
                        localVarQueryParameter['user_id'] = userId;
                    }
                    if (objectAuthorizedClass !== undefined) {
                        localVarQueryParameter['object_authorized_class'] = objectAuthorizedClass;
                    }
                    if (permissions) {
                        localVarQueryParameter['permissions'] = permissions;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Determines if a user has object level authorization provided as input an objectType, [IDs], and [Permissions]. For staff users, permissions checks are only valid in an arena with ArenaFeatureFlags.advanced_permissions enabled. For portal users, only read permissions checks are allowed.
         * @summary Determines if a user has object level authorization provided as input an objectType, [IDs], and [Permissions]. For staff users, permissions checks are only valid in an arena with ArenaFeatureFlags.advanced_permissions enabled. For portal users, only read permissions checks are allowed.
         * @param {number} userId Required user_id to filter by.
         * @param {ObjectType} objectType Required object_type to filter by. Should match an ObjectType enum.
         * @param {Array<number>} objectIds List of objects_ids of the corresponding ObjectType
         * @param {Array<Permission>} permissions List of object level permissions to filter by
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getObjectLevelPermissions: function (userId, objectType, objectIds, permissions, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'userId' is not null or undefined
                    (0, common_1.assertParamExists)('getObjectLevelPermissions', 'userId', userId);
                    // verify required parameter 'objectType' is not null or undefined
                    (0, common_1.assertParamExists)('getObjectLevelPermissions', 'objectType', objectType);
                    // verify required parameter 'objectIds' is not null or undefined
                    (0, common_1.assertParamExists)('getObjectLevelPermissions', 'objectIds', objectIds);
                    // verify required parameter 'permissions' is not null or undefined
                    (0, common_1.assertParamExists)('getObjectLevelPermissions', 'permissions', permissions);
                    localVarPath = "/object_level_permission";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (userId !== undefined) {
                        localVarQueryParameter['user_id'] = userId;
                    }
                    if (objectType !== undefined) {
                        localVarQueryParameter['object_type'] = objectType;
                    }
                    if (objectIds) {
                        localVarQueryParameter['object_ids'] = objectIds.join(base_1.COLLECTION_FORMATS.csv);
                    }
                    if (permissions) {
                        localVarQueryParameter['permissions'] = permissions;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.PermissionsApiAxiosParamCreator = PermissionsApiAxiosParamCreator;
/**
 * PermissionsApi - functional programming interface
 * @export
 */
var PermissionsApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.PermissionsApiAxiosParamCreator)(configuration);
    return {
        /**
         * Returns a list of granular permissions given user has.
         * @summary Returns a list of granular permissions given user has.
         * @param {number} arenaId Id of the arena to operate within
         * @param {number} userId User ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGranularPermissions: function (arenaId, userId, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getGranularPermissions(arenaId, userId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['PermissionsApi.getGranularPermissions']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Determines if a user has object class level authorization provided as input an objectAuthorizationClass, [Permissions]. For staff users, permissions checks are only valid in an arena with ArenaFeatureFlags.advanced_permissions enabled.
         * @summary Determines if a user has object class level authorization provided as input an objectAuthorizationClass, [Permissions]. For staff users, permissions checks are only valid in an arena with ArenaFeatureFlags.advanced_permissions enabled.
         * @param {number} userId Required user_id to filter by.
         * @param {ObjectAuthorizedClass} objectAuthorizedClass Required object_authorized_class to filter by. Should match an AuthorizedClass enum.
         * @param {Array<Permission>} permissions List of object level permissions to filter by
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getObjectClassLevelPermissions: function (userId, objectAuthorizedClass, permissions, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getObjectClassLevelPermissions(userId, objectAuthorizedClass, permissions, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['PermissionsApi.getObjectClassLevelPermissions']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Determines if a user has object level authorization provided as input an objectType, [IDs], and [Permissions]. For staff users, permissions checks are only valid in an arena with ArenaFeatureFlags.advanced_permissions enabled. For portal users, only read permissions checks are allowed.
         * @summary Determines if a user has object level authorization provided as input an objectType, [IDs], and [Permissions]. For staff users, permissions checks are only valid in an arena with ArenaFeatureFlags.advanced_permissions enabled. For portal users, only read permissions checks are allowed.
         * @param {number} userId Required user_id to filter by.
         * @param {ObjectType} objectType Required object_type to filter by. Should match an ObjectType enum.
         * @param {Array<number>} objectIds List of objects_ids of the corresponding ObjectType
         * @param {Array<Permission>} permissions List of object level permissions to filter by
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getObjectLevelPermissions: function (userId, objectType, objectIds, permissions, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getObjectLevelPermissions(userId, objectType, objectIds, permissions, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['PermissionsApi.getObjectLevelPermissions']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.PermissionsApiFp = PermissionsApiFp;
/**
 * PermissionsApi - factory interface
 * @export
 */
var PermissionsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.PermissionsApiFp)(configuration);
    return {
        /**
         * Returns a list of granular permissions given user has.
         * @summary Returns a list of granular permissions given user has.
         * @param {number} arenaId Id of the arena to operate within
         * @param {number} userId User ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGranularPermissions: function (arenaId, userId, options) {
            return localVarFp.getGranularPermissions(arenaId, userId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Determines if a user has object class level authorization provided as input an objectAuthorizationClass, [Permissions]. For staff users, permissions checks are only valid in an arena with ArenaFeatureFlags.advanced_permissions enabled.
         * @summary Determines if a user has object class level authorization provided as input an objectAuthorizationClass, [Permissions]. For staff users, permissions checks are only valid in an arena with ArenaFeatureFlags.advanced_permissions enabled.
         * @param {number} userId Required user_id to filter by.
         * @param {ObjectAuthorizedClass} objectAuthorizedClass Required object_authorized_class to filter by. Should match an AuthorizedClass enum.
         * @param {Array<Permission>} permissions List of object level permissions to filter by
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getObjectClassLevelPermissions: function (userId, objectAuthorizedClass, permissions, options) {
            return localVarFp.getObjectClassLevelPermissions(userId, objectAuthorizedClass, permissions, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Determines if a user has object level authorization provided as input an objectType, [IDs], and [Permissions]. For staff users, permissions checks are only valid in an arena with ArenaFeatureFlags.advanced_permissions enabled. For portal users, only read permissions checks are allowed.
         * @summary Determines if a user has object level authorization provided as input an objectType, [IDs], and [Permissions]. For staff users, permissions checks are only valid in an arena with ArenaFeatureFlags.advanced_permissions enabled. For portal users, only read permissions checks are allowed.
         * @param {number} userId Required user_id to filter by.
         * @param {ObjectType} objectType Required object_type to filter by. Should match an ObjectType enum.
         * @param {Array<number>} objectIds List of objects_ids of the corresponding ObjectType
         * @param {Array<Permission>} permissions List of object level permissions to filter by
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getObjectLevelPermissions: function (userId, objectType, objectIds, permissions, options) {
            return localVarFp.getObjectLevelPermissions(userId, objectType, objectIds, permissions, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.PermissionsApiFactory = PermissionsApiFactory;
/**
 * PermissionsApi - object-oriented interface
 * @export
 * @class PermissionsApi
 * @extends {BaseAPI}
 */
var PermissionsApi = /** @class */ (function (_super) {
    __extends(PermissionsApi, _super);
    function PermissionsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Returns a list of granular permissions given user has.
     * @summary Returns a list of granular permissions given user has.
     * @param {number} arenaId Id of the arena to operate within
     * @param {number} userId User ID of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionsApi
     */
    PermissionsApi.prototype.getGranularPermissions = function (arenaId, userId, options) {
        var _this = this;
        return (0, exports.PermissionsApiFp)(this.configuration).getGranularPermissions(arenaId, userId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Determines if a user has object class level authorization provided as input an objectAuthorizationClass, [Permissions]. For staff users, permissions checks are only valid in an arena with ArenaFeatureFlags.advanced_permissions enabled.
     * @summary Determines if a user has object class level authorization provided as input an objectAuthorizationClass, [Permissions]. For staff users, permissions checks are only valid in an arena with ArenaFeatureFlags.advanced_permissions enabled.
     * @param {number} userId Required user_id to filter by.
     * @param {ObjectAuthorizedClass} objectAuthorizedClass Required object_authorized_class to filter by. Should match an AuthorizedClass enum.
     * @param {Array<Permission>} permissions List of object level permissions to filter by
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionsApi
     */
    PermissionsApi.prototype.getObjectClassLevelPermissions = function (userId, objectAuthorizedClass, permissions, options) {
        var _this = this;
        return (0, exports.PermissionsApiFp)(this.configuration).getObjectClassLevelPermissions(userId, objectAuthorizedClass, permissions, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Determines if a user has object level authorization provided as input an objectType, [IDs], and [Permissions]. For staff users, permissions checks are only valid in an arena with ArenaFeatureFlags.advanced_permissions enabled. For portal users, only read permissions checks are allowed.
     * @summary Determines if a user has object level authorization provided as input an objectType, [IDs], and [Permissions]. For staff users, permissions checks are only valid in an arena with ArenaFeatureFlags.advanced_permissions enabled. For portal users, only read permissions checks are allowed.
     * @param {number} userId Required user_id to filter by.
     * @param {ObjectType} objectType Required object_type to filter by. Should match an ObjectType enum.
     * @param {Array<number>} objectIds List of objects_ids of the corresponding ObjectType
     * @param {Array<Permission>} permissions List of object level permissions to filter by
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionsApi
     */
    PermissionsApi.prototype.getObjectLevelPermissions = function (userId, objectType, objectIds, permissions, options) {
        var _this = this;
        return (0, exports.PermissionsApiFp)(this.configuration).getObjectLevelPermissions(userId, objectType, objectIds, permissions, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return PermissionsApi;
}(base_1.BaseAPI));
exports.PermissionsApi = PermissionsApi;
/**
 * PositionsApi - axios parameter creator
 * @export
 */
var PositionsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Gets position of a specific arena and source
         * @summary Gets position of a specific arena and source
         * @param {number} arenaId Id of the arena to operate within
         * @param {string} externalPositionId Url safe base64 encoded version of url encoded version of source_name:url encoded version of source_object_id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExternalPosition: function (arenaId, externalPositionId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'arenaId' is not null or undefined
                    (0, common_1.assertParamExists)('getExternalPosition', 'arenaId', arenaId);
                    // verify required parameter 'externalPositionId' is not null or undefined
                    (0, common_1.assertParamExists)('getExternalPosition', 'externalPositionId', externalPositionId);
                    localVarPath = "/arenas/{arena_id}/external_positions/{external_position_id}"
                        .replace("{".concat("arena_id", "}"), encodeURIComponent(String(arenaId)))
                        .replace("{".concat("external_position_id", "}"), encodeURIComponent(String(externalPositionId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Get an un-paginated list of the entity\'s positions in its directly-owned operating companies.
         * @summary Get a list of the entity\'s positions in its directly-owned operating companies.
         * @param {number} arenaId Id of the arena to operate within
         * @param {number} entityId Id of the entity
         * @param {boolean} [excludeInactive] Whether to exclude inactive objects from the response.
         * @param {string} [asOfDate] An end date of a period. Format should be YYYY-MM-DD.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOpcoPositions: function (arenaId, entityId, excludeInactive, asOfDate, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'arenaId' is not null or undefined
                    (0, common_1.assertParamExists)('getOpcoPositions', 'arenaId', arenaId);
                    // verify required parameter 'entityId' is not null or undefined
                    (0, common_1.assertParamExists)('getOpcoPositions', 'entityId', entityId);
                    localVarPath = "/arenas/{arena_id}/entities/{entity_id}/opco_positions"
                        .replace("{".concat("arena_id", "}"), encodeURIComponent(String(arenaId)))
                        .replace("{".concat("entity_id", "}"), encodeURIComponent(String(entityId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (excludeInactive !== undefined) {
                        localVarQueryParameter['exclude_inactive'] = excludeInactive;
                    }
                    if (asOfDate !== undefined) {
                        localVarQueryParameter['as_of_date'] = asOfDate;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Gets positions by ids with account, investor group, and investment entity ids.
         * @summary Gets positions by ids with account, investor group, and investment entity ids.
         * @param {number} arenaId Id of the arena to operate within
         * @param {Array<string>} [positionIds] Comma separated list of position ids.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPositionsAttributes: function (arenaId, positionIds, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'arenaId' is not null or undefined
                    (0, common_1.assertParamExists)('getPositionsAttributes', 'arenaId', arenaId);
                    localVarPath = "/arenas/{arena_id}/positions_attributes"
                        .replace("{".concat("arena_id", "}"), encodeURIComponent(String(arenaId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (positionIds) {
                        localVarQueryParameter['position_ids'] = positionIds.join(base_1.COLLECTION_FORMATS.csv);
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.PositionsApiAxiosParamCreator = PositionsApiAxiosParamCreator;
/**
 * PositionsApi - functional programming interface
 * @export
 */
var PositionsApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.PositionsApiAxiosParamCreator)(configuration);
    return {
        /**
         * Gets position of a specific arena and source
         * @summary Gets position of a specific arena and source
         * @param {number} arenaId Id of the arena to operate within
         * @param {string} externalPositionId Url safe base64 encoded version of url encoded version of source_name:url encoded version of source_object_id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExternalPosition: function (arenaId, externalPositionId, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getExternalPosition(arenaId, externalPositionId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['PositionsApi.getExternalPosition']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get an un-paginated list of the entity\'s positions in its directly-owned operating companies.
         * @summary Get a list of the entity\'s positions in its directly-owned operating companies.
         * @param {number} arenaId Id of the arena to operate within
         * @param {number} entityId Id of the entity
         * @param {boolean} [excludeInactive] Whether to exclude inactive objects from the response.
         * @param {string} [asOfDate] An end date of a period. Format should be YYYY-MM-DD.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOpcoPositions: function (arenaId, entityId, excludeInactive, asOfDate, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getOpcoPositions(arenaId, entityId, excludeInactive, asOfDate, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['PositionsApi.getOpcoPositions']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Gets positions by ids with account, investor group, and investment entity ids.
         * @summary Gets positions by ids with account, investor group, and investment entity ids.
         * @param {number} arenaId Id of the arena to operate within
         * @param {Array<string>} [positionIds] Comma separated list of position ids.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPositionsAttributes: function (arenaId, positionIds, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getPositionsAttributes(arenaId, positionIds, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['PositionsApi.getPositionsAttributes']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.PositionsApiFp = PositionsApiFp;
/**
 * PositionsApi - factory interface
 * @export
 */
var PositionsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.PositionsApiFp)(configuration);
    return {
        /**
         * Gets position of a specific arena and source
         * @summary Gets position of a specific arena and source
         * @param {number} arenaId Id of the arena to operate within
         * @param {string} externalPositionId Url safe base64 encoded version of url encoded version of source_name:url encoded version of source_object_id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExternalPosition: function (arenaId, externalPositionId, options) {
            return localVarFp.getExternalPosition(arenaId, externalPositionId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get an un-paginated list of the entity\'s positions in its directly-owned operating companies.
         * @summary Get a list of the entity\'s positions in its directly-owned operating companies.
         * @param {number} arenaId Id of the arena to operate within
         * @param {number} entityId Id of the entity
         * @param {boolean} [excludeInactive] Whether to exclude inactive objects from the response.
         * @param {string} [asOfDate] An end date of a period. Format should be YYYY-MM-DD.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOpcoPositions: function (arenaId, entityId, excludeInactive, asOfDate, options) {
            return localVarFp.getOpcoPositions(arenaId, entityId, excludeInactive, asOfDate, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Gets positions by ids with account, investor group, and investment entity ids.
         * @summary Gets positions by ids with account, investor group, and investment entity ids.
         * @param {number} arenaId Id of the arena to operate within
         * @param {Array<string>} [positionIds] Comma separated list of position ids.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPositionsAttributes: function (arenaId, positionIds, options) {
            return localVarFp.getPositionsAttributes(arenaId, positionIds, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.PositionsApiFactory = PositionsApiFactory;
/**
 * PositionsApi - object-oriented interface
 * @export
 * @class PositionsApi
 * @extends {BaseAPI}
 */
var PositionsApi = /** @class */ (function (_super) {
    __extends(PositionsApi, _super);
    function PositionsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Gets position of a specific arena and source
     * @summary Gets position of a specific arena and source
     * @param {number} arenaId Id of the arena to operate within
     * @param {string} externalPositionId Url safe base64 encoded version of url encoded version of source_name:url encoded version of source_object_id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PositionsApi
     */
    PositionsApi.prototype.getExternalPosition = function (arenaId, externalPositionId, options) {
        var _this = this;
        return (0, exports.PositionsApiFp)(this.configuration).getExternalPosition(arenaId, externalPositionId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get an un-paginated list of the entity\'s positions in its directly-owned operating companies.
     * @summary Get a list of the entity\'s positions in its directly-owned operating companies.
     * @param {number} arenaId Id of the arena to operate within
     * @param {number} entityId Id of the entity
     * @param {boolean} [excludeInactive] Whether to exclude inactive objects from the response.
     * @param {string} [asOfDate] An end date of a period. Format should be YYYY-MM-DD.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PositionsApi
     */
    PositionsApi.prototype.getOpcoPositions = function (arenaId, entityId, excludeInactive, asOfDate, options) {
        var _this = this;
        return (0, exports.PositionsApiFp)(this.configuration).getOpcoPositions(arenaId, entityId, excludeInactive, asOfDate, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Gets positions by ids with account, investor group, and investment entity ids.
     * @summary Gets positions by ids with account, investor group, and investment entity ids.
     * @param {number} arenaId Id of the arena to operate within
     * @param {Array<string>} [positionIds] Comma separated list of position ids.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PositionsApi
     */
    PositionsApi.prototype.getPositionsAttributes = function (arenaId, positionIds, options) {
        var _this = this;
        return (0, exports.PositionsApiFp)(this.configuration).getPositionsAttributes(arenaId, positionIds, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return PositionsApi;
}(base_1.BaseAPI));
exports.PositionsApi = PositionsApi;
/**
 * TransactionsApi - axios parameter creator
 * @export
 */
var TransactionsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Returns the transaction rollup status for a specified batch ID.
         * @summary Retrieve a single transaction rollup status by batch ID
         * @param {string} syncId The synchronization ID to fetch the transaction rollup status for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransactionRollupStatus: function (syncId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'syncId' is not null or undefined
                    (0, common_1.assertParamExists)('getTransactionRollupStatus', 'syncId', syncId);
                    localVarPath = "/transaction-rollups/{sync_id}"
                        .replace("{".concat("sync_id", "}"), encodeURIComponent(String(syncId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Returns a list of transaction rollup statuses based on the provided batch IDs.
         * @summary Retrieves the status of transaction rollups by batch IDs
         * @param {Array<string>} syncIds A list of synchronization IDs (UUIDs) to fetch the transaction rollups statuses.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransactionRollupStatuses: function (syncIds, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'syncIds' is not null or undefined
                    (0, common_1.assertParamExists)('getTransactionRollupStatuses', 'syncIds', syncIds);
                    localVarPath = "/transaction-rollups";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (syncIds) {
                        localVarQueryParameter['sync_ids'] = syncIds;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.TransactionsApiAxiosParamCreator = TransactionsApiAxiosParamCreator;
/**
 * TransactionsApi - functional programming interface
 * @export
 */
var TransactionsApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.TransactionsApiAxiosParamCreator)(configuration);
    return {
        /**
         * Returns the transaction rollup status for a specified batch ID.
         * @summary Retrieve a single transaction rollup status by batch ID
         * @param {string} syncId The synchronization ID to fetch the transaction rollup status for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransactionRollupStatus: function (syncId, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getTransactionRollupStatus(syncId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['TransactionsApi.getTransactionRollupStatus']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Returns a list of transaction rollup statuses based on the provided batch IDs.
         * @summary Retrieves the status of transaction rollups by batch IDs
         * @param {Array<string>} syncIds A list of synchronization IDs (UUIDs) to fetch the transaction rollups statuses.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransactionRollupStatuses: function (syncIds, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getTransactionRollupStatuses(syncIds, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['TransactionsApi.getTransactionRollupStatuses']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.TransactionsApiFp = TransactionsApiFp;
/**
 * TransactionsApi - factory interface
 * @export
 */
var TransactionsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.TransactionsApiFp)(configuration);
    return {
        /**
         * Returns the transaction rollup status for a specified batch ID.
         * @summary Retrieve a single transaction rollup status by batch ID
         * @param {string} syncId The synchronization ID to fetch the transaction rollup status for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransactionRollupStatus: function (syncId, options) {
            return localVarFp.getTransactionRollupStatus(syncId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns a list of transaction rollup statuses based on the provided batch IDs.
         * @summary Retrieves the status of transaction rollups by batch IDs
         * @param {Array<string>} syncIds A list of synchronization IDs (UUIDs) to fetch the transaction rollups statuses.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransactionRollupStatuses: function (syncIds, options) {
            return localVarFp.getTransactionRollupStatuses(syncIds, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.TransactionsApiFactory = TransactionsApiFactory;
/**
 * TransactionsApi - object-oriented interface
 * @export
 * @class TransactionsApi
 * @extends {BaseAPI}
 */
var TransactionsApi = /** @class */ (function (_super) {
    __extends(TransactionsApi, _super);
    function TransactionsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Returns the transaction rollup status for a specified batch ID.
     * @summary Retrieve a single transaction rollup status by batch ID
     * @param {string} syncId The synchronization ID to fetch the transaction rollup status for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    TransactionsApi.prototype.getTransactionRollupStatus = function (syncId, options) {
        var _this = this;
        return (0, exports.TransactionsApiFp)(this.configuration).getTransactionRollupStatus(syncId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns a list of transaction rollup statuses based on the provided batch IDs.
     * @summary Retrieves the status of transaction rollups by batch IDs
     * @param {Array<string>} syncIds A list of synchronization IDs (UUIDs) to fetch the transaction rollups statuses.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    TransactionsApi.prototype.getTransactionRollupStatuses = function (syncIds, options) {
        var _this = this;
        return (0, exports.TransactionsApiFp)(this.configuration).getTransactionRollupStatuses(syncIds, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return TransactionsApi;
}(base_1.BaseAPI));
exports.TransactionsApi = TransactionsApi;
/**
 * UsersApi - axios parameter creator
 * @export
 */
var UsersApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Returns account IDs that the user has edit access to.
         * @summary Get accounts with edit access
         * @param {number} userId User ID of the resource
         * @param {Array<number>} [accountIds] Comma separated list of account ids.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountsEditAccess: function (userId, accountIds, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'userId' is not null or undefined
                    (0, common_1.assertParamExists)('getAccountsEditAccess', 'userId', userId);
                    localVarPath = "/users/{user_id}/account-contact/edit-access"
                        .replace("{".concat("user_id", "}"), encodeURIComponent(String(userId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (accountIds) {
                        localVarQueryParameter['account_ids'] = accountIds.join(base_1.COLLECTION_FORMATS.csv);
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Get roles for each areana
         * @summary Get roles for each arena
         * @param {number} userId User ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserArenaRoles: function (userId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'userId' is not null or undefined
                    (0, common_1.assertParamExists)('getUserArenaRoles', 'userId', userId);
                    localVarPath = "/users/{user_id}/arena_roles"
                        .replace("{".concat("user_id", "}"), encodeURIComponent(String(userId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Get a distribution batch by ID. This does handle auth checks (object and role based permissions)
         * @summary Get distribution batch with authorization checks
         * @param {number} userId User ID of the resource
         * @param {number} distributionBatchId Id of the distribution_batch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserDistributionBatch: function (userId, distributionBatchId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'userId' is not null or undefined
                    (0, common_1.assertParamExists)('getUserDistributionBatch', 'userId', userId);
                    // verify required parameter 'distributionBatchId' is not null or undefined
                    (0, common_1.assertParamExists)('getUserDistributionBatch', 'distributionBatchId', distributionBatchId);
                    localVarPath = "/users/{user_id}/distribution_batch/{distribution_batch_id}"
                        .replace("{".concat("user_id", "}"), encodeURIComponent(String(userId)))
                        .replace("{".concat("distribution_batch_id", "}"), encodeURIComponent(String(distributionBatchId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Get an un-paginated list of distributions that a user_id is authorized to view taking into account both role-based and object-level permissioning.
         * @summary Get distribution batch distributions for a user_id with authorization checks
         * @param {number} userId User ID of the resource
         * @param {number} distributionBatchId Id of the distribution_batch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserDistributionBatchDistributions: function (userId, distributionBatchId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'userId' is not null or undefined
                    (0, common_1.assertParamExists)('getUserDistributionBatchDistributions', 'userId', userId);
                    // verify required parameter 'distributionBatchId' is not null or undefined
                    (0, common_1.assertParamExists)('getUserDistributionBatchDistributions', 'distributionBatchId', distributionBatchId);
                    localVarPath = "/users/{user_id}/distribution_batch/{distribution_batch_id}/distributions"
                        .replace("{".concat("user_id", "}"), encodeURIComponent(String(userId)))
                        .replace("{".concat("distribution_batch_id", "}"), encodeURIComponent(String(distributionBatchId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Get an un-paginated list of users filtered by a required list of either DB or global user IDs.
         * @summary Get users
         * @param {Array<string>} [globalIds] Optional comma separated list of global ids to filter resources by.
         * @param {Array<number>} [ids] Optional comma separated list of ids to filter resources by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers: function (globalIds, ids, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/users";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (globalIds) {
                        localVarQueryParameter['global_ids'] = globalIds.join(base_1.COLLECTION_FORMATS.csv);
                    }
                    if (ids) {
                        localVarQueryParameter['ids'] = ids.join(base_1.COLLECTION_FORMATS.csv);
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.UsersApiAxiosParamCreator = UsersApiAxiosParamCreator;
/**
 * UsersApi - functional programming interface
 * @export
 */
var UsersApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.UsersApiAxiosParamCreator)(configuration);
    return {
        /**
         * Returns account IDs that the user has edit access to.
         * @summary Get accounts with edit access
         * @param {number} userId User ID of the resource
         * @param {Array<number>} [accountIds] Comma separated list of account ids.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountsEditAccess: function (userId, accountIds, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getAccountsEditAccess(userId, accountIds, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['UsersApi.getAccountsEditAccess']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get roles for each areana
         * @summary Get roles for each arena
         * @param {number} userId User ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserArenaRoles: function (userId, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getUserArenaRoles(userId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['UsersApi.getUserArenaRoles']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get a distribution batch by ID. This does handle auth checks (object and role based permissions)
         * @summary Get distribution batch with authorization checks
         * @param {number} userId User ID of the resource
         * @param {number} distributionBatchId Id of the distribution_batch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserDistributionBatch: function (userId, distributionBatchId, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getUserDistributionBatch(userId, distributionBatchId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['UsersApi.getUserDistributionBatch']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get an un-paginated list of distributions that a user_id is authorized to view taking into account both role-based and object-level permissioning.
         * @summary Get distribution batch distributions for a user_id with authorization checks
         * @param {number} userId User ID of the resource
         * @param {number} distributionBatchId Id of the distribution_batch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserDistributionBatchDistributions: function (userId, distributionBatchId, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getUserDistributionBatchDistributions(userId, distributionBatchId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['UsersApi.getUserDistributionBatchDistributions']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get an un-paginated list of users filtered by a required list of either DB or global user IDs.
         * @summary Get users
         * @param {Array<string>} [globalIds] Optional comma separated list of global ids to filter resources by.
         * @param {Array<number>} [ids] Optional comma separated list of ids to filter resources by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers: function (globalIds, ids, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getUsers(globalIds, ids, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['UsersApi.getUsers']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.UsersApiFp = UsersApiFp;
/**
 * UsersApi - factory interface
 * @export
 */
var UsersApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.UsersApiFp)(configuration);
    return {
        /**
         * Returns account IDs that the user has edit access to.
         * @summary Get accounts with edit access
         * @param {number} userId User ID of the resource
         * @param {Array<number>} [accountIds] Comma separated list of account ids.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountsEditAccess: function (userId, accountIds, options) {
            return localVarFp.getAccountsEditAccess(userId, accountIds, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get roles for each areana
         * @summary Get roles for each arena
         * @param {number} userId User ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserArenaRoles: function (userId, options) {
            return localVarFp.getUserArenaRoles(userId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get a distribution batch by ID. This does handle auth checks (object and role based permissions)
         * @summary Get distribution batch with authorization checks
         * @param {number} userId User ID of the resource
         * @param {number} distributionBatchId Id of the distribution_batch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserDistributionBatch: function (userId, distributionBatchId, options) {
            return localVarFp.getUserDistributionBatch(userId, distributionBatchId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get an un-paginated list of distributions that a user_id is authorized to view taking into account both role-based and object-level permissioning.
         * @summary Get distribution batch distributions for a user_id with authorization checks
         * @param {number} userId User ID of the resource
         * @param {number} distributionBatchId Id of the distribution_batch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserDistributionBatchDistributions: function (userId, distributionBatchId, options) {
            return localVarFp.getUserDistributionBatchDistributions(userId, distributionBatchId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get an un-paginated list of users filtered by a required list of either DB or global user IDs.
         * @summary Get users
         * @param {Array<string>} [globalIds] Optional comma separated list of global ids to filter resources by.
         * @param {Array<number>} [ids] Optional comma separated list of ids to filter resources by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers: function (globalIds, ids, options) {
            return localVarFp.getUsers(globalIds, ids, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.UsersApiFactory = UsersApiFactory;
/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
var UsersApi = /** @class */ (function (_super) {
    __extends(UsersApi, _super);
    function UsersApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Returns account IDs that the user has edit access to.
     * @summary Get accounts with edit access
     * @param {number} userId User ID of the resource
     * @param {Array<number>} [accountIds] Comma separated list of account ids.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    UsersApi.prototype.getAccountsEditAccess = function (userId, accountIds, options) {
        var _this = this;
        return (0, exports.UsersApiFp)(this.configuration).getAccountsEditAccess(userId, accountIds, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get roles for each areana
     * @summary Get roles for each arena
     * @param {number} userId User ID of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    UsersApi.prototype.getUserArenaRoles = function (userId, options) {
        var _this = this;
        return (0, exports.UsersApiFp)(this.configuration).getUserArenaRoles(userId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get a distribution batch by ID. This does handle auth checks (object and role based permissions)
     * @summary Get distribution batch with authorization checks
     * @param {number} userId User ID of the resource
     * @param {number} distributionBatchId Id of the distribution_batch
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    UsersApi.prototype.getUserDistributionBatch = function (userId, distributionBatchId, options) {
        var _this = this;
        return (0, exports.UsersApiFp)(this.configuration).getUserDistributionBatch(userId, distributionBatchId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get an un-paginated list of distributions that a user_id is authorized to view taking into account both role-based and object-level permissioning.
     * @summary Get distribution batch distributions for a user_id with authorization checks
     * @param {number} userId User ID of the resource
     * @param {number} distributionBatchId Id of the distribution_batch
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    UsersApi.prototype.getUserDistributionBatchDistributions = function (userId, distributionBatchId, options) {
        var _this = this;
        return (0, exports.UsersApiFp)(this.configuration).getUserDistributionBatchDistributions(userId, distributionBatchId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get an un-paginated list of users filtered by a required list of either DB or global user IDs.
     * @summary Get users
     * @param {Array<string>} [globalIds] Optional comma separated list of global ids to filter resources by.
     * @param {Array<number>} [ids] Optional comma separated list of ids to filter resources by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    UsersApi.prototype.getUsers = function (globalIds, ids, options) {
        var _this = this;
        return (0, exports.UsersApiFp)(this.configuration).getUsers(globalIds, ids, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return UsersApi;
}(base_1.BaseAPI));
exports.UsersApi = UsersApi;
